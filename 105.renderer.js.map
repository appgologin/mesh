{"version":3,"file":"105.renderer.js","mappings":"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","sources":["webpack://GoLogin/./src/app/features/common/settings/browser/browser-version/utils.ts","webpack://GoLogin/./src/app/features/common/settings/browser/mac-arm-options.tsx","webpack://GoLogin/./src/app/features/newProfile/components/browser-version-new/index.tsx","webpack://GoLogin/./src/app/features/newProfile/components/styles.tsx","webpack://GoLogin/./src/app/features/newProfile/api.ts","webpack://GoLogin/./src/app/features/newProfile/components/advanced-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/body-container.tsx","webpack://GoLogin/./src/app/features/newProfile/components/container-dashboard.tsx","webpack://GoLogin/./src/app/features/newProfile/components/cookies-manager-profile.tsx","webpack://GoLogin/./src/app/features/newProfile/components/cookies-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/folders-select/api.ts","webpack://GoLogin/./src/app/features/newProfile/components/folders-select/styles.tsx","webpack://GoLogin/./src/app/features/newProfile/components/folders-select/new-folder-row.tsx","webpack://GoLogin/./src/app/features/newProfile/components/folders-select/menu.tsx","webpack://GoLogin/./src/app/features/newProfile/components/folders-select/index.tsx","webpack://GoLogin/./src/app/features/newProfile/components/geolocation-manager.tsx","webpack://GoLogin/./src/app/features/newProfile/components/geolocation-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/overview-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/timezone-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/webrtc-tab.tsx","webpack://GoLogin/./src/app/features/newProfile/components/new-profile-page.tsx"],"sourcesContent":["export const addPrefix = (version: string): string => 'Chrome ' + version;\r\n","export const macArmOptions = ['M1', 'M2', 'M3'];\r\n","import { Select } from 'antd';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { browserUpdaterContext } from '../../../../state';\r\nimport { getSupportedOrbitaVersions } from '../../../common/api';\r\nimport { MajorVersionOption, normalizeOrbitaVersions } from '../../../common/orbita-browser';\r\nimport { addPrefix } from '../../../common/settings/browser/browser-version/utils';\r\nimport OrbitaVersionModals from '../../../modalsComponents/components/orbita-version-modals';\r\n\r\nconst BROWSER_VERSION_COMPATIBLE = '109';\r\nconst isElectron = !!window.require;\r\nconst ipcRenderer: Electron.IpcRenderer | null = isElectron ? window.require('electron').ipcRenderer : null;\r\n\r\ninterface IBrowserVersionNew {\r\n  versionValue: MajorVersionOption;\r\n  handleSelect: (value: MajorVersionOption) => void;\r\n  isUpdateOrbitaModalVisible: boolean;\r\n  setIsUpdateOrbitaModalVisible: (isVisible: boolean) => void;\r\n  isOrbitaIncompatibleModalVisible: boolean;\r\n  setIsOrbitaIncompatibleModalVisible: (isVisible: boolean) => void;\r\n  downloadSpecificOrbitaVersion: (version: MajorVersionOption) => Promise<void>;\r\n}\r\n\r\nconst BrowserVersionNew: React.FC<IBrowserVersionNew> = (props) => {\r\n  const {\r\n    versionValue,\r\n    handleSelect,\r\n    isUpdateOrbitaModalVisible,\r\n    setIsUpdateOrbitaModalVisible,\r\n    isOrbitaIncompatibleModalVisible,\r\n    setIsOrbitaIncompatibleModalVisible,\r\n    downloadSpecificOrbitaVersion,\r\n  } = props;\r\n\r\n  const [areButtonsDisabled, setAreButtonsDisabled] = useState(false);\r\n  const [isCompatible, setIsCompatible] = useState(true);\r\n  const [isDowngrading, setIsDowngrading] = useState(true);\r\n  const [orbitaVersionsSupported, setOrbitaVersionsSupported] = useState<`${number}`[]>([]);\r\n\r\n  const { t: translation } = useTranslation();\r\n  const { browserUpdating, isOrbitaVersionCompatible } = useContext(browserUpdaterContext);\r\n\r\n  const formatVersionLatest = (version: string): string =>\r\n    `${translation('defaultProfileSettings.orbitaSelector.latest.title')} ${addPrefix(version)}`;\r\n\r\n  const loadOrbitaVersions = async (): Promise<void> => {\r\n    let { supportedOrbitaVersions } = await getSupportedOrbitaVersions();\r\n    supportedOrbitaVersions = normalizeOrbitaVersions(supportedOrbitaVersions);\r\n    setOrbitaVersionsSupported(supportedOrbitaVersions);\r\n  };\r\n\r\n  const checkOrbitaVersion = async (): Promise<void> => {\r\n    if (browserUpdating || !ipcRenderer) {\r\n      return;\r\n    }\r\n\r\n    let uaMajorVersion = versionValue;\r\n    if (!versionValue || versionValue === 'unset') {\r\n      uaMajorVersion = 'latest';\r\n    }\r\n\r\n    if (versionValue === '100') {\r\n      uaMajorVersion = '10';\r\n    }\r\n\r\n    if (versionValue === '103') {\r\n      uaMajorVersion = '13';\r\n    }\r\n\r\n    const { versionToDownload } = await ipcRenderer.invoke('check-supported-orbita', { key: 'orbitaMajorVersion', value: uaMajorVersion });\r\n    if (versionToDownload) {\r\n      setIsUpdateOrbitaModalVisible(true);\r\n    }\r\n  };\r\n\r\n  const handleUpdateModalSubmit = (): void => {\r\n    setIsUpdateOrbitaModalVisible(false);\r\n    downloadSpecificOrbitaVersion(versionValue);\r\n  };\r\n\r\n  const handleIncompatibleSelectModalSubmit = (): void => {\r\n    handleSelect(BROWSER_VERSION_COMPATIBLE);\r\n    setIsOrbitaIncompatibleModalVisible(false);\r\n  };\r\n\r\n  const handleIncompatibleSelectModalClose = (): void => {\r\n    if (!isCompatible) {\r\n      handleSelect(BROWSER_VERSION_COMPATIBLE);\r\n    }\r\n\r\n    setIsOrbitaIncompatibleModalVisible(false);\r\n  };\r\n\r\n  const showModal = async (): Promise<void> => {\r\n    const isVersionCompatible = await isOrbitaVersionCompatible(versionValue);\r\n    setIsCompatible(isVersionCompatible);\r\n    if (!isVersionCompatible) {\r\n      setIsOrbitaIncompatibleModalVisible(true);\r\n    }\r\n  };\r\n\r\n  const handleAfterClose = (): void => setAreButtonsDisabled(false);\r\n\r\n  const getSelectValueNormalized = (): `${number}` => {\r\n    let valueNormalized = versionValue || 'unset';\r\n    if (valueNormalized === 'unset' || valueNormalized === 'latest') {\r\n      [valueNormalized] = orbitaVersionsSupported;\r\n    }\r\n\r\n    return valueNormalized;\r\n  };\r\n\r\n  const shouldDowngradeOrbitaVersion = async (): Promise<boolean> => {\r\n    if (versionValue !== 'unset') {\r\n      return false;\r\n    }\r\n\r\n    const isVersionCompatible = await isOrbitaVersionCompatible(versionValue);\r\n\r\n    return !isVersionCompatible;\r\n  };\r\n\r\n  const downgradeToVersionCompatible = async (): Promise<void> => {\r\n    const shouldDowngrade = await shouldDowngradeOrbitaVersion();\r\n    if (shouldDowngrade) {\r\n      handleSelect(BROWSER_VERSION_COMPATIBLE);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadOrbitaVersions();\r\n    if (isDowngrading) {\r\n      downgradeToVersionCompatible().finally(() => setIsDowngrading(false));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isDowngrading) {\r\n      return;\r\n    }\r\n\r\n    checkOrbitaVersion();\r\n    showModal();\r\n  }, [versionValue]);\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        value={getSelectValueNormalized()}\r\n        onSelect={handleSelect}\r\n        style={{ width: '175px' }}\r\n      >\r\n        {orbitaVersionsSupported.map((versionSupported, index) => (\r\n          <Select.Option value={versionSupported} key={versionSupported}>\r\n            {index ? addPrefix(versionSupported) : formatVersionLatest(versionSupported)}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n      <OrbitaVersionModals.UpdateOrSkip\r\n        modalType='orbitaUpdateOrSkip'\r\n        visible={isUpdateOrbitaModalVisible}\r\n        areButtonsDisabled={areButtonsDisabled}\r\n        handleCancel={(): void => setIsUpdateOrbitaModalVisible(false)}\r\n        handleSubmit={handleUpdateModalSubmit}\r\n        handleAfterClose={handleAfterClose}\r\n        orbitaVersion={getSelectValueNormalized()}\r\n      />\r\n      <OrbitaVersionModals.IncompatibleSelect\r\n        visible={isOrbitaIncompatibleModalVisible}\r\n        handleSubmit={handleIncompatibleSelectModalSubmit}\r\n        handleCancel={(): void => setIsOrbitaIncompatibleModalVisible(false)}\r\n        handleClose={handleIncompatibleSelectModalClose}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BrowserVersionNew;\r\n","import styled from '@emotion/styled';\r\nimport { Radio } from 'antd';\r\n\r\nexport const TooltipText = styled('span')`\r\n  font-size: 12px;\r\n  color: var(--000000-antd-tooltip-opacity);\r\n`;\r\n\r\nexport const ElementContainer = styled('div')`\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport const RadioButton = styled(Radio.Button)`\r\n  min-width: 100px;\r\n  height: 30px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 29px;\r\n`;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { API_BASE_URL } from '../../../common/constants/constants';\r\nimport { initGA } from '../../initGA';\r\nimport { IProfile } from '../../interfaces';\r\nimport { http } from '../../services';\r\nimport { handleProxiesLimitError } from '../proxy/utils/handle-proxies-limit-error';\r\n\r\nexport const createProfile = async (profileData: any): Promise<string> => {\r\n  const googleClientId = await initGA();\r\n\r\n  const data = await http(`${API_BASE_URL}/browser`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      ...profileData,\r\n      newStartupUrlLogic: true,\r\n      googleClientId,\r\n    }),\r\n  });\r\n\r\n  return data.body;\r\n};\r\n\r\nexport const createWorkspaceProfile = async (workspaceId: string, profileData: any): Promise<IProfile> => {\r\n  const googleClientId = await initGA();\r\n\r\n  const folder = profileData.folder ? `?folder=${profileData.folder}` : '';\r\n\r\n  return http(`${API_BASE_URL}/workspaces/${workspaceId}/profiles/old${folder}`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      ...profileData,\r\n      newStartupUrlLogic: true,\r\n      googleClientId,\r\n    }),\r\n  }).then(({ body }: { body: IProfile }) => body).catch(handleProxiesLimitError);\r\n};\r\n\r\nexport const sendCookies = async (profileId: string, cookies: any): Promise<string> => {\r\n  const bodyParams = JSON.stringify(cookies);\r\n\r\n  const data = await http(`${API_BASE_URL}/browser/${profileId}/cookies?fromUser=true`, {\r\n    method: 'POST',\r\n    body: bodyParams,\r\n  });\r\n\r\n  return data.body;\r\n};\r\n\r\nexport const getProxy = async (): Promise<string> => {\r\n  const url = `${API_BASE_URL}/users-proxies/profiles-proxies`;\r\n\r\n  const data = await http(url, {\r\n    method: 'GET',\r\n  });\r\n\r\n  return data.body;\r\n};\r\n\r\nexport const sendAnalytics = (profileId: string, updatedFields: any): Promise<string> => {\r\n  const body = Object.keys(updatedFields).map((key: string) => ({\r\n    field: key,\r\n    count: updatedFields.key,\r\n    profile: profileId,\r\n    type: 'fingerprint-update',\r\n    status: 'success',\r\n    deduplicationKey: uuidv4(),\r\n  }));\r\n\r\n  return http(`${API_BASE_URL}/analytics/many`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      analytics: body,\r\n    }),\r\n  }).catch(() => Promise.resolve());\r\n};\r\n\r\nexport const getVersionOrbitaByMajor = async (version: string): Promise<string> => {\r\n  const data = await http(`${API_BASE_URL}/gologin-global-settings/orbita_version_by_major?orbita_major_version=${version}`);\r\n\r\n  return data.body;\r\n};\r\n","/* eslint-disable max-lines */\r\nimport styled from '@emotion/styled';\r\nimport { Button, Icon, Input, InputNumber, message, Modal, Radio, Select, Switch, Table, Tooltip } from 'antd';\r\nimport React, { ChangeEvent } from 'react';\r\nimport CopyToClipBoard from 'react-copy-to-clipboard';\r\nimport { TransProps, withTranslation } from 'react-i18next';\r\n\r\nimport LocalesManager from './../../modalsComponents/components/locales-manager';\r\nimport BrowserVersionNew from './browser-version-new';\r\nimport { TooltipText } from './styles';\r\nimport { DEVICE_MEMORY, HARDWARE_CONCURRENCY } from '../../../interfaces';\r\nimport { browserUpdaterContext } from '../../../state';\r\nimport { getFontsList } from '../../../utils/fonts-list';\r\nimport ProfileLanguagesInputBlock from '../../common/components/profile-langs-input-block';\r\nimport ResolutionManager from '../../common/resolution-manager';\r\nimport FontsManager from '../../modalsComponents/components/fonts-manager';\r\nimport { getVersionOrbitaByMajor } from '../api';\r\n\r\nlet ipcRenderer: Electron.IpcRenderer;\r\n\r\nif (window.require) {\r\n  ({ ipcRenderer } = window.require('electron'));\r\n}\r\n\r\nconst { Option } = Select;\r\n\r\nconst FontEditBtn = styled(Button)`\r\n  font-size: 12px;\r\n  max-height: 30px;\r\n`;\r\n\r\nconst Container = styled('div')`\r\n  color: var(--000000-create-profile-advanced);\r\n`;\r\n\r\nconst Component = styled('div')`\r\n  margin-top: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Cent = styled('div')`\r\n  align-atems: center;\r\n`;\r\n\r\nconst Title = styled('div')`\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n  padding: 10px 0;\r\n  border-bottom: 0.6px solid var(--E7E7E7-create-profile-advanced);\r\n`;\r\n\r\nconst SubTitle = styled('span')`\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  padding-bottom: 10px;\r\n  width: auto;\r\n`;\r\n\r\nconst SwitchTitle = styled(SubTitle)`\r\n  margin-left: 10px;\r\n  margin-top: 5px;\r\n  font-family: Roboto;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n`;\r\n\r\nconst Link = styled(SwitchTitle)`\r\n  color: var(--006CBA-create-profile-advanced);\r\n  cursor: pointer;\r\n  margin-left: 0;\r\n`;\r\n\r\nconst InputText = styled(Input)`\r\n  width: 350px;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\n// TODO: BUG FIX CREATE PROFILE\r\n// TODO: УБРАТЬ ПОЛНОСТЬЮ И ЗАМЕНИТЬ НА InputText\r\nconst CustomDNSInput = styled(InputText)`\r\n  margin-bottom: 80px;\r\n`;\r\n\r\nconst SelectAdvanced = styled(Select)`\r\n  width: 350px;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst RadioButton = styled(Radio.Button)`\r\n  width: 100px;\r\n  height: 30px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 29px;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ShortInput = styled(InputNumber)`\r\n  width: 57px;\r\n`;\r\n\r\nconst FontParagr = styled('p')`\r\n  margin: 0;\r\n`;\r\n\r\nconst EditLanguagesSpan = styled(SubTitle)`\r\n  cursor: pointer;\r\n  margin-left: 8px;\r\n  color: var(--006CBA-create-profile-advanced);\r\n`;\r\n\r\nconst isElectron = !!window.require;\r\n\r\ninterface IAdvancedTab extends TransProps {\r\n  profileInfo: any;\r\n  updateProfileInfo: any;\r\n  setUpdatedField: (field: string) => any;\r\n  uaUserVersion: string;\r\n  updateUserVersionOrbita: (version: string) => void;\r\n}\r\n\r\nclass AdvancedTab extends React.Component<IAdvancedTab> {\r\n  state = {\r\n    webGlModalVisible: false,\r\n    fontsModalVisible: false,\r\n    showAllFonts: false,\r\n    localesModalVisible: false,\r\n    fonts: [],\r\n    isUpdateOrbitaModalVisible: false,\r\n    isOrbitaIncompatibleModalVisible: false,\r\n  };\r\n\r\n  static contextType = browserUpdaterContext;\r\n\r\n  componentDidMount(): void {\r\n    const { fonts = {}, os = 'win' } = this.props.profileInfo;\r\n    const families = fonts.families || [];\r\n    getFontsList(os, families).then(resultFonts => {\r\n      this.setState({ fonts: resultFonts });\r\n    });\r\n  }\r\n\r\n  updateNavigator = (field: string, value: any) => {\r\n    this.props.updateProfileInfo({\r\n      navigator: {\r\n        ...this.props.profileInfo.navigator,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`navigator.${field}`);\r\n  };\r\n\r\n  private replaceUserAgentBrowserVersion = (userAgent = '', version = ''): string => userAgent.replace(/Chrome\\/.*\\s/, 'Chrome/' + version + ' ');\r\n\r\n  private getUserAgentByOrbitaVersionMajor = async (userAgent = '', versionMajor = ''): Promise<string> => {\r\n    const versionFull = await getVersionOrbitaByMajor(versionMajor).catch((() => versionMajor));\r\n\r\n    return this.replaceUserAgentBrowserVersion(userAgent, versionFull);\r\n  };\r\n\r\n  private updateUserAgent = async (version: string): Promise<void> => {\r\n    this.props.updateUserVersionOrbita(version);\r\n    const userAgent = await this.getUserAgentByOrbitaVersionMajor(this.props.profileInfo.navigator.userAgent, version);\r\n\r\n    this.props.updateProfileInfo({\r\n      navigator: { ...this.props.profileInfo.navigator, userAgent },\r\n    });\r\n\r\n    this.props.setUpdatedField('navigator.userAgent');\r\n  };\r\n\r\n  private downloadSpecificOrbitaVersion = async (orbitaVersion: string): Promise<void> => {\r\n    const { updateBrowserUpdater } = this.context;\r\n    updateBrowserUpdater({\r\n      initialized: true,\r\n      browserUpdating: true,\r\n      showOrbitaDialog: false,\r\n    });\r\n\r\n    ipcRenderer && ipcRenderer.invoke('download-browser', { orbitaVersion });\r\n  };\r\n\r\n  private setIsUpdateOrbitaModalVisible = (isVisible: boolean): void => this.setState({ isUpdateOrbitaModalVisible: isVisible });\r\n  private setIsOrbitaIncompatibleModalVisible = (isVisible: boolean): void => this.setState({ isOrbitaIncompatibleModalVisible: isVisible });\r\n\r\n  private updateFonts(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      fonts: {\r\n        ...this.props.profileInfo.fonts,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`fonts.${field}`);\r\n  }\r\n\r\n  private updateMedia(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      mediaDevices: {\r\n        ...this.props.profileInfo.mediaDevices,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`mediaDevices.${field}`);\r\n  }\r\n\r\n  private updateCanvas(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      canvas: {\r\n        ...this.props.profileInfo.canvas,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`canvas.${field}`);\r\n  }\r\n\r\n  private updateAudioCtx(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      audioContext: {\r\n        ...this.props.profileInfo.audioContext,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`audioContext.${field}`);\r\n  }\r\n\r\n  private updateWebGl(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      webGL: {\r\n        ...this.props.profileInfo.webGL,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`webgl.${field}`);\r\n  }\r\n\r\n  private updateClientRects(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      clientRects: {\r\n        ...this.props.profileInfo.clientRects,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`clientRects.${field}`);\r\n  }\r\n\r\n  private updateWebGlMetadata(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      webGLMetadata: {\r\n        ...this.props.profileInfo.webGLMetadata,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`webglMetadata.${field}`);\r\n  }\r\n\r\n  private updateStorage(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      storage: {\r\n        ...this.props.profileInfo.storage,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`storage.${field}`);\r\n  }\r\n\r\n  private updatePlugins(field: string, value: any) {\r\n    this.props.updateProfileInfo({\r\n      plugins: {\r\n        ...this.props.profileInfo.plugins,\r\n        [field]: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField(`plugins.${field}`);\r\n  }\r\n\r\n  private updateResolution = (value: string) => {\r\n    this.props.updateProfileInfo({\r\n      navigator: {\r\n        ...this.props.profileInfo.navigator,\r\n        resolution: value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField('navigator.resolution');\r\n  };\r\n\r\n  threadList = HARDWARE_CONCURRENCY.map(hardware => ({\r\n    title: hardware.toString(),\r\n    value: hardware.toString(),\r\n  }));\r\n\r\n  deviceMemoryList = DEVICE_MEMORY.map(memory => ({\r\n    title: memory.toString(),\r\n    value: memory.toString(),\r\n  }));\r\n\r\n  public getCanvasContent = () => {\r\n    const { canvas = {} } = this.props.profileInfo;\r\n    const { mode } = canvas;\r\n    if (mode === 'off') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('canvas.off.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    } else if (mode === 'block') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('canvas.block.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('canvas.noise.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  public getAudionContextContent = () => {\r\n    const { audioContext = {} } = this.props.profileInfo;\r\n    const { mode } = audioContext;\r\n    if (mode === 'off') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('audioContext.off.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('audioContext.noise.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  public getWebGlImageContent = () => {\r\n    const { webGL = {} } = this.props.profileInfo;\r\n    const { mode } = webGL;\r\n    if (mode === 'off') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('webgl.image.off.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('webgl.image.noise.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  public getWebGlMetadata = () => {\r\n    const { webGLMetadata = {} } = this.props.profileInfo;\r\n    const { mode } = webGLMetadata;\r\n    if (mode === 'off') {\r\n      return (\r\n        <Row>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('webgl.metadata.off.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </Row>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Tooltip\r\n          title={(\r\n            <TooltipText>\r\n              {this.props.t('webgl.metadata.mask.help')}\r\n            </TooltipText>\r\n          )}\r\n          overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n          placement='rightBottom'\r\n          arrowPointAtCenter={true}\r\n        >\r\n          <Icon\r\n            style={{\r\n              marginTop: 7,\r\n              marginLeft: 5,\r\n              marginBottom: 7,\r\n              opacity: 0.4,\r\n            }}\r\n            type='info-circle'\r\n          />\r\n        </Tooltip>\r\n      </>\r\n    );\r\n  };\r\n\r\n  public toggleWebGlModal = (boolean: boolean) => {\r\n    this.setState({\r\n      webGlModalVisible: boolean,\r\n    });\r\n  };\r\n\r\n  public toggleFontsModal = (boolean: boolean) => {\r\n    this.setState({\r\n      fontsModalVisible: boolean,\r\n    });\r\n  };\r\n\r\n  public toggleLocalesListModal = (save: boolean, autoLang = true, newLanguage?: string): void => {\r\n    if (save) {\r\n      this.updateNavigator('language', newLanguage);\r\n      this.props.setUpdatedField('language');\r\n      this.props.updateProfileInfo({ autoLang });\r\n      this.props.setUpdatedField('autoLang');\r\n    }\r\n\r\n    this.setState({\r\n      localesModalVisible: false,\r\n    });\r\n  };\r\n\r\n  public setFontsState = (fonts: any[]) => this.setState({ fonts });\r\n\r\n  public webGParamsTable = () => {\r\n    const columns = [\r\n      {\r\n        title: this.props.t('base.extension'),\r\n        dataIndex: 'extension',\r\n        key: 'extension',\r\n      },\r\n      {\r\n        title: this.props.t('base.name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n      },\r\n      {\r\n        title: this.props.t('base.code'),\r\n        dataIndex: 'code',\r\n        key: 'code',\r\n      },\r\n      {\r\n        title: this.props.t('base.value'),\r\n        dataIndex: 'value',\r\n        key: 'value',\r\n      },\r\n    ];\r\n\r\n    const dataSource: any[] = [];\r\n\r\n    return <Table dataSource={dataSource} columns={columns} />;\r\n  };\r\n\r\n  public cancelFontsModal() {\r\n    this.toggleFontsModal(false);\r\n  }\r\n\r\n  public saveFontsModal() {\r\n    const checkedFontsObjs = this.state.fonts.filter(\r\n      (fontElem: any) => fontElem.checked,\r\n    );\r\n\r\n    const checkedFonts = checkedFontsObjs.map(\r\n      (fontElem: any) => fontElem.value,\r\n    );\r\n\r\n    this.updateFonts('families', checkedFonts);\r\n    this.toggleFontsModal(false);\r\n  }\r\n\r\n  private getFontsSetting = () => {\r\n    const os = this.props.profileInfo.os || 'win';\r\n\r\n    let androidNotificationComponent = null;\r\n    if (os === 'android') {\r\n      androidNotificationComponent = (\r\n        <SubTitle\r\n          style={{ marginTop: '8px' }}\r\n        >\r\n          {this.props.t('fonts.androidNotifyText')}\r\n        </SubTitle>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              disabled={os === 'android'}\r\n              checked={this.props.profileInfo.fonts.enableMasking}\r\n              onChange={e => this.updateFonts('enableMasking', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('fonts.switchLabel')}\r\n            </SwitchTitle>\r\n          </Row>\r\n        </Component>\r\n        {androidNotificationComponent}\r\n      </>\r\n    );\r\n  };\r\n\r\n  private getFontsContent = () => {\r\n    const { fonts = {}, os = 'win' } = this.props.profileInfo;\r\n    const { enableMasking } = fonts;\r\n    if (os === 'android' || !enableMasking) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Component>\r\n          <Row>\r\n            <SubTitle style={{ marginTop: '5px' }}>\r\n              {this.props.t('fonts.subtitle')}\r\n              :\r\n            </SubTitle>\r\n          </Row>\r\n        </Component>\r\n        {this.renderUserFonts()}\r\n        <Component>\r\n          <Row>\r\n            <FontEditBtn\r\n              type='primary'\r\n              onClick={() => this.toggleFontsModal(true)}\r\n            >\r\n              {this.props.t('base.edit')}\r\n            </FontEditBtn>\r\n          </Row>\r\n        </Component>\r\n      </>\r\n    );\r\n  };\r\n\r\n  public renderUserFonts = () => {\r\n    const { showAllFonts } = this.state;\r\n    const usersFontsCountToRender = 8;\r\n    const { fonts = {} } = this.props.profileInfo;\r\n    const families = fonts.families || [];\r\n    const checkedFontsNames = families.map((elem: any, index: number) => (\r\n      <FontParagr key={index}>\r\n        {elem}\r\n      </FontParagr>\r\n    ));\r\n\r\n    const arrayToRender = checkedFontsNames.slice(0, usersFontsCountToRender);\r\n\r\n    const fontLength = checkedFontsNames.length;\r\n    if (showAllFonts) {\r\n      checkedFontsNames.push(\r\n        <Link onClick={() => this.setState({ showAllFonts: false })}>\r\n          {this.props.t('base.showLess')}\r\n        </Link>,\r\n      );\r\n    } else if (fontLength > usersFontsCountToRender) {\r\n      const diff = fontLength - usersFontsCountToRender;\r\n\r\n      // TODO: Connect localization\r\n      arrayToRender.push(\r\n        <Link onClick={() => this.setState({ showAllFonts: true })}>\r\n          ...and\r\n          {' '}\r\n          {diff}\r\n          {' '}\r\n          more\r\n        </Link>,\r\n      );\r\n    }\r\n\r\n    if (!arrayToRender.length) {\r\n      return '';\r\n    } else if (showAllFonts) {\r\n      return (\r\n        <Component>\r\n          {checkedFontsNames}\r\n        </Component>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Component>\r\n        {arrayToRender}\r\n      </Component>);\r\n  };\r\n\r\n  public getMaskMediaDevices = () => {\r\n    const { profileInfo } = this.props;\r\n    const { mediaDevices = {} } = profileInfo;\r\n    const { enableMasking } = mediaDevices;\r\n    if (!enableMasking) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Component>\r\n          <Row>\r\n            <Cent>\r\n              <SubTitle style={{ width: 100 }}>\r\n                {this.props.t('mediaDevices.videoInTitle')}\r\n              </SubTitle>\r\n              <ShortInput\r\n                style={{ marginLeft: 25, marginTop: 7 }}\r\n                maxLength={1}\r\n                max={9}\r\n                min={0}\r\n                value={profileInfo.mediaDevices.videoInputs}\r\n                onChange={e => this.updateMedia('videoInputs', e || 0)}\r\n              />\r\n            </Cent>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Cent>\r\n              <SubTitle style={{ width: 100 }}>\r\n                {this.props.t('mediaDevices.audioInTitle')}\r\n              </SubTitle>\r\n              <ShortInput\r\n                style={{ marginLeft: 25 }}\r\n                maxLength={1}\r\n                max={9}\r\n                min={0}\r\n                value={profileInfo.mediaDevices.audioInputs}\r\n                onChange={e => this.updateMedia('audioInputs', e || 0)}\r\n              />\r\n            </Cent>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Cent>\r\n              <SubTitle style={{ width: 100 }}>\r\n                {this.props.t('mediaDevices.audioOutTitle')}\r\n              </SubTitle>\r\n              <ShortInput\r\n                style={{ marginLeft: 25 }}\r\n                maxLength={1}\r\n                max={9}\r\n                min={0}\r\n                value={profileInfo.mediaDevices.audioOutputs}\r\n                onChange={e => this.updateMedia('audioOutputs', e || 0)}\r\n              />\r\n            </Cent>\r\n          </Row>\r\n        </Component>\r\n      </>\r\n    );\r\n  };\r\n\r\n  private onMaxTouchPointsChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    if (/^[1-9]{1}$/.test(value)) {\r\n      this.updateNavigator('maxTouchPoints', value);\r\n    }\r\n  };\r\n\r\n  private getAndroidTouchPoints = () => {\r\n    if (this.props.profileInfo.os !== 'android') {\r\n      return null;\r\n    }\r\n\r\n    const { profileInfo } = this.props;\r\n\r\n    return (\r\n      <Component>\r\n        <SubTitle>\r\n          {this.props.t('base.maxTouchPoints')}\r\n        </SubTitle>\r\n        <InputText\r\n          maxLength={1}\r\n          max={9}\r\n          min={1}\r\n          type='number'\r\n          value={profileInfo.navigator.maxTouchPoints}\r\n          onChange={this.onMaxTouchPointsChange}\r\n        />\r\n      </Component>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    const { profileInfo } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        {/* *** Navigator *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('base.navigator')}\r\n          </Title>\r\n        </Component>\r\n        <Row>\r\n          <Component>\r\n            <SubTitle>\r\n              {this.props.t('base.useragent')}\r\n            </SubTitle>\r\n            <Row>\r\n              <InputText\r\n                value={profileInfo.navigator.userAgent}\r\n                placeholder={this.props.t('base.useragent')}\r\n                onChange={e => this.updateNavigator('userAgent', e.target.value)}\r\n              />\r\n              <CopyToClipBoard text={profileInfo.navigator.userAgent} onCopy={() => message.success(this.props.t('base.copiedText'))}>\r\n                <Icon type='copy' style={{ fontSize: 17, opacity: 0.4, marginTop: 6, marginLeft: 5 }} />\r\n              </CopyToClipBoard>\r\n            </Row>\r\n          </Component>\r\n          <Component style={{ marginLeft: 10 }}>\r\n            <SubTitle>\r\n              {this.props.t('orbitaSelector.title')}\r\n            </SubTitle>\r\n            <BrowserVersionNew\r\n              versionValue={this.props.uaUserVersion || profileInfo.uaUserVersion}\r\n              handleSelect={this.updateUserAgent}\r\n              isUpdateOrbitaModalVisible={this.state.isUpdateOrbitaModalVisible}\r\n              setIsUpdateOrbitaModalVisible={this.setIsUpdateOrbitaModalVisible}\r\n              isOrbitaIncompatibleModalVisible={this.state.isOrbitaIncompatibleModalVisible}\r\n              setIsOrbitaIncompatibleModalVisible={this.setIsOrbitaIncompatibleModalVisible}\r\n              downloadSpecificOrbitaVersion={this.downloadSpecificOrbitaVersion}\r\n            />\r\n          </Component>\r\n        </Row>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('base.screenResolution')}\r\n          </SubTitle>\r\n          <ResolutionManager\r\n            updateResolution={this.updateResolution}\r\n            isDisabled={this.props.profileInfo.os === 'android'}\r\n            oldStyle={true}\r\n            resolution={this.props.profileInfo.navigator.resolution}\r\n          />\r\n        </Component>\r\n        <Component>\r\n          <div>\r\n            <SubTitle>\r\n              {this.props.t('base.languages')}\r\n            </SubTitle>\r\n            {!this.props.profileInfo.autoLang ? (\r\n              <EditLanguagesSpan\r\n                onClick={(): void => this.setState({ localesModalVisible: true })}\r\n              >\r\n                {this.props.t('base.edit')}\r\n              </EditLanguagesSpan>\r\n            ) : null}\r\n          </div>\r\n          <ProfileLanguagesInputBlock\r\n            mode='newProfile'\r\n            autoLang={this.props.profileInfo.autoLang}\r\n            language={this.props.profileInfo.navigator.language}\r\n            updateProfileInfo={this.props.updateProfileInfo}\r\n            updateNavigator={this.updateNavigator}\r\n            setUpdatedField={this.props.setUpdatedField}\r\n          />\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('base.platform')}\r\n          </SubTitle>\r\n          <InputText\r\n            disabled={profileInfo.isM1}\r\n            value={profileInfo.navigator.platform}\r\n            placeholder={this.props.t('base.platform')}\r\n            onChange={e => this.updateNavigator('platform', e.target.value)}\r\n          />\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('newProfile.advanced.cpu.title')}\r\n          </SubTitle>\r\n          <SelectAdvanced\r\n            value={profileInfo.navigator.hardwareConcurrency}\r\n            onChange={(e: any) =>\r\n              this.updateNavigator('hardwareConcurrency', e)}\r\n          >\r\n            {this.threadList.map(\r\n              elem => (\r\n                <Option key={elem.value} value={elem.value}>\r\n                  {elem.title}\r\n                </Option>\r\n              ),\r\n            )}\r\n          </SelectAdvanced>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('newProfile.advanced.ram.title')}\r\n          </SubTitle>\r\n          <SelectAdvanced\r\n            value={profileInfo.navigator.deviceMemory}\r\n            onChange={(e: any) =>\r\n              this.updateNavigator('deviceMemory', e)}\r\n          >\r\n            {this.deviceMemoryList.map(\r\n              elem => (\r\n                <Option key={elem.value} value={elem.value}>\r\n                  {elem.title}\r\n                </Option>\r\n              ),\r\n            )}\r\n          </SelectAdvanced>\r\n        </Component>\r\n        {this.getAndroidTouchPoints()}\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.navigator.doNotTrack}\r\n              onChange={e => this.updateNavigator('doNotTrack', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.doNotTrack.switchLabel')}\r\n            </SwitchTitle>\r\n          </Row>\r\n        </Component>\r\n\r\n        {/* *** Fonts *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('fonts.title')}\r\n          </Title>\r\n        </Component>\r\n        {this.getFontsSetting()}\r\n        {this.getFontsContent()}\r\n\r\n        {/* *** Media Devices *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('mediaDevices.switchLabel')}\r\n          </Title>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.mediaDevices.enableMasking}\r\n              onChange={e => this.updateMedia('enableMasking', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('mediaDevices.switchLabel')}\r\n            </SwitchTitle>\r\n          </Row>\r\n        </Component>\r\n        {this.getMaskMediaDevices()}\r\n\r\n        {/* *** Hardware *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('base.hardware')}\r\n          </Title>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('canvas.title')}\r\n          </SubTitle>\r\n          <Row>\r\n            <Radio.Group\r\n              value={profileInfo.canvas.mode}\r\n              onChange={e => this.updateCanvas('mode', e.target.value)}\r\n            >\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('canvas.noise.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='topRight'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value=\"noise\">\r\n                  {this.props.t('base.noise')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('canvas.off.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='off'>\r\n                  {this.props.t('base.off')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('canvas.block.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton\r\n                  style={{\r\n                    borderTopRightRadius: 5,\r\n                    borderBottomRightRadius: 5,\r\n                  }}\r\n                  value='block'\r\n                >\r\n                  {this.props.t('base.block')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n            </Radio.Group>\r\n            {this.getCanvasContent()}\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('clientRects.title')}\r\n          </SubTitle>\r\n          <Row>\r\n            <Radio.Group\r\n              value={profileInfo.clientRects.mode}\r\n              onChange={e => this.updateClientRects('mode', e.target.value)}\r\n            >\r\n              <RadioButton value='noise'>\r\n                {this.props.t('base.noise')}\r\n              </RadioButton>\r\n              <RadioButton value='off'>\r\n                {this.props.t('base.off')}\r\n              </RadioButton>\r\n            </Radio.Group>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('clientRects.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('audioContext.title')}\r\n          </SubTitle>\r\n          <Row>\r\n            <Radio.Group\r\n              value={profileInfo.audioContext.mode}\r\n              onChange={e => this.updateAudioCtx('mode', e.target.value)}\r\n            >\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('audioContext.noise.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='topRight'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value=\"noise\">\r\n                  {this.props.t('base.noise')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('audioContext.off.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value=\"off\">\r\n                  {this.props.t('base.off')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n            </Radio.Group>\r\n            {this.getAudionContextContent()}\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('webgl.image.title')}\r\n          </SubTitle>\r\n          <Row>\r\n            <Radio.Group\r\n              value={profileInfo.webGL.mode}\r\n              onChange={e => this.updateWebGl('mode', e.target.value)}\r\n            >\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('webgl.image.noise.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='topRight'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value=\"noise\">\r\n                  {this.props.t('base.noise')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('webgl.image.off.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='off'>\r\n                  {this.props.t('base.off')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n            </Radio.Group>\r\n            {this.getWebGlImageContent()}\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <SubTitle>\r\n            {this.props.t('webgl.metadata.title')}\r\n          </SubTitle>\r\n          <Row>\r\n            <Radio.Group\r\n              value={profileInfo.webGLMetadata.mode}\r\n              onChange={e => this.updateWebGlMetadata('mode', e.target.value)}\r\n            >\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('webgl.metadata.mask.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='topRight'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='mask'>\r\n                  {this.props.t('base.mask')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('webgl.metadata.off.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='off'>\r\n                  {this.props.t('base.off')}\r\n                </RadioButton>\r\n              </Tooltip>\r\n            </Radio.Group>\r\n            {this.getWebGlMetadata()}\r\n          </Row>\r\n          {this.props.profileInfo.webGLMetadata.mode !== 'off' && (\r\n            <>\r\n              <Component>\r\n                <SubTitle>\r\n                  {this.props.t('webgl.vendor.title')}\r\n                </SubTitle>\r\n                <InputText\r\n                  disabled={profileInfo.isM1}\r\n                  placeholder={this.props.t('webgl.vendor.manualInputPlaceholder')}\r\n                  value={this.props.profileInfo.webGLMetadata.vendor}\r\n                  onChange={e =>\r\n                    this.updateWebGlMetadata('vendor', e.target.value)}\r\n                />\r\n              </Component>\r\n              <Component>\r\n                <SubTitle>\r\n                  {this.props.t('webgl.renderer.title')}\r\n                </SubTitle>\r\n                <InputText\r\n                  disabled={profileInfo.isM1}\r\n                  value={this.props.profileInfo.webGLMetadata.renderer}\r\n                  onChange={e =>\r\n                    this.updateWebGlMetadata('renderer', e.target.value)}\r\n                />\r\n              </Component>\r\n            </>\r\n          )}\r\n        </Component>\r\n\r\n        {/* *** Storage *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('storage.title')}\r\n          </Title>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.local}\r\n              onChange={e => this.updateStorage('local', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('storage.localStorage.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('storage.localStorage.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.extensions}\r\n              onChange={e => this.updateStorage('extensions', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('storage.extension.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('storage.extension.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n\r\n        {/* *** Browser Plugins *** */}\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('plugins.title')}\r\n          </Title>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.plugins.enableVulnerable}\r\n              onChange={e => this.updatePlugins('enableVulnerable', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('plugins.vulnerablePlugins.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('plugins.vulnerablePlugins.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Title>\r\n            {this.props.t('base.other')}\r\n          </Title>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.lockEnabled}\r\n              onChange={e => {\r\n                this.props.updateProfileInfo({ lockEnabled: e });\r\n                this.props.setUpdatedField('lockEnabled');\r\n              }}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.activeSession.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.activeSession.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.googleServicesEnabled}\r\n              onChange={e => {\r\n                this.props.updateProfileInfo({ googleServicesEnabled: e });\r\n                this.props.setUpdatedField('googleServicesEnabled');\r\n              }}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.googleServices.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.googleServices.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.bookmarks}\r\n              onChange={e => this.updateStorage('bookmarks', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.bookmarks.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.bookmarks.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 7,\r\n                  marginLeft: 5,\r\n                  marginBottom: 11,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.history}\r\n              onChange={e => this.updateStorage('history', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.history.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.history.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.passwords}\r\n              onChange={e => this.updateStorage('passwords', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.password.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.password.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.session}\r\n              onChange={e => this.updateStorage('session', e)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('newProfile.advanced.session.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.session.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <Switch\r\n              checked={profileInfo.storage.enableExternalExtensions}\r\n              onChange={(value): void => this.updateStorage('enableExternalExtensions', value)}\r\n            />\r\n            <SwitchTitle>\r\n              {this.props.t('extensions.external.switchLabel')}\r\n            </SwitchTitle>\r\n            <Tooltip\r\n              title={(\r\n                <span style={{ fontSize: 12, opacity: 0.6 }}>\r\n                  {this.props.t('extensions.external.help')}\r\n                </span>\r\n              )}\r\n              overlayStyle={{ backgroundColor: '#fff', color: '#000' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 6,\r\n                  marginLeft: 5,\r\n                  marginBottom: 6,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Component>\r\n          <InputText\r\n            placeholder={this.props.t('newProfile.advanced.startUrl.inputPlaceholder')}\r\n            value={profileInfo.startUrl}\r\n            onChange={e => {\r\n              this.props.updateProfileInfo({ startUrl: e.target.value });\r\n              this.props.setUpdatedField('startUrl');\r\n            }}\r\n          />\r\n        </Component>\r\n        <Component>\r\n          <Row>\r\n            <CustomDNSInput\r\n              placeholder={this.props.t('newProfile.advanced.dns.inputPlaceholder')}\r\n              value={profileInfo.dns}\r\n              onChange={e => {\r\n                this.props.updateProfileInfo({ dns: e.target.value });\r\n                this.props.setUpdatedField('dns');\r\n              }}\r\n            />\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('newProfile.advanced.dns.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-advanced)', color: 'var(--000000-create-profile-advanced)' }}\r\n              placement='rightBottom'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <Icon\r\n                style={{\r\n                  marginTop: 10,\r\n                  marginLeft: 5,\r\n                  marginBottom: 10,\r\n                  opacity: 0.4,\r\n                }}\r\n                type='info-circle'\r\n              />\r\n            </Tooltip>\r\n          </Row>\r\n        </Component>\r\n        <Modal\r\n          title='WebGL parameters'\r\n          visible={this.state.webGlModalVisible}\r\n          onCancel={() => this.toggleWebGlModal(false)}\r\n          footer={null}\r\n        >\r\n          {this.webGParamsTable()}\r\n        </Modal>\r\n        <FontsManager\r\n          fonts={this.state.fonts}\r\n          fontsModalVisible={this.state.fontsModalVisible}\r\n          updateFontsList={(fonts: any[]) => this.setFontsState(fonts)}\r\n          onCancel={() => this.cancelFontsModal()}\r\n          onOk={() => this.saveFontsModal()}\r\n        />\r\n        <LocalesManager\r\n          languages={profileInfo.navigator.language}\r\n          localesModalVisible={this.state.localesModalVisible}\r\n          toggleLocalesListModal={this.toggleLocalesListModal}\r\n          autoLang={this.props.profileInfo.autoLang}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(AdvancedTab);\r\n","import styled from '@emotion/styled';\r\nimport { Layout } from 'antd';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nimport { NEW_FEATURES } from '../../../../../feature-toggle';\r\nimport { borderRadiusContainer } from '../../../ui/style-templates';\r\n\r\nconst { Content } = Layout;\r\n\r\ndeclare interface IBodyContainer {}\r\n\r\nconst Container = styled(Content)<{ newStyle: boolean }>`\r\n  ${props => props.newStyle && borderRadiusContainer()};\r\n  background-color: var(--FFFFFF-create-profile);\r\n  height: 100%;\r\n`;\r\n\r\nconst BodyContainer: FunctionComponent<IBodyContainer> = ({ children }) => (\r\n  <Container newStyle={!!NEW_FEATURES.header}>{children}</Container>\r\n);\r\n\r\nexport default BodyContainer;\r\n","import { SerializedStyles } from '@emotion/core';\r\nimport styled from '@emotion/styled';\r\nimport { Layout } from 'antd';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nimport { NEW_FEATURES } from '../../../../../feature-toggle';\r\nimport { borderRadiusContainer } from '../../../ui/style-templates';\r\n\r\ninterface IMainContainer {\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Container = styled(Layout)<{ newStyle: boolean }>`\r\n  height: 100%;\r\n  ${(props): SerializedStyles|null => props.newStyle ? borderRadiusContainer() : null}\r\n`;\r\n\r\nconst MainContainer: FunctionComponent<IMainContainer> = ({\r\n  children,\r\n  onClick,\r\n}) => <Container newStyle={!!NEW_FEATURES} onClick={onClick}>{children}</Container>;\r\n\r\nexport default MainContainer;\r\n","import { Button, message, Modal } from 'antd';\r\nimport React, { DragEvent, FC, useState, MouseEvent, ChangeEvent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport IconCookiesDrop from '../../../ui/icons/IconCookiesDrop';\r\nimport { getFormattedCookies } from '../../../utils/cookies-parser';\r\nimport {\r\n  CookiesTextArea,\r\n  DEFAULT_COOKIES_BORDER_COLOR,\r\n  DrugAndDropCookiesContainer,\r\n  JsonTitleTxt,\r\n} from '../../modalsComponents/components/cookies-manager/styles/styles';\r\nimport CookiesManagerModal from '../../modalsComponents/components/cookies-manager-modal';\r\n\r\n\r\ninterface ICookiesManagerProfile {\r\n  visible: boolean;\r\n  onClose: () => any;\r\n  importCookies: (cookies: any) => any;\r\n}\r\n\r\nconst CookiesManagerProfile: FC<ICookiesManagerProfile> = (props) => {\r\n  const [cookiesTxt, setCookiesTxt] = useState<string>('');\r\n  const [cookiesBorderColor, setCookiesBorderColor] = useState<string>(DEFAULT_COOKIES_BORDER_COLOR);\r\n  const [cookiesButtonDisabled, setCookiesButtonDisabled] = useState<boolean>(true);\r\n\r\n  const { visible, onClose, importCookies } = props;\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const [placeholder, setPlaceholder] = useState<string>(translation('newProfile.cookies.pasteText') || '');\r\n\r\n  const onDragOver = (event: MouseEvent): void => {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  };\r\n\r\n  const parseFile = (files: FileList): void => {\r\n    for (const file of files) {\r\n      const allowedFileType = file.type === 'application/json' || file.type.match(/^text*/);\r\n      if (!allowedFileType) {\r\n        message.error(translation('notifications.error.onlyTextFile'));\r\n\r\n        return;\r\n      }\r\n\r\n      const reader: any = new FileReader();\r\n      reader.readAsText(file);\r\n\r\n      reader.onload = (): void => {\r\n        let isCookiesButtonDisabled = true;\r\n        let cookiesBorderCurrentColor = 'red';\r\n        try {\r\n          getFormattedCookies(reader.result);\r\n          isCookiesButtonDisabled = false;\r\n          cookiesBorderCurrentColor = DEFAULT_COOKIES_BORDER_COLOR;\r\n        } catch (e) {}\r\n\r\n        setCookiesTxt(reader.result);\r\n        setCookiesButtonDisabled(isCookiesButtonDisabled);\r\n        setCookiesBorderColor(cookiesBorderCurrentColor);\r\n      };\r\n\r\n      reader.onerror = (): void => {\r\n        message.error(reader.error);\r\n      };\r\n    }\r\n  };\r\n\r\n  const closeCookiesModal = (): void => {\r\n    setCookiesTxt('');\r\n    setCookiesBorderColor(DEFAULT_COOKIES_BORDER_COLOR);\r\n    onClose();\r\n  };\r\n\r\n  const hiddenFileInput = React.useRef<HTMLInputElement>(null);\r\n\r\n  const handleUploadClick = (): void => {\r\n    if (hiddenFileInput.current) {\r\n      hiddenFileInput.current.value = '';\r\n    }\r\n\r\n    hiddenFileInput && hiddenFileInput.current?.click();\r\n  };\r\n\r\n  const handleDrop = (event: DragEvent): void => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const { files } = event.dataTransfer;\r\n    parseFile(files);\r\n  };\r\n\r\n  const handleUploadChange = (event: any): void => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const filesUploaded = event.target.files;\r\n    parseFile(filesUploaded);\r\n  };\r\n\r\n  const changeCookiesTxt = (event: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    const txt = event.target.value;\r\n    let isCookiesButtonDisabled = true;\r\n    let cookiesBorderCurrentColor = 'red';\r\n\r\n    try {\r\n      getFormattedCookies(txt);\r\n      isCookiesButtonDisabled = false;\r\n      cookiesBorderCurrentColor = DEFAULT_COOKIES_BORDER_COLOR;\r\n    } catch (err) {}\r\n\r\n    setCookiesTxt(event.target.value);\r\n    setCookiesButtonDisabled(isCookiesButtonDisabled);\r\n    setCookiesBorderColor(cookiesBorderCurrentColor);\r\n  };\r\n\r\n  const cookiesSettings = (): JSX.Element => (\r\n    <div>\r\n      <p>\r\n        {translation('cookieManagerModal.subtitle')}\r\n        &nbsp;\r\n        <JsonTitleTxt\r\n          onMouseEnter={(): void => setPlaceholder('[{ \"key\": \"value\" }, {...}]')}\r\n          onMouseLeave={(): void => setPlaceholder(translation('newProfile.cookies.pasteText') || '')}\r\n        >\r\n          {translation('base.json')}\r\n        </JsonTitleTxt>\r\n        &nbsp;\r\n        {translation('base.and')}\r\n        &nbsp;\r\n        <JsonTitleTxt\r\n          onMouseEnter={(): void => setPlaceholder('domain.com\\tTRUE\\t/path\\tTRUE\\texpirationDate\\tname\\tvalue\\n...')}\r\n          onMouseLeave={(): void => setPlaceholder(translation('newProfile.cookies.pasteText') || '')}\r\n        >\r\n          {translation('base.netscape')}\r\n        </JsonTitleTxt>\r\n        &nbsp;\r\n        {translation('base.format')}\r\n      </p>\r\n      <DrugAndDropCookiesContainer\r\n        onDrop={handleDrop}\r\n        onDragOver={onDragOver}\r\n        onClick={handleUploadClick}\r\n      >\r\n        <input\r\n          type='file'\r\n          ref={hiddenFileInput}\r\n          onChange={handleUploadChange}\r\n          style={{ display:'none' }}\r\n        />\r\n        <IconCookiesDrop />\r\n      </DrugAndDropCookiesContainer>\r\n      <div style={{ textAlign: 'center' }}>\r\n        <h3 style={{ color: DEFAULT_COOKIES_BORDER_COLOR }}>\r\n          {translation('base.or')}\r\n        </h3>\r\n      </div>\r\n      <CookiesTextArea\r\n        value={cookiesTxt}\r\n        onChange={changeCookiesTxt}\r\n        style={{ borderColor: cookiesBorderColor }}\r\n        placeholder={placeholder}\r\n        onDrop={handleUploadChange}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const saveCookies = (): void => {\r\n    const formattedCookies = getFormattedCookies(cookiesTxt);\r\n    console.log('formattedCookies:', formattedCookies);\r\n    importCookies(formattedCookies);\r\n\r\n    closeCookiesModal();\r\n  };\r\n\r\n  return (\r\n    <CookiesManagerModal\r\n      visible={visible}\r\n      cookiesButtonDisabled={cookiesButtonDisabled}\r\n      saveCookies={saveCookies}\r\n      closeCookiesModal={closeCookiesModal}\r\n      cookiesSettings={cookiesSettings}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CookiesManagerProfile;\r\n","import styled from '@emotion/styled';\r\nimport { Button, Popconfirm, Table, Tooltip } from 'antd';\r\nimport React, { FC, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport BodyContainer from './body-container';\r\nimport CookiesManagerProfile from './cookies-manager-profile';\r\n\r\nexport const Row = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nconst ButtonImportCookies = styled(Button)`\r\n  font-size: 12px;\r\n  margin-top: 8px;\r\n  color: var(--1FC47D-create-profile-cookies);\r\n  border-color: var(--1FC47D-create-profile-cookies);\r\n\r\n  :hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst ContainerNameCol = styled('div')`\r\n  flex-direction: row;\r\n  display: flex;\r\n  align-items: baseline;\r\n`;\r\n\r\nconst TableStyled = styled('div')`\r\n  margin-bottom: 90px;\r\n`;\r\n\r\nconst sortAlphabet = (a:any, b:any) => a > b ? 1 : a < b ? -1 : 0;\r\n\r\ninterface ICookiesTab {\r\n  updateProfileInfo: (profileInfo: any) => any;\r\n  cookies: any[];\r\n  setUpdatedField: (field: string) => any;\r\n}\r\nconst CookiesTab: FC<ICookiesTab> = (props) => {\r\n  const [cookiesManagerModalVisible, setCookiesManagerModalVisible] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const showTable = () => (\r\n    <ButtonImportCookies onClick={openCookiesManager}>\r\n      {translation('newProfile.cookies.openImportDialogBtnText')}\r\n    </ButtonImportCookies>\r\n  );\r\n\r\n  const closeCookiesManager = () => {\r\n    setCookiesManagerModalVisible(false);\r\n  };\r\n\r\n  const openCookiesManager = () => {\r\n    setCookiesManagerModalVisible(true);\r\n  };\r\n\r\n  const updateStateCookies = (cookies: any[]) => {\r\n    props.updateProfileInfo({\r\n      cookies,\r\n    });\r\n\r\n    props.setUpdatedField('cookies');\r\n  };\r\n\r\n  const clearCookies = () => {\r\n    props.updateProfileInfo({\r\n      cookies: [],\r\n    });\r\n    props.setUpdatedField('cookies');\r\n  };\r\n\r\n  const showButtonClearTop = () => (\r\n    <Button\r\n      type='danger'\r\n      ghost={true}\r\n      style={{\r\n        backgroundColor: 'var(--B70000-create-profile-cookies)',\r\n        color: 'var(--B70000-create-profile-cookies)',\r\n        borderColor: 'var(--B70000-create-profile-cookies)',\r\n        marginBottom: 20,\r\n        height: 30,\r\n        marginLeft: 13,\r\n        paddingLeft: 13,\r\n        fontSize: 12,\r\n        borderRadius: 2,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      {translation('base.clear')}\r\n    </Button>\r\n  );\r\n\r\n  const showButtonImportTop = () => (\r\n    <Button\r\n      onClick={openCookiesManager}\r\n      type='danger'\r\n      ghost={true}\r\n      style={{\r\n        backgroundColor: 'var(--1FC47D-create-profile-cookies)',\r\n        color: 'var(--1FC47D-create-profile-cookies)',\r\n        borderColor: 'var(--1FC47D-create-profile-cookies)',\r\n        marginBottom: 20,\r\n        height: 30,\r\n        paddingLeft: 13,\r\n        fontSize: 12,\r\n        borderRadius: 2,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }}\r\n    >\r\n      {translation('base.import')}\r\n    </Button>\r\n  );\r\n\r\n  const renderTableOrButton = () => {\r\n    console.log(props.cookies.length);\r\n    if (props.cookies.length) {\r\n      return (\r\n        <>\r\n          <Row>\r\n            {showButtonImportTop()}\r\n            <Popconfirm\r\n              placement='topLeft'\r\n              title={translation('newProfile.cookies.clearConfirmationDialogText')}\r\n              onConfirm={clearCookies}\r\n              okText={translation('base.yes')}\r\n              cancelText={translation('base.no')}\r\n            >\r\n              {showButtonClearTop()}\r\n            </Popconfirm>\r\n          </Row>\r\n\r\n          <TableStyled>\r\n            <Table\r\n              bordered={true}\r\n              pagination={false}\r\n              rowKey='key'\r\n              scroll={{ y: 500 }}\r\n              locale={{ emptyText: showTable }}\r\n              dataSource={props.cookies}\r\n            >\r\n\r\n              <Table.Column\r\n                title={(\r\n                  <ContainerNameCol>\r\n                    <span>\r\n                      {translation('base.name')}\r\n                    </span>\r\n                  </ContainerNameCol>\r\n                )}\r\n                dataIndex='name'\r\n                key='name'\r\n                sorter={(a: any, b: any) => sortAlphabet(a.name, b.name)}\r\n                render={((value: string) => value.length > 18 ? <Tooltip title={value}>\r\n                  {value.slice(0, 18)}\r\n                  ...\r\n                </Tooltip> : value)}\r\n              />\r\n              <Table.Column\r\n                title={(\r\n                  <ContainerNameCol>\r\n                    <span>\r\n                      {translation('base.value')}\r\n                    </span>\r\n                  </ContainerNameCol>\r\n                )}\r\n                dataIndex='value'\r\n                key='value'\r\n                sorter={(a: any, b: any) => sortAlphabet(a.value, b.value)}\r\n                render={((value: string) => value.length > 18 ? <Tooltip title={value}>\r\n                  {value.slice(0, 18)}\r\n                  ...\r\n                </Tooltip> : value)}\r\n              />\r\n              <Table.Column\r\n                title={(\r\n                  <ContainerNameCol>\r\n                    <span>\r\n                      {translation('base.expires')}\r\n                    </span>\r\n                  </ContainerNameCol>\r\n                )}\r\n                dataIndex='expirationDate'\r\n                key='expirationDate'\r\n                sorter={(a: any, b: any) => a.expirationDate - b.expirationDate}\r\n              />\r\n            </Table>\r\n          </TableStyled>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return showTable();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BodyContainer>\r\n        {renderTableOrButton()}\r\n      </BodyContainer>\r\n\r\n      <CookiesManagerProfile\r\n        visible={cookiesManagerModalVisible}\r\n        onClose={closeCookiesManager}\r\n        importCookies={updateStateCookies}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CookiesTab;\r\n","import { API_BASE_URL } from '../../../../../common/constants/constants';\r\nimport { http } from '../../../../services';\r\nimport { IFolder } from './folder.interface';\r\n\r\nexport const getFoldersList = async (): Promise<IFolder[]> => {\r\n  const data = await http(`${API_BASE_URL}/folders?getOwn=true`);\r\n\r\n  return data.body;\r\n};\r\n","import css from '@emotion/css';\r\nimport styled from '@emotion/styled';\r\nimport { Chip } from '@material-ui/core';\r\nimport { Add, Done } from '@material-ui/icons';\r\nimport { Menu } from 'antd';\r\n\r\nexport const EllipsisContainer = styled('span')`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const DropdownMenu = styled(Menu)`\r\n  width: 270px;\r\n  max-height: 250px;\r\n  overflow: auto;\r\n  border-radius: 4px;\r\n  border-color: var(--FFFFFF-create-profile-folders-select);\r\n  \r\n  &.ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected {\r\n    background-color: var(--FFFFFF-create-profile-folders-select);\r\n    color: var(--000000A6-create-profile-folders-select);\r\n    :hover {\r\n      color: var(--00B86D-create-profile-folders-select);\r\n      background-color: var(--DFF7E9-create-profile-folders-select);\r\n    }\r\n  }\r\n  \r\n  &.ant-menu-item-selected {\r\n    background-color: var(--FFFFFF-create-profile-folders-select);\r\n    color: var(--000000A6-create-profile-folders-select);\r\n    :hover {\r\n      color: var(--00B86D-create-profile-folders-select);\r\n      background-color: var(--DFF7E9-create-profile-folders-select);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MenuItem = styled(Menu.Item)`\r\n  background-color: var(--FFFFFF-create-profile-folders-select);\r\n\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  :hover {\r\n    background-color: var(--DFF7E9-create-profile-folders-select);\r\n  }\r\n`;\r\n\r\nexport const AddNewFolderContainer = styled('div')`\r\n  font-family: Roboto;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 240px;\r\n`;\r\n\r\nexport const AddNewFolderText = styled('span')`\r\n  font-family: Roboto;\r\n  opacity: 0.5;\r\n  color: var(--222222-create-profile-folders-select);\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n`;\r\n\r\nexport const FolderNameContainer = styled('div')`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const FolderNameText = styled(EllipsisContainer)`\r\n  font-family: Roboto;\r\n  color: var(--000000-create-profile-folders-select);\r\n  max-width: 196px;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n`;\r\n\r\nexport const FolderChip = styled(Chip)`\r\n  &.MuiChip-root {\r\n    padding: 7px;\r\n    border-radius: 4px;\r\n    background: var(--0000001A-create-profile-folders-select);\r\n\r\n    overflow: hidden;\r\n    color: var(--000000A6-create-profile-folders-select);\r\n    font: normal 12px/16px 'Roboto';\r\n\r\n    height: 22px;\r\n\r\n    margin: 2px 2px 2px 0;\r\n\r\n    .MuiChip-label {\r\n      font-family: Roboto;\r\n      padding: 0 0 0 3px;\r\n    }\r\n\r\n    .MuiChip-icon {\r\n      margin-left: 1px;\r\n      color: var(--616161-create-profile-folders-select);\r\n    }\r\n\r\n    .MuiChip-deleteIcon {\r\n      margin: 0;\r\n      width: auto;\r\n      height: auto;\r\n      color: var(--00000042-create-profile-folders-select);\r\n\r\n      font-size: 15px;\r\n    }\r\n\r\n    :focus {\r\n      background-color: var(--CECECE-create-profile-folders-select);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const InputElem = styled('input')`\r\n  border: none;\r\n  outline: none;\r\n\r\n  flex: 1;\r\n  height: fit-content;\r\n  margin: 3px;\r\n  background-color: inherit;\r\n\r\n  ::placeholder {\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n    margin-left: 1px;\r\n    color: var(--BFBFBF);\r\n  }\r\n`;\r\n\r\nexport const Container = styled('div')<{ isFocused: boolean }>`\r\n  display: flex;\r\n  min-height: 32px;\r\n  max-height: 70px;\r\n\r\n  overflow: auto;\r\n  width: 270px;\r\n  flex-wrap: wrap;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--D9D9D9-create-profile-folders-select);\r\n  align-items: center;\r\n\r\n  padding: 2px;\r\n\r\n  ${props => props.isFocused && css`\r\n    border-color: var(--1FC47D-create-profile-folders-select);\r\n    border-right-width: 1px !important;\r\n    outline: 0;\r\n    box-shadow: 0 0 0 2px var(--00B86D33-create-profile-folders-select);\r\n  `}\r\n`;\r\n\r\nexport const DoneIcon = styled(Done)`\r\n  color: var(--00A987-create-profile-folders-select);\r\n`;\r\n\r\nexport const AddIcon = styled(Add)`\r\n  color: var(--222222-create-profile-folders-select);\r\n  opacity: 0.5;\r\n`;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { AddIcon, AddNewFolderContainer, AddNewFolderText, EllipsisContainer } from './styles';\r\n\r\nconst NewFolderRow = ({ inputText }: { inputText: string }): JSX.Element => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <AddNewFolderContainer>\r\n      <AddIcon style={{ fontSize: 10 }} />\r\n      <AddNewFolderText>\r\n        {translation('newProfile.addNewFolder')} &nbsp;\r\n      </AddNewFolderText>\r\n      <span style={{ color: 'var(--000000-create-profile-folders-select)' }}>\r\n        &quot;\r\n        <EllipsisContainer>\r\n          {inputText}\r\n        </EllipsisContainer>\r\n        &quot;\r\n      </span>\r\n    </AddNewFolderContainer>\r\n  )\r\n};\r\n\r\nexport default NewFolderRow;\r\n","import { FolderOutlined } from '@material-ui/icons';\r\nimport { Icon } from 'antd';\r\nimport React, { FC } from 'react';\r\n\r\nimport { IFolder } from './folder.interface';\r\nimport NewFolderRow from './new-folder-row';\r\nimport { searchBold } from './search';\r\nimport { DoneIcon, DropdownMenu, FolderNameContainer, FolderNameText, MenuItem } from './styles';\r\n\r\ninterface IMenu {\r\n  isLoading: boolean;\r\n  foldersList: IFolder[];\r\n  selectedFolders: string[];\r\n  toggleSelectedFolder: (folderName: string) => void;\r\n  inputText: string;\r\n  createNewFolder: () => void;\r\n}\r\n\r\nconst Menu: FC<IMenu> = (props): JSX.Element => {\r\n  const {\r\n    isLoading,\r\n    foldersList,\r\n    selectedFolders,\r\n    toggleSelectedFolder,\r\n    inputText,\r\n    createNewFolder,\r\n  } = props;\r\n\r\n  const filteredFolders = !inputText ? foldersList : foldersList.filter(f => f.name.toLowerCase()?.includes(inputText.toLowerCase()));\r\n\r\n  const renderNewFolderRow = (): JSX.Element | null => {\r\n    if (!inputText || foldersList.map(f => f.name).includes(inputText)) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <DropdownMenu>\r\n        <MenuItem style={{ height: 32, padding: '8px 16px 10px', margin: 0 }} onClick={createNewFolder}>\r\n          <NewFolderRow inputText={inputText} />\r\n        </MenuItem>\r\n      </DropdownMenu>\r\n    );\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{ fontSize: 32, textAlign: 'center' }}>\r\n        <Icon type='loading' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DropdownMenu style={{ padding: '8px 0 0' }}>\r\n        {filteredFolders.map(f => (\r\n          <MenuItem\r\n            style={{ height: 32, padding: '0px 0 0 14px', margin: 0 }}\r\n            onClick={(): void => toggleSelectedFolder(f.name)}\r\n            key={f.name}\r\n          >\r\n            <FolderNameContainer>\r\n              <FolderOutlined viewBox={'0 0 36 24'} />\r\n              <FolderNameText>\r\n                {searchBold(inputText, f.name)}\r\n              </FolderNameText>\r\n            </FolderNameContainer>\r\n            {selectedFolders.includes(f.name) ? <DoneIcon viewBox={'1 0 36 32'} /> : null}\r\n          </MenuItem>\r\n        ))}\r\n      </DropdownMenu>\r\n      {renderNewFolderRow()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { FolderOutlined } from '@material-ui/icons';\r\nimport { Dropdown, message } from 'antd';\r\nimport React, { FC, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { getFoldersList } from './api';\r\nimport Menu from './menu';\r\nimport {\r\n  Container,\r\n  FolderChip,\r\n  InputElem,\r\n} from './styles';\r\nimport { NEW_FEATURES } from '../../../../../../feature-toggle';\r\nimport { IFolder } from '../../../../interfaces';\r\nimport { userContext, workspaceContext } from '../../../../state';\r\nimport { addFolder, createWorkspaceFolder } from '../../../folders/api';\r\n\r\ninterface IFoldersSelect {\r\n  selectedFolders: string[];\r\n  selectFolders: (newFoldersList: string[]) => void;\r\n  visible: boolean;\r\n  setVisible: (state: boolean) => void;\r\n}\r\n\r\nconst FoldersSelect: FC<IFoldersSelect> = (props) => {\r\n  const [inputText, setInputText] = useState<string>('');\r\n  const [marginTopDropdown, setMarginTopDropdown] = useState<number>(0);\r\n  const [foldersList, setFoldersList] = useState<IFolder[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  const {\r\n    folders: foldersListFromCtx,\r\n    updateFolders,\r\n  } = useContext(userContext);\r\n\r\n  const foldersListWhenToggle = NEW_FEATURES.header ? foldersListFromCtx : foldersList;\r\n\r\n  const foldersRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { id: workspaceId } = useContext(workspaceContext);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const { selectedFolders, selectFolders, visible, setVisible } = props;\r\n\r\n  const getFolders = async (): Promise<void> => {\r\n    const folders = await getFoldersList();\r\n    folders.sort((a, b) => a.order - b.order);\r\n\r\n    setFoldersList(folders);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (NEW_FEATURES.header) {\r\n      setIsLoading(false);\r\n\r\n      return;\r\n    }\r\n\r\n    getFolders();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setMarginTopDropdown(foldersRef.current?.clientHeight || 0);\r\n  }, [selectedFolders.length]);\r\n\r\n  const createNewFolder = async (): Promise<void> => {\r\n    const inputFolderName = inputText.replace(/\\s+/g, ' ').trim();\r\n\r\n    if (!inputFolderName) {\r\n      message.error(translation('notifications.error.emptyFolder'));\r\n\r\n      return;\r\n    }\r\n\r\n    const existingFolder = foldersListWhenToggle.find(folder => folder.name === inputFolderName);\r\n    if (existingFolder) {\r\n      message.error(`Folder \"${inputFolderName}\" already exists`);\r\n\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    let createdFolder;\r\n    if (NEW_FEATURES.workspaces) {\r\n      createdFolder = await createWorkspaceFolder(workspaceId, inputFolderName);\r\n    } else {\r\n      createdFolder = await addFolder(inputFolderName, []);\r\n    }\r\n\r\n    if (NEW_FEATURES.header) {\r\n      const newFoldersList = foldersListFromCtx;\r\n      newFoldersList.push({ name: createdFolder.name, order: newFoldersList.length, id: createdFolder.id });\r\n      localStorage.setItem('folders-order', JSON.stringify(newFoldersList));\r\n      updateFolders(newFoldersList);\r\n      toggleSelectedFolder(inputFolderName);\r\n      setInputText('');\r\n      setIsLoading(false);\r\n\r\n      return;\r\n    }\r\n\r\n    const rawCachedFolders = localStorage.getItem('folders-order');\r\n    const newFoldersList = rawCachedFolders ? JSON.parse(rawCachedFolders) : foldersList;\r\n    newFoldersList.push({ name: createdFolder.name, order: newFoldersList.length, id: createdFolder.id });\r\n    localStorage.setItem('folders-order', JSON.stringify(newFoldersList));\r\n\r\n    toggleSelectedFolder(inputFolderName);\r\n    setInputText('');\r\n    setFoldersList(newFoldersList);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const toggleSelectedFolder = (folderName: string): void => {\r\n    const hasFolder = selectedFolders.find(f => f === folderName);\r\n    const newSelectedFolders = hasFolder ? selectedFolders.filter(f => f !== folderName) : [...selectedFolders, folderName];\r\n\r\n    selectFolders(newSelectedFolders);\r\n  };\r\n\r\n  const onInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (!visible) {\r\n      setVisible(true);\r\n    }\r\n\r\n    if (event.key === 'Escape') {\r\n      setVisible(false);\r\n\r\n      return;\r\n    }\r\n\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    createNewFolder();\r\n  };\r\n\r\n  const renderSelectedFolders = (): JSX.Element => (\r\n    <>\r\n      {selectedFolders.map(f => (\r\n        <FolderChip\r\n          icon={<FolderOutlined viewBox={'0 0 36 24'} />}\r\n          label={f}\r\n          onDelete={(): void => toggleSelectedFolder(f)}\r\n          key={f}\r\n          deleteIcon={<span style={{ marginLeft: 5 }}>×</span>}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n\r\n  const menuProps = {\r\n    isLoading,\r\n    foldersList: foldersListWhenToggle,\r\n    selectedFolders,\r\n    toggleSelectedFolder,\r\n    inputText,\r\n    createNewFolder,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={(e): void => {\r\n        e.stopPropagation();\r\n        setVisible(true);\r\n      }}\r\n    >\r\n      <Dropdown\r\n        overlayStyle={{\r\n          zIndex: 999,\r\n          boxShadow: '0px 4px 5px 1px var(--0000001A-create-profile-folders-select)',\r\n          borderRadius: 4,\r\n          marginTop: marginTopDropdown,\r\n        }}\r\n        overlay={<Menu {...menuProps} />}\r\n        trigger={['click']}\r\n        visible={visible}\r\n      >\r\n        <Container isFocused={visible} ref={foldersRef}>\r\n          {renderSelectedFolders()}\r\n          <InputElem\r\n            placeholder={!selectedFolders.length ? translation('base.noFolder') : ''}\r\n            value={inputText}\r\n            onChange={(e): void => setInputText(e.target.value)}\r\n            onKeyDown={onInputKeyDown}\r\n          />\r\n        </Container>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoldersSelect;\r\n","import React, { Component } from 'react';\r\nimport { Input, Slider } from 'antd';\r\nimport styled from '@emotion/styled';\r\nimport { TransProps, withTranslation } from 'react-i18next';\r\n\r\nconst InputDiv = styled('div')`\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst IpInput = styled(Input)`\r\n  width: 30%;\r\n`;\r\n\r\nconst SliderDiv = styled('div')`\r\n  display: inline-block;\r\n  width: 30%;\r\n`;\r\n\r\nconst SubTitle = styled('span')`\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\ndeclare interface IGeolocationManager extends TransProps {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n}\r\n\r\nclass GeolocationManager extends Component<IGeolocationManager> {\r\n  state = {\r\n    latitude: this.props.profileInfo.geolocation.latitude,\r\n    longitude: this.props.profileInfo.geolocation.longitude,\r\n    accuracy: this.props.profileInfo.geolocation.accuracy || 10,\r\n  };\r\n\r\n  private changeGeolocationParam(field: string, e: any) {\r\n    const regex = /^-?\\d*\\.?\\d*$/;\r\n    const value = e.target.value;\r\n    if (!regex.test(value)) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      [field]: e.target.value,\r\n    });\r\n    this.props.updateProfileInfo({\r\n      geolocation: {\r\n        ...this.props.profileInfo.geolocation,\r\n        [field]: e.target.value,\r\n      }\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <InputDiv>\r\n          <SubTitle>{this.props.t('base.latitude')}</SubTitle>\r\n          <IpInput\r\n            size='small'\r\n            onChange={(e: any) => this.changeGeolocationParam('latitude', e)}\r\n            value={this.state.latitude}\r\n          />\r\n        </InputDiv>\r\n        <InputDiv>\r\n          <SubTitle>{this.props.t('base.longitude')}</SubTitle>\r\n          <IpInput\r\n            size='small'\r\n            onChange={(e: any) => this.changeGeolocationParam('longitude', e)}\r\n            value={this.state.longitude}\r\n          />\r\n        </InputDiv>\r\n        <InputDiv>\r\n          <SubTitle\r\n            style={{ paddingBottom: 0 }}\r\n          >\r\n            {this.props.t('base.accuracy')} ({this.props.t('base.meters')?.toLowerCase()}) {this.state.accuracy}\r\n          </SubTitle>\r\n          <SliderDiv>\r\n            <Slider\r\n              step={10}\r\n              min={10}\r\n              value={this.state.accuracy}\r\n              dots={true}\r\n              tooltipVisible={false}\r\n              onChange={(e: any) => this.changeGeolocationParam('accuracy', { target: { value: e } })}\r\n            />\r\n          </SliderDiv>\r\n        </InputDiv>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(GeolocationManager);\r\n","import React, { Component } from 'react';\r\nimport { Icon, Radio, Switch, Tooltip } from 'antd';\r\nimport styled from '@emotion/styled';\r\nimport GeolocationManager from './geolocation-manager';\r\nimport { TransProps, withTranslation } from 'react-i18next';\r\nimport { TooltipText } from './styles';\r\n\r\nconst ElementContainer = styled('div')`\r\n  margin-top: 27px;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\nconst Col = styled('div')`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Subtitle = styled('span')`\r\n  font-size: 12px;\r\n  color: var(--000000-create-profile-geolocation);\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst RadioButton = styled(Radio.Button)`\r\n  width: 100px;\r\n  height: 30px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 29px;\r\n`;\r\n\r\ninterface IGeolocationTab extends TransProps {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n  setUpdatedField: (field: string) => any;\r\n}\r\nclass GeolocationTab extends Component<IGeolocationTab> {\r\n  private setMode = (e: any) => {\r\n    const { geolocation = {} } = this.props.profileInfo;\r\n\r\n    this.props.updateProfileInfo({\r\n      geolocation: {\r\n        ...geolocation,\r\n        mode: e.target.value\r\n      }\r\n    });\r\n\r\n    this.props.setUpdatedField('geolocation.mode');\r\n  };\r\n\r\n  private fillBasedOnIp = (isEnabled: boolean) => {\r\n    const { geolocation = {} } = this.props.profileInfo;\r\n\r\n    this.props.updateProfileInfo({\r\n      geolocation: {\r\n        ...geolocation,\r\n        fillBasedOnIp: isEnabled\r\n      }\r\n    });\r\n\r\n    this.props.setUpdatedField('geolocation.fillBasedOnIp');\r\n  };\r\n\r\n  public getWebgeolocation = () => {\r\n    const { geolocation = {} } = this.props.profileInfo;\r\n    const mode = geolocation.mode;\r\n    if (mode === 'allow') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('geolocation.allow.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    } else if (mode === 'block') {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('geolocation.block.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('geolocation.prompt.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  public geoOptionContainer = () => (\r\n    <ElementContainer>\r\n      <Col>\r\n        <Row>\r\n          <Switch\r\n            checked={this.props.profileInfo.geolocation.fillBasedOnIp}\r\n            onChange={this.fillBasedOnIp}\r\n          />\r\n          <Subtitle>{this.props.t('geolocation.fillBasedOnIpText')}</Subtitle>\r\n        </Row>\r\n        {!this.props.profileInfo.geolocation.fillBasedOnIp && (\r\n          <GeolocationManager {...this.props}/>\r\n        )}\r\n      </Col>\r\n    </ElementContainer>\r\n  );\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <ElementContainer>\r\n          <Row>\r\n            <Radio.Group\r\n              value={this.props.profileInfo.geolocation.mode}\r\n              onChange={this.setMode}\r\n            >\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('geolocation.prompt.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='prompt'>{this.props.t('base.prompt')}</RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('geolocation.allow.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='allow'>{this.props.t('base.allow')}</RadioButton>\r\n              </Tooltip>\r\n              <Tooltip\r\n                title={(\r\n                  <TooltipText>\r\n                    {this.props.t('geolocation.block.help')}\r\n                  </TooltipText>\r\n                )}\r\n                overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-geolocation)', color: 'var(--000000-create-profile-geolocation)' }}\r\n                placement='top'\r\n                arrowPointAtCenter={true}\r\n              >\r\n                <RadioButton value='block'>{this.props.t('base.block')}</RadioButton>\r\n              </Tooltip>\r\n            </Radio.Group>\r\n            {this.getWebgeolocation()}\r\n          </Row>\r\n          {this.props.profileInfo.geolocation.mode !== 'block' && (\r\n            <>{this.geoOptionContainer()}</>\r\n          )}\r\n        </ElementContainer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(GeolocationTab);\r\n","import styled from '@emotion/styled';\r\nimport { Radio, Button, Select } from 'antd';\r\nimport React, { FC, ReactElement, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { getUserOS, IOSParams, modifyUserAgentForWin11 } from '../../../utils/user-os';\r\nimport { macArmOptions } from '../../common/settings/browser/mac-arm-options';\r\n\r\nconst TabContainer = styled('div')`\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  color: var(--000000-create-profile-overview);\r\n`;\r\n\r\nconst ContentOperationSystem = styled('div')`\r\n  margin-top: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Subtitle = styled('span')`\r\n  margin-bottom: 10px;\r\n  display: block;\r\n`;\r\n\r\nconst ButtonNewFingerprint = styled(Button)`\r\n  font-size: 12px;\r\n  margin-top: 10px;\r\n  color: var(--1FC47D-create-profile-overview);\r\n  border-color: var(--1FC47D-create-profile-overview);\r\n  padding: 0 10px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: 'center;\r\n\r\n  :hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst RadioButton = styled(Radio.Button)`\r\n  width: 90px;\r\n  height: 30px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 29px;\r\n  @media screen and (max-width: 325px) {\r\n    width: 75px;\r\n  }\r\n`;\r\n\r\nconst RecommendedContainer = styled('div')`\r\n  width: 450px;\r\n  padding-left: 12px;\r\n  padding-right: 12px;\r\n  background-color: var(--F8F8F8-create-profile-overview);\r\n  border-radius: 2px;\r\n  margin-top: 10px;\r\n`;\r\n\r\n// any to be able to set type in implementation\r\nconst SelectAdvanced = styled<any>(Select)`\r\n  width: 111px;\r\n  margin-bottom: 10px;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst RecommendedTxt = styled('div')`\r\n  color: var(--00000099-create-profile-overview);\r\n`;\r\n\r\ndeclare interface IOverviewTab {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n  updateFingerprint: any;\r\n  setUpdatedField: (field: string) => any;\r\n}\r\n\r\nconst OverviewTab: FC<IOverviewTab> = (props) => {\r\n  const { updateProfileInfo, profileInfo, updateFingerprint, setUpdatedField } = props;\r\n\r\n  const [userOs, setUserOs] = useState<IOSParams>({ name: 'win' });\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    getUserOS().then(setUserOs);\r\n  }, []);\r\n\r\n  const isElectron = !!window.require;\r\n\r\n  const updateOsValue = async (event: any): Promise<void> => {\r\n    const os = event.target.value;\r\n    let targetOs = os;\r\n    let { userAgent } = profileInfo.navigator;\r\n    let osSpec = '';\r\n\r\n    if (os === 'macArm') {\r\n      targetOs = 'mac';\r\n      osSpec = 'M1';\r\n    }\r\n\r\n    if (os === 'win11') {\r\n      targetOs = 'win';\r\n      osSpec = 'win11';\r\n      userAgent = modifyUserAgentForWin11(userAgent);\r\n    }\r\n\r\n    await updateProfileInfo({\r\n      os: targetOs,\r\n      osSpec,\r\n    });\r\n\r\n    props.updateFingerprint();\r\n    setUpdatedField('os');\r\n    setUpdatedField('osSpec');\r\n  };\r\n\r\n  const getRadioValue = (): string => {\r\n    if (profileInfo.os === 'mac' && profileInfo.osSpec?.includes('M')) {\r\n      return 'macArm';\r\n    }\r\n\r\n    if (profileInfo.osSpec === 'win11') {\r\n      return 'win11';\r\n    }\r\n\r\n    return profileInfo.os;\r\n  };\r\n\r\n  const getCompitableUserOs = (): string => {\r\n    if (userOs.name === 'mac' && userOs.spec?.includes('M')) {\r\n      return 'macArm';\r\n    }\r\n\r\n    if (userOs.spec === 'win11') {\r\n      return 'win11';\r\n    }\r\n\r\n    return userOs.name;\r\n  };\r\n\r\n  const recommendedOsTable = (): string|null|void => {\r\n    if (!isElectron && getRadioValue() !== 'lin') {\r\n      return translation('newProfile.overview.recommendedOSTxt.web');\r\n    }\r\n\r\n    if (isElectron && userOs.name && getRadioValue() !== getCompitableUserOs()) {\r\n      return translation('newProfile.overview.recommendedOSTxt.desktop');\r\n    }\r\n  };\r\n\r\n  const handleOsChange = async (value: string): Promise<void> => {\r\n    await updateProfileInfo({\r\n      osSpec: value,\r\n    });\r\n    updateFingerprint();\r\n    setUpdatedField('osSpec');\r\n  };\r\n\r\n  const getOsSpecSelector = (): JSX.Element | null => {\r\n    if (getRadioValue() === 'macArm') {\r\n      return (\r\n        <div>\r\n          <Subtitle style={{ marginTop: 20 }}>\r\n            {translation('newProfile.overview.processorGeneration')}\r\n          </Subtitle>\r\n          <SelectAdvanced\r\n            value={profileInfo.osSpec}\r\n            onChange={handleOsChange}\r\n          >\r\n            {macArmOptions.map((option) => (\r\n              <Select.Option value={option} key={option}>\r\n                {option}\r\n              </Select.Option>\r\n            ))}\r\n\r\n          </SelectAdvanced>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <TabContainer>\r\n      <ContentOperationSystem>\r\n        <Subtitle>\r\n          {translation('base.operatingSystem')}\r\n        </Subtitle>\r\n        <Radio.Group\r\n          value={getRadioValue()}\r\n          size='default'\r\n          onChange={updateOsValue}\r\n        >\r\n          <RadioButton value='win' style={{ width: 100 }}>\r\n            Windows 10\r\n          </RadioButton>\r\n          <RadioButton value='win11' style={{ width: 100 }}>\r\n            Windows 11\r\n          </RadioButton>\r\n          <RadioButton value='mac'>\r\n            Mac Intel\r\n          </RadioButton>\r\n          <RadioButton value='macArm'>\r\n            Mac ARM\r\n          </RadioButton>\r\n          <RadioButton value='lin'>\r\n            Linux\r\n          </RadioButton>\r\n          <RadioButton value='android'>\r\n            Android\r\n          </RadioButton>\r\n        </Radio.Group>\r\n\r\n        {userOs.name ?\r\n          <RecommendedContainer>\r\n            <RecommendedTxt>\r\n              {recommendedOsTable()}\r\n            </RecommendedTxt>\r\n          </RecommendedContainer> : null}\r\n        {getOsSpecSelector()}\r\n        <div>\r\n          <ButtonNewFingerprint\r\n            onClick={(): void => {\r\n              updateFingerprint();\r\n              setUpdatedField('fingerprint');\r\n            }}\r\n          >\r\n            {translation('newProfile.overview.updateFingerprintBtnText')}\r\n          </ButtonNewFingerprint>\r\n        </div>\r\n      </ContentOperationSystem>\r\n    </TabContainer>\r\n  );\r\n};\r\n\r\nexport default OverviewTab;\r\n","import React, { Component } from 'react';\r\nimport { Switch, Select } from 'antd';\r\nimport styled from '@emotion/styled';\r\n\r\nconst { Option } = Select;\r\n\r\nimport TIMEZONES from '../../common/timezones.ts';\r\nimport { TransProps, withTranslation } from 'react-i18next';\r\n\r\nconst ElementContainer = styled('div')`\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nconst Subtitle = styled('span')`\r\n  font-size: 12px;\r\n  color: var(--000000-create-profile-timezone);\r\n  margin-left: 13px;\r\n`;\r\n\r\ndeclare interface ITimezoneTab extends TransProps {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n  setUpdatedField: (field: string) => any;\r\n}\r\n\r\nclass TimezoneTab extends Component<ITimezoneTab> {\r\n  private changeFillTimezone = (isEnabled: boolean) => {\r\n    const { timezone = {} } = this.props.profileInfo;\r\n\r\n    this.props.updateProfileInfo({\r\n      timezone: {\r\n        ...timezone,\r\n        fillBasedOnIp: isEnabled\r\n      }\r\n    });\r\n\r\n    this.props.setUpdatedField('timezone.fillBasedOnIp');\r\n  };\r\n\r\n  private updateTimezone = (value: string) => {\r\n    const { timezone = {} } = this.props.profileInfo;\r\n\r\n    this.props.updateProfileInfo({\r\n      timezone: {\r\n        ...timezone,\r\n        timezone: value\r\n      }\r\n    });\r\n\r\n    this.props.setUpdatedField('timezone.timezone');\r\n  };\r\n\r\n  public getTimezoneContent = () => {\r\n    const { timezone = {} } = this.props.profileInfo;\r\n    const fillBasedOnIp = timezone.fillBasedOnIp;\r\n    if (fillBasedOnIp) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <ElementContainer>\r\n          <Select\r\n            showSearch={true}\r\n            value={this.props.profileInfo.timezone.timezone}\r\n            onChange={this.updateTimezone}\r\n            style={{ width: 320 }}\r\n          >\r\n            {TIMEZONES.sort((a, b) => a.name.localeCompare(b.name)).map(\r\n              (elem) => {\r\n                const timezoneName = elem.name;\r\n                const offset = elem.offset;\r\n\r\n                // TODO: Localize timezones\r\n                return (\r\n                  <Option key={timezoneName} value={timezoneName}>\r\n                    {timezoneName} ({offset})\r\n                  </Option>\r\n                );\r\n              }\r\n            )}\r\n          </Select>\r\n        </ElementContainer>\r\n      </>\r\n    );\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <ElementContainer>\r\n          <Row>\r\n            <Switch\r\n              checked={this.props.profileInfo.timezone.fillBasedOnIp}\r\n              onChange={this.changeFillTimezone}\r\n            />\r\n            <Subtitle>\r\n              {this.props.t('newProfile.timezone.fillBasedOnIp')}\r\n            </Subtitle>\r\n          </Row>\r\n        </ElementContainer>\r\n        {this.getTimezoneContent()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(TimezoneTab);\r\n","import { Icon, Radio, Tooltip } from 'antd';\r\nimport React, { ChangeEvent, Component } from 'react';\r\nimport { TransProps, withTranslation } from 'react-i18next';\r\n\r\nimport { TooltipText, ElementContainer, RadioButton } from './styles';\r\n\r\ninterface IWebRTCTab extends TransProps {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n  setUpdatedField: (field: string) => any;\r\n  t: (key: string) => string;\r\n}\r\nclass WebRTCTab extends Component<IWebRTCTab> {\r\n  private setMode = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    const { webRTC = {} } = this.props.profileInfo;\r\n\r\n    this.props.updateProfileInfo({\r\n      webRTC: {\r\n        ...webRTC,\r\n        enable: event.target.value,\r\n      },\r\n    });\r\n\r\n    this.props.setUpdatedField('webrtc.enable');\r\n  };\r\n\r\n  public getWebIcon = (): JSX.Element => {\r\n    const { webRTC = {} } = this.props.profileInfo;\r\n    const { enable } = webRTC;\r\n\r\n    if (!enable) {\r\n      return (\r\n        <>\r\n          <Tooltip\r\n            title={(\r\n              <TooltipText>\r\n                {this.props.t('webrtc.disabled.help')}\r\n              </TooltipText>\r\n            )}\r\n            overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-webrtc)', color: 'var(--000000-create-profile-webrtc)' }}\r\n            placement='rightBottom'\r\n            arrowPointAtCenter={true}\r\n          >\r\n            <Icon\r\n              style={{\r\n                marginTop: 7,\r\n                marginLeft: 5,\r\n                marginBottom: 7,\r\n                opacity: 0.4,\r\n              }}\r\n              type='info-circle'\r\n            />\r\n          </Tooltip>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Tooltip\r\n          title={(\r\n            <TooltipText>\r\n              {this.props.t('profileSettings.webrtc.enabledInfo')}\r\n            </TooltipText>\r\n          )}\r\n          overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-webrtc)', color: 'var(--000000-create-profile-webrtc)' }}\r\n          placement='rightBottom'\r\n          arrowPointAtCenter={true}\r\n        >\r\n          <Icon\r\n            style={{\r\n              marginTop: 7,\r\n              marginLeft: 5,\r\n              marginBottom: 7,\r\n              opacity: 0.4,\r\n            }}\r\n            type='info-circle'\r\n          />\r\n        </Tooltip>\r\n      </>\r\n    );\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <ElementContainer>\r\n          <Radio.Group\r\n            value={this.props.profileInfo.webRTC.enable}\r\n            onChange={this.setMode}\r\n          >\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('profileSettings.webrtc.enabledInfo')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-webrtc)', color: 'var(--000000-create-profile-webrtc)' }}\r\n              placement='topRight'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <RadioButton value={true}>{this.props.t('profileSettings.webrtc.enabled')}</RadioButton>\r\n            </Tooltip>\r\n            <Tooltip\r\n              title={(\r\n                <TooltipText>\r\n                  {this.props.t('webrtc.disabled.help')}\r\n                </TooltipText>\r\n              )}\r\n              overlayStyle={{ backgroundColor: 'var(--FFFFFF-create-profile-webrtc)', color: 'var(--000000-create-profile-webrtc)' }}\r\n              placement='top'\r\n              arrowPointAtCenter={true}\r\n            >\r\n              <RadioButton value={false}>{this.props.t('profileSettings.webrtc.disabled')}</RadioButton>\r\n            </Tooltip>\r\n          </Radio.Group>\r\n          {this.getWebIcon()}\r\n        </ElementContainer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(WebRTCTab);\r\n","/* eslint-disable max-lines */\r\n// Class component cannot work with destructured profileInfo from Redux\r\n/* eslint-disable react/destructuring-assignment */\r\nimport styled from '@emotion/styled';\r\nimport { Button, Icon, Input, Tabs, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { withTranslation, TransProps } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport AdvancedTab from './advanced-tab';\r\nimport BodyContainer from './body-container';\r\nimport MainContainer from './container-dashboard';\r\nimport CookiesTab from './cookies-tab';\r\nimport FoldersSelect from './folders-select';\r\nimport GeolocationTab from './geolocation-tab';\r\nimport OverviewTab from './overview-tab';\r\nimport TimezoneTab from './timezone-tab';\r\nimport WebRTCTab from './webrtc-tab';\r\nimport { NEW_FEATURES } from '../../../../../feature-toggle';\r\nimport { IWorkspaceCtx, DEFAULT_PROFILE_NAME, templatesContext } from '../../../state';\r\nimport { getProxyRequest, setProxyStatuses } from '../../../state/proxies.context/api';\r\nimport { incrementProxyProfilesCount, updateProxyItem, updateProxyList, useProxyList } from '../../../state/proxy-list.atom';\r\nimport Header from '../../../ui/Header';\r\nimport { getAccessibleFolderName } from '../../../utils/check-folders-to-add-profile';\r\nimport { parseNameFormatting, updateTemplateProfileName } from '../../../utils/parse-name-formatting';\r\nimport { getParsedName } from '../../../utils/parse-name-formatting/get-parsed-name';\r\nimport { isProxyDataValid } from '../../../utils/proxy.validation-message';\r\nimport { getUserOS } from '../../../utils/user-os';\r\nimport { addNewProfile as addNewProfileAction } from '../../common/actions';\r\nimport { requestFingerprint } from '../../common/api';\r\nimport { randomWords } from '../../common/randomizer';\r\nimport BookmarksTab from '../../common/tabs/bookmarks';\r\nimport ExtensionsTab from '../../profileSettingsComponents/extensionsTab/extensions-tab';\r\nimport ProxyTab from '../../profileSettingsComponents/proxyTab';\r\nimport { IProxy } from '../../proxy/components/interfaces/IProxy';\r\nimport { getProxyStatusParams } from '../../proxy/proxy-helpers';\r\nimport { createProfile, createWorkspaceProfile, sendAnalytics, sendCookies } from '../api';\r\nimport { initialState } from '../reducer';\r\n\r\nlet ipcRenderer: Electron.IpcRenderer;\r\nconst isElectron = !!window.require;\r\nif (isElectron) {\r\n  ipcRenderer = window.require('electron').ipcRenderer;\r\n}\r\n\r\nconst ContainerContent = styled('div')`\r\n  margin: 30px 86px;\r\n  color: var(--000000-create-profile);\r\n  font-family: Roboto;\r\n  font-size: 12px;\r\n  @media screen and (max-width: 500px) {\r\n    margin: 4% 5%;\r\n  }\r\n  @media screen and (max-width: 325px) {\r\n    margin: 4% 2%;\r\n  }\r\n`;\r\n\r\nconst ColumnsContainer = styled('div')`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst LeftColumnContainer = styled('div')`\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst RightColumnContainer = styled('div')`\r\n  max-width: 207px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 80px;\r\n  @media screen and (max-width: 450px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst PageTitle = styled('h1')`\r\n  margin: 0 !important;\r\n  color: var(--000000-create-profile);\r\n  font-family: Roboto;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 20px;\r\n  line-height: 23px;\r\n`;\r\n\r\nconst Subtitle = styled('span')`\r\n  font-family: Roboto;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  margin-bottom: 10px;\r\n  display: block;\r\n`;\r\n\r\nconst ProfileSummaryContainer = styled('div')`\r\n  background-color: var(--F6F6F6-create-profile);\r\n  width: 207px;\r\n`;\r\n\r\nconst ProfileSummaryContent = styled('div')`\r\n  margin: 25px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 11px;\r\n  line-height: 15px;\r\n  text-indent: 3px;\r\n  opacity: 0.9;\r\n\r\n  & span {\r\n    padding: 5px 0;\r\n  }\r\n`;\r\n\r\nconst ContentBrowserName = styled('div')`\r\n  width: 270px;\r\n  margin-right: 20px;\r\n`;\r\n\r\nconst ContentTabs = styled('div')`\r\n  margin-top: 43px;\r\n  width: 100%;\r\n  max-width: 570px;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst CreateButtonDiv = styled('div')`\r\n  position: fixed;\r\n  left: 0;\r\n  width: 100%;\r\n  bottom: 0;\r\n  z-index: 999;\r\n  padding: 1em;\r\n  background-color: var(--FFFFFF-create-profile);\r\n  box-shadow: 0 -4px 15px 0px var(--0000001A-create-profile);;\r\n`;\r\n\r\nconst SaveAndNextBtn = styled(Button)`\r\n  font-size: 12px;\r\n  max-height: 30px;\r\n  margin-top: 5px;\r\n  margin-bottom: 7px;\r\n  margin-left: 75px;\r\n  text-shadow: none;\r\n  @media screen and (max-width: 450px) {\r\n    margin-left: 0;\r\n  }\r\n`;\r\n\r\nconst EllipsisContainer = styled('span')`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nconst GreenText = styled('span')`\r\n  color: var(--2A5A2B-create-profile);\r\n  margin-left: 4px;\r\n`;\r\n\r\nconst updatedFields: any = {};\r\n\r\ninterface INewProfileProps extends TransProps {\r\n  addNewProfile: any;\r\n  profileInfo: any;\r\n  history: any;\r\n  proxyList: IProxy[];\r\n  workspaceCtx: IWorkspaceCtx;\r\n}\r\n\r\ninterface INewProfilePageState {\r\n  defaultUserAgent: string;\r\n  defaultLanguages: string;\r\n  createBtnLoading: boolean;\r\n  loadingPage: boolean;\r\n  isGeolocationScreen: boolean;\r\n  uaUserVersion: string;\r\n  isFoldersSelectVisible: boolean;\r\n}\r\n\r\nclass NewProfilePageClass extends Component<INewProfileProps, INewProfilePageState> {\r\n  constructor(props: INewProfileProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      defaultUserAgent: '',\r\n      defaultLanguages: '',\r\n      createBtnLoading: false,\r\n      loadingPage: true,\r\n      isGeolocationScreen: false,\r\n      uaUserVersion: '',\r\n      isFoldersSelectVisible: false,\r\n    };\r\n  }\r\n\r\n  public async componentDidMount(): Promise<void> {\r\n    const { workspaceCtx, addNewProfile, profileInfo } = this.props;\r\n    const { selectedTemplate } = this.context;\r\n    const deviceOS = await getUserOS();\r\n\r\n    const osParams = this.pickOsParams(deviceOS, selectedTemplate?.browser?.os, selectedTemplate?.browser?.osSpec);\r\n\r\n    let selectedFolder = null;\r\n    if (NEW_FEATURES.workspaces) {\r\n      selectedFolder = getAccessibleFolderName({\r\n        folders: workspaceCtx.folders,\r\n        permission: 'addProfile',\r\n        limitedAccess: !!workspaceCtx.me?.limitedAccess,\r\n        hasFirstFolder: true,\r\n        hasSelectedFolder: true,\r\n      });\r\n    }\r\n\r\n    const { singleProfile, dropFiles } = selectedTemplate.profileName;\r\n    const nameFormat = singleProfile || dropFiles || DEFAULT_PROFILE_NAME;\r\n    const formattingParams = {\r\n      profiles: [{}],\r\n      nameFormat,\r\n    };\r\n\r\n    let name = '';\r\n    if (NEW_FEATURES.templateProfileName) {\r\n      [{ name = '' }] = parseNameFormatting(formattingParams);\r\n      if (!name.trim()) {\r\n        name = DEFAULT_PROFILE_NAME;\r\n      }\r\n    }\r\n\r\n    await addNewProfile({\r\n      ...selectedTemplate.browser,\r\n      name,\r\n      os: osParams.name,\r\n      osSpec: osParams.spec,\r\n      folders: selectedFolder ? [selectedFolder] : [],\r\n    });\r\n\r\n    await this.updateFingerprint();\r\n\r\n    this.setState({\r\n      defaultUserAgent: profileInfo.navigator.userAgent,\r\n      defaultLanguages: profileInfo.navigator.language,\r\n    });\r\n  }\r\n\r\n  private pickOsParams(deviceOsParams: { name: string; spec?: string }, templateOs: string, templateOsSpec: string): { name: string; spec?: string } {\r\n    if (templateOs === 'deviceOS') {\r\n      return deviceOsParams;\r\n    }\r\n\r\n    if (templateOs === 'macM1') {\r\n      return {\r\n        name: 'mac',\r\n        spec: templateOsSpec || 'M1',\r\n      };\r\n    }\r\n\r\n    return {\r\n      name: templateOs,\r\n      spec: templateOsSpec,\r\n    };\r\n  }\r\n\r\n  static contextType = templatesContext;\r\n\r\n  private updateUserVersionOrbita = (value: string): void => this.setState({ uaUserVersion: value });\r\n\r\n  private setUpdatedField(field: string): void {\r\n    updatedFields[field] = (updatedFields[field] || 0) + 1;\r\n  }\r\n\r\n  private setIsGeolocationScreen = (state: boolean): void => this.setState({ isGeolocationScreen: state });\r\n\r\n  private updateFingerprint = async (): Promise<void> => {\r\n    const templatesCtx = this.context;\r\n\r\n    const { uaUserVersion } = this.state;\r\n    const { profileInfo, addNewProfile } = this.props;\r\n    const {\r\n      autoLang,\r\n      webRTC = {},\r\n      webGL: defaultWebGL = {},\r\n      webGLMetadata: defaultWebGLMetadata = {},\r\n      canvas: defaultCanvas,\r\n      fonts: defaultFonts = {},\r\n      navigator: defaultNavigator = {},\r\n      mediaDevices: defaultMediaDevices = {},\r\n      plugins: defaultPlugins = {},\r\n      timezone: defaultTimezone = {},\r\n      webglParams: defaultWebglParams = {},\r\n      clientRects: defaultClientRects = {},\r\n      os = 'win',\r\n      osSpec = '',\r\n    } = profileInfo;\r\n\r\n    const fingerprint =\r\n      await requestFingerprint({ os, osSpec, template: templatesCtx.selectedTemplate.id, uauserversion: uaUserVersion })\r\n        .catch(() => ({}));\r\n\r\n    const {\r\n      navigator,\r\n      plugins,\r\n      canvas,\r\n      mediaDevices,\r\n      webGLMetadata = {},\r\n      webGL = {},\r\n      webglParams = {},\r\n      os: fprintOS,\r\n      fonts,\r\n      timezone = {},\r\n      devicePixelRatio,\r\n      clientRects = {},\r\n      extensionsToNewProfiles = [],\r\n      userExtensionsToNewProfiles = [],\r\n    } = fingerprint;\r\n\r\n    let deviceMemory = navigator.deviceMemory || 2;\r\n    if (deviceMemory > 8) {\r\n      deviceMemory = 8;\r\n    }\r\n\r\n    if (deviceMemory < 1) {\r\n      deviceMemory = 1;\r\n    }\r\n\r\n    addNewProfile({\r\n      fonts: {\r\n        ...defaultFonts,\r\n        families: fonts,\r\n      },\r\n      webGL: {\r\n        ...defaultWebGL,\r\n        mode:\r\n          webGL.mode === 'noise' || webGL.mode === 'off'\r\n            ? webGL.mode\r\n            : defaultWebGL.mode,\r\n      },\r\n      clientRects: {\r\n        ...defaultClientRects,\r\n        mode:\r\n          clientRects.mode === 'noise' || clientRects.mode === 'off'\r\n            ? clientRects.mode\r\n            : defaultClientRects.mode,\r\n      },\r\n      webGLMetadata: {\r\n        ...defaultWebGLMetadata,\r\n        mode:\r\n          webGLMetadata.mode && webGLMetadata.mode === 'off'\r\n            ? webGLMetadata.mode\r\n            : 'mask',\r\n        vendor: webGLMetadata.vendor || 'Google Inc.',\r\n        renderer: webGLMetadata.renderer || '',\r\n      },\r\n      webRTC,\r\n      mediaDevices: {\r\n        ...defaultMediaDevices,\r\n        audioInputs: mediaDevices.audioInputs || 0,\r\n        audioOutputs: mediaDevices.audioOutputs || 0,\r\n        videoInputs: mediaDevices.videoInputs || 0,\r\n      },\r\n      canvas: {\r\n        ...defaultCanvas,\r\n        mode:\r\n          canvas.mode === 'noise' ||\r\n          canvas.mode === 'off' ||\r\n          canvas.mode === 'block'\r\n            ? canvas.mode\r\n            : defaultCanvas.mode,\r\n      },\r\n      plugins: {\r\n        ...defaultPlugins,\r\n        ...plugins,\r\n      },\r\n      autoLang,\r\n      navigator: {\r\n        ...defaultNavigator,\r\n        ...navigator,\r\n        deviceMemory,\r\n      },\r\n      timezone: {\r\n        ...defaultTimezone,\r\n        ...timezone,\r\n      },\r\n      webglParams: {\r\n        ...defaultWebglParams,\r\n        ...webglParams,\r\n      },\r\n      devicePixelRatio,\r\n      chromeExtensions: extensionsToNewProfiles,\r\n      chromeExtensionsToNewProfiles: extensionsToNewProfiles,\r\n      userChromeExtensionsToNewProfiles: userExtensionsToNewProfiles,\r\n      userChromeExtensions: userExtensionsToNewProfiles,\r\n    });\r\n    this.setState({\r\n      loadingPage: false,\r\n    });\r\n  };\r\n\r\n  private updateProfileName = (e: any) => {\r\n    const { addNewProfile } = this.props;\r\n\r\n    addNewProfile({\r\n      name: e.target.value,\r\n    });\r\n\r\n    this.setUpdatedField('name');\r\n  };\r\n\r\n  private addNameToProfile = (profileName?: string): void => this.props.addNewProfile({\r\n    name: profileName || randomWords(),\r\n  });\r\n\r\n  private getWebRtcMode = (enabled: boolean): string => {\r\n    if (enabled) {\r\n      return 'based on ip';\r\n    }\r\n\r\n    return 'off';\r\n  };\r\n\r\n  private saveProfile = async (): Promise<void> => {\r\n    const {\r\n      isGeolocationScreen,\r\n      defaultUserAgent,\r\n      defaultLanguages,\r\n    } = this.state;\r\n\r\n    const { t, workspaceCtx, proxyList, history } = this.props;\r\n\r\n    const proxyDataForValidation = this.props.profileInfo.proxy;\r\n    const isNeedValidationProxy =\r\n      ['http', 'socks4', 'socks5'].includes(this.props.profileInfo.proxy.mode?.toLowerCase()) &&\r\n      proxyDataForValidation.host &&\r\n      proxyDataForValidation.port;\r\n\r\n    if (isNeedValidationProxy) {\r\n      const isProxyValid = isProxyDataValid({\r\n        host: proxyDataForValidation.host,\r\n        port: proxyDataForValidation.port,\r\n        translation: t,\r\n      });\r\n\r\n      if (!isProxyValid) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      createBtnLoading: true,\r\n    });\r\n\r\n    if (\r\n      isGeolocationScreen\r\n      && (!(this.props.profileInfo.geoProxyInfo?.connection || this.props.profileInfo.proxy.host)\r\n      || this.props.profileInfo.geoProxyInfo.isLoading)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // if user create profile with empty custom proxy\r\n    if (this.props.profileInfo.proxyEnabled &&\r\n      (this.props.profileInfo.proxy.mode === 'none' ||\r\n        (!this.props.profileInfo.proxy.host && !['gologin', 'tor', 'geolocation'].includes(this.props.profileInfo.proxy.mode))\r\n      )\r\n    ) {\r\n      await this.props.addNewProfile({\r\n        proxyEnabled: false,\r\n      });\r\n    }\r\n\r\n    const templateCtx = this.context;\r\n    const { profileName } = templateCtx.selectedTemplate;\r\n    const { singleProfile = '', dropFiles = '' } = profileName;\r\n    const nameFromTemplate = getParsedName(dropFiles, singleProfile);\r\n    const { name = '' } = this.props.profileInfo;\r\n    if (!name.trim()) {\r\n      await this.addNameToProfile(nameFromTemplate);\r\n    }\r\n\r\n    const { userAgent = '' } = this.props.profileInfo.navigator;\r\n    if (!userAgent.trim()) {\r\n      await this.props.addNewProfile({\r\n        navigator: {\r\n          ...this.props.profileInfo.navigator,\r\n          userAgent: defaultUserAgent,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (!this.props.profileInfo.navigator.language.trim()) {\r\n      await this.props.addNewProfile({\r\n        navigator: {\r\n          ...this.props.profileInfo.navigator,\r\n          language: defaultLanguages,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.props.profileInfo.proxy.mode === 'geolocation') {\r\n      await this.props.addNewProfile({\r\n        proxy: {\r\n          ...this.props.profileInfo.proxy,\r\n          changeIpUrl: '',\r\n        },\r\n      });\r\n    }\r\n\r\n    let newProfileData: any;\r\n    try {\r\n      if (NEW_FEATURES.workspaces) {\r\n        const workspaceId = workspaceCtx.id;\r\n        newProfileData = await createWorkspaceProfile(workspaceId, this.props.profileInfo);\r\n      } else {\r\n        newProfileData = await createProfile(this.props.profileInfo);\r\n      }\r\n\r\n      const needToUpdateTemplateProfileName = NEW_FEATURES.templateProfileName && dropFiles && nameFromTemplate === newProfileData.name;\r\n      if (needToUpdateTemplateProfileName) {\r\n        await updateTemplateProfileName(dropFiles, 1, templateCtx);\r\n      }\r\n\r\n      let resProxy: IProxy;\r\n      const proxyInList = proxyList.find((el: IProxy) => el._id === newProfileData?.proxy?.id);\r\n\r\n      if (!proxyInList && newProfileData?.proxy?.id) {\r\n        const newProxy = await getProxyRequest(newProfileData.proxy.id);\r\n        if (newProxy) {\r\n          resProxy = newProxy;\r\n\r\n          const newProxyList = [\r\n            newProxy,\r\n            ...proxyList,\r\n          ];\r\n\r\n          updateProxyList(newProxyList);\r\n        }\r\n      } else if (proxyInList) {\r\n        resProxy = proxyInList;\r\n        incrementProxyProfilesCount(proxyInList?._id);\r\n      }\r\n\r\n      if (resProxy?._id && newProfileData?.proxy?.id) {\r\n        setTimeout(async (): Promise<void> => {\r\n          updateProxyItem({\r\n            ...resProxy,\r\n            _id: resProxy._id,\r\n            checkInProgress: true,\r\n          });\r\n\r\n          const statusParams = await getProxyStatusParams(resProxy);\r\n\r\n          updateProxyItem({\r\n            ...resProxy,\r\n            ...statusParams,\r\n            _id: resProxy._id,\r\n            checkDate: moment().toDate(),\r\n            checkInProgress: false,\r\n          });\r\n\r\n          const checkParams = {\r\n            _id: resProxy._id,\r\n            status: statusParams.status,\r\n            country: statusParams.country || resProxy.country,\r\n            city: statusParams.city || resProxy.city,\r\n            error: statusParams.error || null,\r\n            checkDate: moment().unix(),\r\n            lastIp: statusParams.origin,\r\n          };\r\n\r\n          await setProxyStatuses([checkParams]).catch(() => null);\r\n        }, 0);\r\n      }\r\n    } finally {\r\n      this.setState({ createBtnLoading: false });\r\n    }\r\n\r\n    if (this.props.profileInfo.cookies.length) {\r\n      await sendCookies(newProfileData.id, this.props.profileInfo.cookies);\r\n    }\r\n\r\n    // Sending fingerprint update fields analytics\r\n    sendAnalytics(newProfileData.id, updatedFields);\r\n\r\n    localStorage.removeItem('SelectedFolder');\r\n    // Setting default values for state\r\n    await this.props.addNewProfile(initialState);\r\n\r\n    history.push('/');\r\n  };\r\n\r\n  private getAndroidTouchPoints = (): JSX.Element | null => {\r\n    const { profileInfo, t: translation } = this.props;\r\n\r\n    if (profileInfo.os !== 'android') {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        {translation('base.maxTouchPoints')}\r\n        :\r\n        <GreenText>\r\n          {profileInfo.navigator.maxTouchPoints}\r\n        </GreenText>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  private osHandler = (): string => {\r\n    const { profileInfo } = this.props;\r\n\r\n    return (profileInfo.os === 'mac' && profileInfo.isM1) ? 'mac M1' : profileInfo.os;\r\n  };\r\n\r\n  private updateProfileFolders = async (folders: string[]): Promise<void> => {\r\n    await this.props.addNewProfile({ folders });\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      createBtnLoading,\r\n      loadingPage,\r\n      isFoldersSelectVisible,\r\n      uaUserVersion,\r\n    } = this.state;\r\n\r\n    const { t: translation, addNewProfile, profileInfo } = this.props;\r\n\r\n    if (loadingPage) {\r\n      return (\r\n        <MainContainer>\r\n          <Header />\r\n          <BodyContainer>\r\n            <ContainerContent>\r\n              <ColumnsContainer>\r\n                <LeftColumnContainer>\r\n                  <PageTitle>\r\n                    {translation('newProfile.title')}\r\n                  </PageTitle>\r\n                  <div style={{ fontSize: 32, marginTop: 20, color: 'var(--000000-create-profile-spinner)' }}>\r\n                    <Icon type='loading' />\r\n                  </div>\r\n                </LeftColumnContainer>\r\n              </ColumnsContainer>\r\n            </ContainerContent>\r\n          </BodyContainer>\r\n        </MainContainer>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <MainContainer onClick={(): void => this.setState({ isFoldersSelectVisible: false })}>\r\n        <Header />\r\n        <BodyContainer>\r\n          <ContainerContent>\r\n            <ColumnsContainer>\r\n              <LeftColumnContainer>\r\n                <PageTitle>\r\n                  {translation('newProfile.title')}\r\n                </PageTitle>\r\n                <div style={{ display: 'flex', marginTop: 35 }}>\r\n                  <ContentBrowserName>\r\n                    <Input\r\n                      size='small'\r\n                      style={{ height: 32 }}\r\n                      value={profileInfo.name}\r\n                      onChange={this.updateProfileName}\r\n                      placeholder={translation('newProfile.profileNameInputPlaceholder')}\r\n                    />\r\n                  </ContentBrowserName>\r\n                  <FoldersSelect\r\n                    selectedFolders={profileInfo.folders}\r\n                    selectFolders={this.updateProfileFolders}\r\n                    visible={isFoldersSelectVisible}\r\n                    setVisible={(state: boolean): void => this.setState({ isFoldersSelectVisible: state })}\r\n                  />\r\n                </div>\r\n                <ContentTabs>\r\n                  <Tabs\r\n                    defaultActiveKey='2'\r\n                    size='small'\r\n                  >\r\n                    <Tabs.TabPane key='1' tab={translation('base.overview')} >\r\n                      <OverviewTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        updateFingerprint={this.updateFingerprint}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='2' tab={translation('proxy.title')}>\r\n                      <ProxyTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                        isSaveButtonPressed={createBtnLoading}\r\n                        isCreateProfile={true}\r\n                        saveProfile={() => this.saveProfile()}\r\n                        setIsGeolocationScreen={this.setIsGeolocationScreen}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='3' tab={translation('base.timezone')}>\r\n                      <TimezoneTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='4' tab={translation('base.chromeExtensions')}>\r\n                      <ExtensionsTab\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                        profileInfo={profileInfo}\r\n                        isSaveButtonPressed={createBtnLoading}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='5' tab={translation('personalArea.defaultProfile.bookmarks')}>\r\n                      <BookmarksTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField} />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='6' tab={translation('base.webrtc')}>\r\n                      <WebRTCTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='7' tab={translation('geolocation.title')}>\r\n                      <GeolocationTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='8' tab={translation('base.advanced')}>\r\n                      <AdvancedTab\r\n                        profileInfo={profileInfo}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                        uaUserVersion={uaUserVersion}\r\n                        updateUserVersionOrbita={this.updateUserVersionOrbita}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane key='9' tab={translation('base.cookies')}>\r\n                      <CookiesTab\r\n                        cookies={profileInfo.cookies}\r\n                        updateProfileInfo={addNewProfile}\r\n                        setUpdatedField={this.setUpdatedField}\r\n                      />\r\n                    </Tabs.TabPane>\r\n                  </Tabs>\r\n                </ContentTabs>\r\n                <CreateButtonDiv>\r\n                  <SaveAndNextBtn type='primary' onClick={() => this.saveProfile()} loading={createBtnLoading}>\r\n                    {translation('newProfile.saveProfileBtnText')}\r\n                  </SaveAndNextBtn>\r\n                </CreateButtonDiv>\r\n              </LeftColumnContainer>\r\n              <RightColumnContainer>\r\n                <Subtitle>\r\n                  {translation('base.profileSummary')}\r\n                </Subtitle>\r\n                <ProfileSummaryContainer>\r\n                  <ProfileSummaryContent>\r\n                    <EllipsisContainer>\r\n                      {translation('base.profileName')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.name}\r\n                      </GreenText>\r\n                    </EllipsisContainer>\r\n                    <span>\r\n                      {translation('proxy.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.proxy.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('newProfile.profileSummary.browser')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.browserType}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.os')}\r\n                      :\r\n                      <GreenText>\r\n                        {this.osHandler()}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.useragent')}\r\n                      :\r\n                      <Tooltip\r\n                        title={profileInfo.navigator.userAgent}\r\n                      >\r\n                        <GreenText>\r\n                          {profileInfo.navigator.userAgent\r\n                            .toString()\r\n                            .slice(0, 8) + '...'}\r\n                        </GreenText>\r\n                      </Tooltip>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.resolution')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.navigator.resolution}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.languages')}\r\n                      :\r\n                      <Tooltip\r\n                        title={profileInfo.navigator.language}\r\n                      >\r\n                        <GreenText>\r\n                          {profileInfo.navigator.language\r\n                            .toString()\r\n                            .slice(0, 10) + '...'}\r\n                        </GreenText>\r\n                      </Tooltip>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.platform')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.navigator.platform}\r\n                      </GreenText>\r\n                    </span>\r\n                    <EllipsisContainer>\r\n                      {translation('base.timezone')}\r\n                      :\r\n                      <GreenText>\r\n                        {\r\n                          profileInfo.timezone.fillBasedOnIp\r\n                            ? 'based on ip'\r\n                            : profileInfo.timezone.timezone.length < 15\r\n                              ? profileInfo.timezone.timezone\r\n                              : <Tooltip title={profileInfo.timezone.timezone}>\r\n                                {' '}\r\n                                {profileInfo.timezone.timezone.slice(0, 15)}\r\n                                ...\r\n                                </Tooltip>\r\n                        }\r\n                      </GreenText>\r\n                    </EllipsisContainer>\r\n                    <span>\r\n                      {translation('geolocation.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.geolocation.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.webrtc')}\r\n                      :\r\n                      <GreenText>\r\n                        {this.getWebRtcMode(profileInfo.webRTC.enable)}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('canvas.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.canvas.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('clientRects.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.clientRects.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('webgl.metadata.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.webGLMetadata.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('webgl.image.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.webGL.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('audioContext.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.audioContext.mode}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('fonts.title')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.os === 'android' ? translation('fonts.androidNotifyText') : profileInfo.fonts.families.length}\r\n                      </GreenText>\r\n                    </span>\r\n                    {this.getAndroidTouchPoints()}\r\n                    <span>\r\n                      {translation('mediaDevices.title')}\r\n                      :\r\n                      <Tooltip title=\"( videoIn | audioIn | audioOut )\">\r\n                        <GreenText>\r\n                          (\r\n                          {profileInfo.mediaDevices.videoInputs}\r\n                          |\r\n                          {profileInfo.mediaDevices.audioInputs}\r\n                          |\r\n                          {profileInfo.mediaDevices.audioOutputs}\r\n                          )\r\n                        </GreenText>\r\n                      </Tooltip>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.localStorage')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.storage.local.toString()}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('newProfile.profileSummary.extStorage')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.storage.extensions.toString()}\r\n                      </GreenText>\r\n                    </span>\r\n                    <span>\r\n                      {translation('base.plugins')}\r\n                      :\r\n                      <GreenText>\r\n                        {profileInfo.plugins.enableVulnerable.toString()}\r\n                      </GreenText>\r\n                    </span>\r\n                  </ProfileSummaryContent>\r\n                </ProfileSummaryContainer>\r\n              </RightColumnContainer>\r\n            </ColumnsContainer>\r\n          </ContainerContent>\r\n        </BodyContainer>\r\n        <Helmet>\r\n          {/* @ts-ignore */}\r\n          <title>\r\n            {translation('newProfile.title')}\r\n            {' '}\r\n            GoLogin\r\n            {' '}\r\n            {window.gologinAppVersion || ''}\r\n          </title>\r\n        </Helmet>\r\n      </MainContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any): { profileInfo: unknown } => ({\r\n  profileInfo: state.newProfile,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addNewProfile: addNewProfileAction,\r\n};\r\n\r\nconst NewProfilePageClassComponent = withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(withTranslation()(NewProfilePageClass)),\r\n);\r\n\r\n// eslint-disable-next-line react/no-multi-comp\r\nexport const NewProfilePage: React.FC = (props)  => {\r\n  const proxyList = useProxyList();\r\n\r\n  return (<NewProfilePageClassComponent\r\n    proxyList={proxyList}\r\n    workspaceCtx={props.workspaceCtx}\r\n  />);\r\n};\r\n\r\nexport default NewProfilePage;\r\n"],"names":["addPrefix","version","macArmOptions","BROWSER_VERSION_COMPATIBLE","ipcRenderer","window","require","props","versionValue","handleSelect","isUpdateOrbitaModalVisible","setIsUpdateOrbitaModalVisible","isOrbitaIncompatibleModalVisible","setIsOrbitaIncompatibleModalVisible","downloadSpecificOrbitaVersion","areButtonsDisabled","setAreButtonsDisabled","useState","isCompatible","setIsCompatible","isDowngrading","setIsDowngrading","orbitaVersionsSupported","setOrbitaVersionsSupported","t","translation","useTranslation","browserUpdating","isOrbitaVersionCompatible","useContext","browserUpdaterContext","loadOrbitaVersions","_ref","_asyncToGenerator","supportedOrbitaVersions","getSupportedOrbitaVersions","normalizeOrbitaVersions","apply","arguments","checkOrbitaVersion","_ref2","uaMajorVersion","versionToDownload","invoke","key","value","showModal","_ref3","isVersionCompatible","getSelectValueNormalized","valueNormalized","shouldDowngradeOrbitaVersion","_ref4","downgradeToVersionCompatible","_ref5","useEffect","finally","React","_Select","onSelect","style","width","map","versionSupported","index","concat","OrbitaVersionModals","modalType","visible","handleCancel","handleSubmit","handleAfterClose","orbitaVersion","handleClose","TooltipText","styled","_templateObject","_taggedTemplateLiteral","ElementContainer","_templateObject2","RadioButton","_Radio","_templateObject3","createProfile","profileData","googleClientId","initGA","http","API_BASE_URL","method","body","JSON","stringify","_objectSpread","newStartupUrlLogic","_x","createWorkspaceProfile","workspaceId","folder","then","catch","handleProxiesLimitError","_x2","_x3","sendCookies","profileId","cookies","bodyParams","_x4","_x5","getVersionOrbitaByMajor","_ref6","_x6","Option","FontEditBtn","_Button","Container","Component","Row","_templateObject4","Cent","_templateObject5","Title","_templateObject6","SubTitle","_templateObject7","SwitchTitle","_templateObject8","Link","_templateObject9","InputText","_Input","_templateObject10","CustomDNSInput","_templateObject11","SelectAdvanced","_templateObject12","_templateObject13","ShortInput","_InputNumber","_templateObject14","FontParagr","_templateObject15","EditLanguagesSpan","_templateObject16","AdvancedTab","constructor","_this","this","_defineProperty","webGlModalVisible","fontsModalVisible","showAllFonts","localesModalVisible","fonts","field","updateProfileInfo","navigator","profileInfo","setUpdatedField","length","undefined","replace","userAgent","versionMajor","versionFull","replaceUserAgentBrowserVersion","updateUserVersionOrbita","getUserAgentByOrbitaVersionMajor","updateBrowserUpdater","context","initialized","showOrbitaDialog","isVisible","setState","resolution","HARDWARE_CONCURRENCY","hardware","title","toString","DEVICE_MEMORY","memory","canvas","mode","_Tooltip","overlayStyle","backgroundColor","color","placement","arrowPointAtCenter","_Icon","marginTop","marginLeft","marginBottom","opacity","type","audioContext","webGL","webGLMetadata","boolean","save","autoLang","newLanguage","updateNavigator","columns","dataIndex","_Table","dataSource","os","androidNotificationComponent","_Switch","disabled","checked","enableMasking","onChange","e","updateFonts","renderUserFonts","onClick","toggleFontsModal","state","checkedFontsNames","families","elem","arrayToRender","slice","fontLength","push","diff","mediaDevices","maxLength","max","min","videoInputs","updateMedia","audioInputs","audioOutputs","target","test","maxTouchPoints","onMaxTouchPointsChange","componentDidMount","_this2","getFontsList","resultFonts","updateCanvas","updateAudioCtx","updateWebGl","updateClientRects","clientRects","updateWebGlMetadata","updateStorage","storage","updatePlugins","plugins","cancelFontsModal","saveFontsModal","checkedFonts","filter","fontElem","render","_this3","placeholder","CopyToClipBoard","text","onCopy","_message","fontSize","BrowserVersionNew","uaUserVersion","updateUserAgent","ResolutionManager","updateResolution","isDisabled","oldStyle","ProfileLanguagesInputBlock","language","isM1","platform","hardwareConcurrency","threadList","deviceMemory","deviceMemoryList","getAndroidTouchPoints","doNotTrack","getFontsSetting","getFontsContent","getMaskMediaDevices","borderTopRightRadius","borderBottomRightRadius","getCanvasContent","getAudionContextContent","getWebGlImageContent","getWebGlMetadata","vendor","renderer","local","extensions","enableVulnerable","lockEnabled","googleServicesEnabled","bookmarks","history","passwords","session","enableExternalExtensions","startUrl","dns","_Modal","onCancel","toggleWebGlModal","footer","webGParamsTable","FontsManager","updateFontsList","setFontsState","onOk","LocalesManager","languages","toggleLocalesListModal","withTranslation","Content","_Layout","newStyle","borderRadiusContainer","children","NEW_FEATURES","cookiesTxt","setCookiesTxt","cookiesBorderColor","setCookiesBorderColor","DEFAULT_COOKIES_BORDER_COLOR","cookiesButtonDisabled","setCookiesButtonDisabled","onClose","importCookies","setPlaceholder","onDragOver","event","stopPropagation","preventDefault","parseFile","files","_loop","file","match","v","reader","FileReader","readAsText","onload","isCookiesButtonDisabled","cookiesBorderCurrentColor","getFormattedCookies","result","onerror","error","_ret","closeCookiesModal","hiddenFileInput","handleUploadClick","_hiddenFileInput$curr","current","click","handleDrop","dataTransfer","handleUploadChange","filesUploaded","changeCookiesTxt","txt","err","CookiesManagerModal","saveCookies","formattedCookies","console","log","cookiesSettings","JsonTitleTxt","onMouseEnter","onMouseLeave","DrugAndDropCookiesContainer","onDrop","ref","display","IconCookiesDrop","textAlign","CookiesTextArea","borderColor","ButtonImportCookies","ContainerNameCol","TableStyled","sortAlphabet","a","b","cookiesManagerModalVisible","setCookiesManagerModalVisible","showTable","openCookiesManager","clearCookies","BodyContainer","ghost","height","paddingLeft","borderRadius","alignItems","justifyContent","_Popconfirm","onConfirm","okText","cancelText","bordered","pagination","rowKey","scroll","y","locale","emptyText","sorter","name","expirationDate","CookiesManagerProfile","getFoldersList","EllipsisContainer","DropdownMenu","_Menu","MenuItem","AddNewFolderContainer","AddNewFolderText","FolderNameContainer","FolderNameText","FolderChip","Chip","InputElem","isFocused","css","DoneIcon","Done","AddIcon","Add","inputText","isLoading","foldersList","selectedFolders","toggleSelectedFolder","createNewFolder","filteredFolders","f","_f$name$toLowerCase","toLowerCase","includes","padding","margin","FolderOutlined","viewBox","searchBold","NewFolderRow","setInputText","marginTopDropdown","setMarginTopDropdown","setFoldersList","setIsLoading","folders","foldersListFromCtx","updateFolders","userContext","foldersListWhenToggle","foldersRef","useRef","id","workspaceContext","selectFolders","setVisible","getFolders","sort","order","_foldersRef$current","clientHeight","inputFolderName","trim","find","createdFolder","createWorkspaceFolder","addFolder","newFoldersList","localStorage","setItem","rawCachedFolders","getItem","parse","folderName","newSelectedFolders","menuProps","_Dropdown","zIndex","boxShadow","overlay","Menu","trigger","icon","label","onDelete","deleteIcon","onKeyDown","InputDiv","IpInput","SliderDiv","GeolocationManager","latitude","geolocation","longitude","accuracy","changeGeolocationParam","_this$props$t","size","paddingBottom","_Slider","step","dots","tooltipVisible","Col","Subtitle","GeolocationTab","isEnabled","fillBasedOnIp","setMode","getWebgeolocation","geoOptionContainer","TabContainer","ContentOperationSystem","ButtonNewFingerprint","RecommendedContainer","RecommendedTxt","updateFingerprint","userOs","setUserOs","getUserOS","_userOs$spec","isElectron","updateOsValue","targetOs","osSpec","modifyUserAgentForWin11","getRadioValue","_profileInfo$osSpec","handleOsChange","spec","option","TimezoneTab","timezone","showSearch","updateTimezone","TIMEZONES","localeCompare","timezoneName","offset","changeFillTimezone","getTimezoneContent","WebRTCTab","webRTC","enable","getWebIcon","ContainerContent","ColumnsContainer","LeftColumnContainer","RightColumnContainer","PageTitle","ProfileSummaryContainer","ProfileSummaryContent","ContentBrowserName","ContentTabs","CreateButtonDiv","SaveAndNextBtn","GreenText","updatedFields","NewProfilePageClass","super","isGeolocationScreen","templatesCtx","addNewProfile","defaultWebGL","defaultWebGLMetadata","defaultCanvas","defaultFonts","defaultNavigator","defaultMediaDevices","defaultPlugins","defaultTimezone","webglParams","defaultWebglParams","defaultClientRects","fingerprint","requestFingerprint","template","selectedTemplate","uauserversion","fprintOS","devicePixelRatio","extensionsToNewProfiles","userExtensionsToNewProfiles","chromeExtensions","chromeExtensionsToNewProfiles","userChromeExtensionsToNewProfiles","userChromeExtensions","loadingPage","profileName","randomWords","enabled","_this$props$profileIn","_this$props$profileIn2","defaultUserAgent","defaultLanguages","workspaceCtx","proxyList","proxyDataForValidation","proxy","host","port","isProxyDataValid","createBtnLoading","geoProxyInfo","connection","proxyEnabled","templateCtx","singleProfile","dropFiles","nameFromTemplate","getParsedName","addNameToProfile","newProfileData","changeIpUrl","_newProfileData2","_newProfileData2$prox","_resProxy","_newProfileData3","_newProfileData3$prox","resProxy","updateTemplateProfileName","proxyInList","el","_newProfileData","_newProfileData$proxy","_id","newProxy","getProxyRequest","newProxyList","updateProxyList","incrementProxyProfilesCount","setTimeout","updateProxyItem","checkInProgress","statusParams","getProxyStatusParams","checkDate","moment","toDate","checkParams","status","country","city","unix","lastIp","origin","setProxyStatuses","Object","keys","count","profile","deduplicationKey","uuidv4","analytics","Promise","resolve","sendAnalytics","removeItem","initialState","isFoldersSelectVisible","_selectedTemplate$bro","_selectedTemplate$bro2","_workspaceCtx$me","deviceOS","osParams","pickOsParams","browser","selectedFolder","getAccessibleFolderName","permission","limitedAccess","me","hasFirstFolder","hasSelectedFolder","formattingParams","profiles","nameFormat","DEFAULT_PROFILE_NAME","parseNameFormatting","deviceOsParams","templateOs","templateOsSpec","MainContainer","Header","updateProfileName","FoldersSelect","updateProfileFolders","_Tabs","defaultActiveKey","tab","OverviewTab","ProxyTab","isSaveButtonPressed","isCreateProfile","saveProfile","setIsGeolocationScreen","ExtensionsTab","BookmarksTab","CookiesTab","loading","browserType","osHandler","getWebRtcMode","Helmet","gologinAppVersion","templatesContext","mapDispatchToProps","addNewProfileAction","NewProfilePageClassComponent","withRouter","connect","newProfile","NewProfilePage","useProxyList"],"sourceRoot":""}