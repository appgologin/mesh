{"version":3,"file":"50.renderer.js","mappings":"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","sources":["webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/api.ts","webpack://GoLogin/./src/app/ui/icons/IconRightArrowWithdrawal.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/Overview/components/BalanceCard.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/Overview/components/CreateForm.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/Overview/components/TableRow.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/Overview/components/Table.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/Overview/components/index.tsx","webpack://GoLogin/./src/app/ui/icons/IconArrowLeftPayment.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/interfaces/components/withdrawal-method.interface.ts","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/components/BankForm.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/components/CardNumberForm.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/components/PayPalForm.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/components/USDTForm.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/components/Form.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalForm/index.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalHistory/components/TableRow.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalHistory/components/Table.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/WithdrawalHistory/index.tsx","webpack://GoLogin/./src/app/features/personalArea/affiliateProgram/index.tsx"],"sourcesContent":["import { ICreateWithdrawal } from './interfaces';\r\nimport { API_BASE_URL } from '../../../../common/constants/constants';\r\nimport { http } from '../../../services';\r\n\r\nexport const getLinks = async () => {\r\n  const req = await http(`${API_BASE_URL}/user/affiliate-links`);\r\n  return req.body;\r\n}\r\n\r\nexport const createLink = async (prefix: string) => {\r\n  const requestBody = JSON.stringify({\r\n    prefix,\r\n  });\r\n\r\n  const req = await http(`${API_BASE_URL}/user/affiliate-links`, {\r\n    method: 'POST',\r\n    body: requestBody,\r\n  });\r\n\r\n  return req.body;\r\n}\r\n\r\nexport const getWithdrawals = async () => {\r\n  const req = await http(`${API_BASE_URL}/user/affiliate-links/withdrawal`);\r\n  return req.body;\r\n}\r\n\r\nexport const getBalances = async () => {\r\n  const req = await http(`${API_BASE_URL}/user/balance`);\r\n  return req.body;\r\n}\r\n\r\nexport const createWithdrawal = async (withdrawalData: ICreateWithdrawal) => {\r\n  const requestBody = JSON.stringify(withdrawalData);\r\n\r\n  const req = await http(`${API_BASE_URL}/user/affiliate-links/withdrawal`, {\r\n    method: 'POST',\r\n    body: requestBody,\r\n  });\r\n\r\n  return req.body;\r\n}\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <svg width=\"8\" height=\"14\" viewBox=\"0 0 8 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M1.5 1.5L6.5 6.5L1.5 11.5\" stroke=\"var(--333333)\" strokeWidth=\"2\"/>\r\n  </svg>\r\n)\r\n","import React, { FC, memo } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Bg = styled.div<{width?: number}>`\r\n  background: var(--F6F7F9-personal-area-affiliate-program-balance);\r\n  border-radius: 3px;\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  height: 105px;\r\n  max-width: ${props => props.width || 150}px;\r\n  justify-content: space-between;\r\n  margin: 8px;\r\n`;\r\n\r\nconst PriceContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  margin: 0px;\r\n  color: var(--272727-personal-area-affiliate-program-balance);\r\n  font-size: 17px;\r\n  font-weight: 500;\r\n  line-height: 20px;\r\n`;\r\n\r\nconst Price = styled.span`\r\n  color: var(--00B078-personal-area-affiliate-program-balance);\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  line-height: 32px;\r\n`;\r\n\r\ninterface IBalanceCard {\r\n  title: string;\r\n  priceInCents: number;\r\n  width?: number;\r\n  btn?: React.ReactNode;\r\n  type?: 'currency'|'percent';\r\n}\r\nconst BalanceCard: FC<IBalanceCard> = (props) => {\r\n\r\n  return (\r\n    <>\r\n      <Bg width={props.width}>\r\n        <Title>{props.title}</Title>\r\n          <PriceContainer>\r\n            <Price>{Intl.NumberFormat('en-US', {\r\n              style: props.type || 'currency',\r\n              currency: 'USD',\r\n              minimumFractionDigits: 0,\r\n              maximumFractionDigits: 0,\r\n            }).format(props.type === 'percent' ? props.priceInCents / 100 : props.priceInCents / 100 | 0)}</Price>\r\n            {props.btn}\r\n          </PriceContainer>\r\n      </Bg>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(BalanceCard);\r\n","import React, { FC, memo, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Button } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Bg = styled.div`\r\n  display: flex;\r\n  margin-top: 16px;\r\n  background: var(--F6F7F9-personal-area-affiliate-program-create-form);\r\n  border-radius: 3px;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  background: var(--FFFFFF-personal-area-affiliate-program-create-form);\r\n  border: 1px solid var(--E1E2E5-personal-area-affiliate-program-create-form);\r\n  border-radius: 3px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 0 0 12px;\r\n`;\r\n\r\nconst InputText = styled.span`\r\n  color: var(--434343-personal-area-affiliate-program-create-form);\r\n  font-size: 14px;\r\n`;\r\n\r\nconst PrefixInput = styled.input`\r\n  padding: 3px 8px;\r\n  margin: 0 10px;\r\n  border: none;\r\n  border-left: 1px solid var(--BCBFC9-personal-area-affiliate-program-create-form);\r\n  //border-right: 1px solid var(--BCBFC9-personal-area-affiliate-program-create-form);\r\n  font-size: 14px;\r\n  outline: none;\r\n  background: var(--FFFFFF-personal-area-affiliate-program-create-form);\r\n`;\r\n\r\nconst Row = styled.div`\r\n  margin-top: 9px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  color: var(--333333-personal-area-affiliate-program-create-form);\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  display: inline-block;\r\n`;\r\n\r\nconst CreateBtn = styled(Button)`\r\n  margin-left: 16px;\r\n`;\r\n\r\ninterface ICreateForm {\r\n  onCreate: (prefix: string) => any;\r\n}\r\nconst CreateForm: FC<ICreateForm> = (props) => {\r\n  const [prefix, changePrefix] = useState<string>('');\r\n  const [createBtnLoading, changeCreateBtnLoading] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onPrefixChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    if (!/^[a-z]*$/i.test(value)) {\r\n      return null;\r\n    }\r\n\r\n    changePrefix(value);\r\n  }\r\n\r\n  const onCreateBtnClick = async () => {\r\n    try {\r\n      changeCreateBtnLoading(true);\r\n      await props.onCreate(prefix);\r\n    } finally {\r\n      changeCreateBtnLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Bg>\r\n        <Title>\r\n          {translation('personalArea.affiliateProgram.inputTitleStoreSubdomain')}\r\n        </Title>\r\n        <Row>\r\n          <InputContainer>\r\n            <InputText>\r\n              https://go.gologin.com/\r\n            </InputText>\r\n            <PrefixInput\r\n              placeholder={translation('personalArea.affiliateProgram.placeholderInputYourPrefix')}\r\n              value={prefix}\r\n              onChange={onPrefixChange}\r\n            />\r\n            {/*<InputText>random</InputText>*/}\r\n          </InputContainer>\r\n          <CreateBtn\r\n            onClick={onCreateBtnClick}\r\n            loading={createBtnLoading}\r\n          >\r\n            {translation('personalArea.affiliateProgram.createReferralLinkSubmitBtnText')}\r\n          </CreateBtn>\r\n        </Row>\r\n      </Bg>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(CreateForm);\r\n","import styled from '@emotion/styled';\r\nimport { Icon, message } from 'antd';\r\nimport React, { FC, memo, useState } from 'react';\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport IconPencil from '../../../../../ui/icons/IconPencil';\r\n\r\nconst IconContainer = styled.div`\r\n  margin-left: 6px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  user-select: none;\r\n`;\r\n\r\nconst EmptyNoteText = styled.span`\r\n  color: var(--7E7E7E-personal-area-affiliate-program-table-row);\r\n  opacity: 0.8;\r\n  border-bottom: 1px dashed var(--7E7E7E-personal-area-affiliate-program-table-row);\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TdRightHanded = styled.td`\r\n  text-align: right;\r\n`;\r\n\r\ninterface ITableRow {\r\n  rowInfo: any;\r\n  index: number;\r\n  onNoteChange?: (index: number, note: string) => any;\r\n}\r\n\r\nconst TableRow: FC<ITableRow> = (props) => {\r\n  const [noteEditable, changeNoteEditable] = useState<boolean>(false);\r\n  const [note, changeNote] = useState<string>(props.rowInfo.notes);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const link=`go.gologin.com/${props.rowInfo.uri}`;\r\n\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>{props.index + 1}</td>\r\n        <td style={{ display: 'flex' }}>\r\n          <span>\r\n            {link.length > 50 ? link.slice(0, 50) + '...' : link}\r\n          </span>\r\n          <CopyToClipboard\r\n            text={`https://go.gologin.com/${props.rowInfo.uri}`}\r\n            onCopy={() => message.success(translation('base.copiedText'))}\r\n          >\r\n            <IconContainer>\r\n              <Icon type='copy'/>\r\n            </IconContainer>\r\n          </CopyToClipboard>\r\n        </td>\r\n        {/*<td>*/}\r\n        {/*  {*/}\r\n        {/*    noteEditable*/}\r\n        {/*    ? (*/}\r\n        {/*      <>*/}\r\n        {/*        editable...*/}\r\n        {/*      </>*/}\r\n        {/*    )*/}\r\n        {/*    : (*/}\r\n        {/*      note*/}\r\n        {/*      ? (*/}\r\n        {/*        <>*/}\r\n        {/*          {note}*/}\r\n        {/*          <IconContainer>*/}\r\n        {/*            <IconPencil onClick={() => changeNoteEditable(true)} />*/}\r\n        {/*          </IconContainer>*/}\r\n        {/*        </>*/}\r\n        {/*      )*/}\r\n        {/*      : (*/}\r\n        {/*        <>*/}\r\n        {/*          <EmptyNoteText onClick={() => changeNoteEditable(true)}>*/}\r\n        {/*            Add notes*/}\r\n        {/*          </EmptyNoteText>*/}\r\n        {/*          <IconContainer>*/}\r\n        {/*            <IconPencil onClick={() => changeNoteEditable(true)} />*/}\r\n        {/*          </IconContainer>*/}\r\n        {/*        </>*/}\r\n        {/*      )*/}\r\n        {/*    )*/}\r\n        {/*  }*/}\r\n        {/*</td>*/}\r\n        <TdRightHanded>{props.rowInfo.clicks}</TdRightHanded>\r\n        <TdRightHanded>{props.rowInfo.referrals}</TdRightHanded>\r\n        <TdRightHanded>{props.rowInfo.paidUsersCount}</TdRightHanded>\r\n        <TdRightHanded>${props.rowInfo.sumAmount}</TdRightHanded>\r\n        {/*<td>{Intl.NumberFormat('en-US', {*/}\r\n        {/*  style: 'currency',*/}\r\n        {/*  currency: 'USD',*/}\r\n        {/*  minimumFractionDigits: 0,*/}\r\n        {/*  maximumFractionDigits: 0,*/}\r\n        {/*}).format(props.rowInfo.totalInCents / 100 | 0)}</td>*/}\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(TableRow);\r\n","import styled from '@emotion/styled';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport TableRow from './TableRow';\r\n\r\nconst Bg = styled.table`\r\n  background: var(--F6F7F9-personal-area-affiliate-program-table);\r\n  border-radius: 3px;\r\n  padding: 15px;\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst ThRightHanded = styled.th`\r\n  color: var(--000000-personal-area-affiliate-program-table);\r\n  opacity: 0.8;\r\n  text-align: right;\r\n`;\r\n\r\nconst ThLeftHanded = styled.th`\r\n  color: var(--000000-personal-area-affiliate-program-table);\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst THead = styled.thead`\r\n  border-bottom: 1px solid var(--E6EAF1-personal-area-affiliate-program-table);\r\n`;\r\n\r\ninterface ITable {\r\n  links: any[];\r\n}\r\n\r\nconst Table: FC<ITable> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Bg cellPadding={16}>\r\n        <THead>\r\n          <ThLeftHanded>#</ThLeftHanded>\r\n          <ThLeftHanded>{translation('personalArea.affiliateProgram.link')}</ThLeftHanded>\r\n          {/*<Th>Note</Th>*/}\r\n          <ThRightHanded>{translation('personalArea.affiliateProgram.clicks')}</ThRightHanded>\r\n          <ThRightHanded>{translation('personalArea.affiliateProgram.referrals')}</ThRightHanded>\r\n          {/*<Th>Total</Th>*/}\r\n          <ThRightHanded>{translation('personalArea.affiliateProgram.paidUsersCount')}</ThRightHanded>\r\n          <ThRightHanded>{translation('personalArea.affiliateProgram.sumAmount')}</ThRightHanded>\r\n        </THead>\r\n        <tbody>\r\n          {props.links.map(((link, index) => <TableRow key={link.id} index={index} rowInfo={link} onNoteChange={() => null}/>))}\r\n        </tbody>\r\n      </Bg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Table);\r\n","import styled from '@emotion/styled';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport IconRightArrowWithdrawal from '../../../../../ui/icons/IconRightArrowWithdrawal';\r\nimport { createLink, getLinks } from '../../api';\r\nimport BalanceCard from './BalanceCard';\r\nimport CreateForm from './CreateForm';\r\nimport Table from './Table';\r\nimport { AffiliateComponent } from '../../index';\r\n\r\nconst PageTitle = styled('h1')`\r\n  margin: 0 !important;\r\n  color: var(--000000-personal-area-affiliate-program);\r\n  font-family: Roboto;\r\n  font-size: 20px;\r\n  line-height: 23px;\r\n`;\r\n\r\nconst Col = styled('div')`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  margin-top: 20px;\r\n  display: flex;\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid var(--F0F0F0-personal-area-affiliate-program);\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst WithdrawalBtn = styled.button`\r\n  background-color: var(--13AB79-personal-area-affiliate-program);\r\n  margin-left: 16px;\r\n  user-select: none;\r\n  border-radius: 3px;\r\n  color: var(--FFFFFF-personal-area-affiliate-program);\r\n  padding: 15px 20px;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst WithdrawHistoryBtnContainer = styled.div`\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst GoToWithdrawHistoryBtn = styled.button`\r\n  cursor: pointer;\r\n  user-select: none;\r\n  background: var(--F6F7F9-personal-area-affiliate-program);\r\n  border-radius: 3px;\r\n  padding: 15px;\r\n  color: var(--333333-personal-area-affiliate-program);\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nconst IntercomOpener = styled.span`\r\n  cursor: pointer;\r\n  color: var(--00A987-personal-area-affiliate-program);\r\n`;\r\n\r\nconst IconContainer = styled.span`\r\n  margin-left: 8px;\r\n`;\r\n\r\ninterface IAffiliateProgramOverview {\r\n  changeComponent: (component: AffiliateComponent) => any;\r\n  totalWithdrawnBalance: number;\r\n  totalEarnedBalance: number;\r\n  availableBalance: number;\r\n}\r\nexport const AffiliateProgramOverview: FC<IAffiliateProgramOverview> = (props) => {\r\n  const [links, changeLinks] = useState<any[]>([]);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    requestLinks();\r\n  }, []);\r\n\r\n  const requestLinks = async () => {\r\n    const linksList = await getLinks();\r\n    const formattedLinksArray = linksList.map((link: any) => ({\r\n      prefix: link.uri.split('-')[0],\r\n      referrals: link.referralsCount || 0,\r\n      total: link.total || 0,\r\n      clicks: link.clicks || 0,\r\n      id: link.id,\r\n      uri: link.uri,\r\n      paidUsersCount: link.paidUsersCount || 0,\r\n      sumAmount: link.sumAmount || 0,\r\n    }));\r\n\r\n    changeLinks(formattedLinksArray);\r\n  };\r\n\r\n  const onCreateLink = async (prefix: string) => {\r\n    try {\r\n      const link = await createLink(prefix);\r\n      changeLinks([\r\n        {\r\n          prefix: link.uri.split('-')[0],\r\n          referrals: 0,\r\n          total: 0,\r\n          clicks: 0,\r\n          id: link.id,\r\n          uri: link.uri,\r\n          paidUsersCount: 0,\r\n          sumAmount: 0,\r\n        },\r\n        ...links,\r\n      ]);\r\n    } finally {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Col>\r\n        <Row>\r\n          <div>\r\n            <p style={{ maxWidth: 550 }}>{translation('personalArea.affiliateProgram.subtitle')}</p>\r\n            <p>{translation('personalArea.affiliateProgram.subtitleSupport')}<IntercomOpener className='open_intercom'>{translation('base.here')}</IntercomOpener>.</p>\r\n          </div>\r\n        </Row>\r\n\r\n        <Row>\r\n          <BalanceCard\r\n            title={translation('personalArea.affiliateProgram.cardTitleTotalWithdrawn')}\r\n            priceInCents={props.totalWithdrawnBalance}\r\n            width={182}\r\n          />\r\n          <BalanceCard\r\n            title={translation('personalArea.affiliateProgram.cardTitleTotalEarned')}\r\n            priceInCents={props.totalEarnedBalance}\r\n          />\r\n          <BalanceCard\r\n            title={translation('personalArea.affiliateProgram.cardTitleAvailableForWithdrawing')}\r\n            priceInCents={props.availableBalance}\r\n            width={229}\r\n          />\r\n          <BalanceCard\r\n            title={translation('personalArea.affiliateProgram.cardTitleYourAffiliate')}\r\n            priceInCents={10}\r\n            type='percent'\r\n            width={199}\r\n          />\r\n        </Row>\r\n\r\n        <Row>\r\n          <CreateForm onCreate={onCreateLink} />\r\n        </Row>\r\n\r\n        <Table links={links} />\r\n\r\n        <WithdrawHistoryBtnContainer>\r\n          <GoToWithdrawHistoryBtn onClick={() => props.changeComponent('payment-history')}>\r\n            <span>\r\n              {translation('personalArea.affiliateProgram.paymentHistorySubmitBtnText')}\r\n              <IconContainer>\r\n                <IconRightArrowWithdrawal />\r\n              </IconContainer>\r\n            </span>\r\n          </GoToWithdrawHistoryBtn>\r\n\r\n          <WithdrawalBtn onClick={() => props.changeComponent('withdrawal')}>\r\n            {translation('personalArea.affiliateProgram.withdrawalSubmitBtnText')}\r\n          </WithdrawalBtn>\r\n        </WithdrawHistoryBtnContainer>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <svg width=\"10\" height=\"16\" viewBox=\"0 0 10 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M9 1L2 8L9 15\" stroke=\"var(--333333)\" strokeWidth=\"2\"/>\r\n  </svg>\r\n);\r\n","export enum E_WITHDRAWAL_METHODS {\r\n  'paypal' = 'paypal',\r\n  'bank' = 'bank',\r\n  'card-number' = 'card-number',\r\n  'usdt' = 'usdt',\r\n}\r\n\r\nexport const WITHDRAWAL_METHODS = Object.values(E_WITHDRAWAL_METHODS);\r\nexport type T_WITHDRAWAL_METHODS = (typeof WITHDRAWAL_METHODS)[number];\r\n\r\nexport interface IWithdrawalMethod {\r\n  type: T_WITHDRAWAL_METHODS;\r\n  currency?: 'EUR'|'USD';\r\n  bankName?: string;\r\n  bankUsername?: string;\r\n  bankAccountNumber?: string;\r\n  bankRoutingNumber?: string;\r\n  bankAccountType?: string;\r\n\r\n  paypalEmail?: string;\r\n  usdtWalletAddress?: string;\r\n\r\n  cardNumber?: string;\r\n  phoneNumber?: string;\r\n  cardHolderName?: string;\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Input, Select } from 'antd';\r\nimport React, { FC, memo, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { E_WITHDRAWAL_METHODS, IWithdrawalMethod } from '../../interfaces/components/withdrawal-method.interface';\r\n\r\nconst Subtitle = styled.span`\r\n  margin-top: 16px;\r\n  color: var(--333333-personal-area-affiliate-program-withdrawal-form);\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-bottom: 9px;\r\n`;\r\n\r\ntype TAccountType = 'c'|'s';\r\ninterface IBankForm {\r\n  onValidated: (isValid: boolean, method: IWithdrawalMethod) => any;\r\n}\r\n\r\nconst BankForm: FC<IBankForm> = (props) => {\r\n  const [bankName, setBankName] = useState<string>('');\r\n  const [accountHolderName, setAccountHolderName] = useState<string>('');\r\n  const [accountNumber, setAccountNumber] = useState<string>('');\r\n  const [routingNumber, setRoutingNumber] = useState<string>('');\r\n  const [accountType, setAccountType] = useState<TAccountType>('c');\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const validateForm = () => {\r\n    const bName = bankName.replace(/[^a-z]ig/, '');\r\n    const aHolderName = accountHolderName.replace(/[^a-z]ig/, '');\r\n\r\n    const isFormValid = !!bName && !!aHolderName && !!(+accountNumber) && !!(+routingNumber);\r\n    props.onValidated(isFormValid, {\r\n      type: E_WITHDRAWAL_METHODS.bank,\r\n      bankName,\r\n      bankAccountType: accountType,\r\n      bankRoutingNumber: routingNumber,\r\n      bankAccountNumber: accountNumber,\r\n      bankUsername: accountHolderName,\r\n      currency: 'USD',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    validateForm();\r\n  }, [bankName, accountNumber, accountHolderName, routingNumber, accountType]);\r\n\r\n  const onChangeBankName = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    setBankName(value);\r\n    validateForm();\r\n  };\r\n\r\n  const onChangeAccountHolderName = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    setAccountHolderName(value);\r\n    validateForm();\r\n  };\r\n\r\n  const onChangeAccountNumber = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    setAccountNumber(value);\r\n    validateForm();\r\n  };\r\n\r\n  const onChangeRoutingNumber = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    setRoutingNumber(value);\r\n    validateForm();\r\n  };\r\n\r\n  const onChangeAccountType = (v: TAccountType) => {\r\n    setAccountType(v);\r\n    validateForm();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Subtitle>{translation('personalArea.affiliateProgram.withdraw.bankName')}</Subtitle>\r\n      <Input\r\n        type='text'\r\n        value={bankName}\r\n        placeholder='Bank Of America'\r\n        onChange={onChangeBankName}\r\n      />\r\n\r\n      <Subtitle>{translation('personalArea.affiliateProgram.withdraw.accountHolderName')}</Subtitle>\r\n      <Input\r\n        type='text'\r\n        value={accountHolderName}\r\n        placeholder='John Smith'\r\n        onChange={onChangeAccountHolderName}\r\n      />\r\n\r\n      <Subtitle>{translation('personalArea.affiliateProgram.withdraw.accountNumber')}</Subtitle>\r\n      <Input\r\n        type='text'\r\n        value={accountNumber}\r\n        placeholder='8276019671'\r\n        onChange={onChangeAccountNumber}\r\n      />\r\n\r\n      <Subtitle>{translation('personalArea.affiliateProgram.withdraw.routingNumber')}</Subtitle>\r\n      <Input\r\n        type='text'\r\n        value={routingNumber}\r\n        placeholder='122105155'\r\n        onChange={onChangeRoutingNumber}\r\n      />\r\n\r\n      <Subtitle>{translation('personalArea.affiliateProgram.withdraw.accountType')}</Subtitle>\r\n      <Select value={accountType} onChange={onChangeAccountType}>\r\n        <Select.Option value='c'>{translation('personalArea.affiliateProgram.withdraw.accountTypeChecking')}</Select.Option>\r\n        <Select.Option value='s'>{translation('personalArea.affiliateProgram.withdraw.accountTypeSaving')}</Select.Option>\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(BankForm);\r\n","import styled from '@emotion/styled';\r\nimport { Input } from 'antd';\r\nimport React, { FC, memo, useEffect, useState } from 'react';\r\n\r\nimport { E_WITHDRAWAL_METHODS, IWithdrawalMethod } from '../../interfaces/components/withdrawal-method.interface';\r\n\r\nconst Subtitle = styled.span`\r\n  margin-top: 16px;\r\n  color: var(--333333-personal-area-affiliate-program-withdrawal-form);\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-bottom: 9px;\r\n`;\r\n\r\ninterface IPayPalForm {\r\n  onValidated: (isValid: boolean, method: IWithdrawalMethod) => any;\r\n}\r\nconst CardNumberForm: FC<IPayPalForm> = (props) => {\r\n  const [cardNumber, changeCardNumber] = useState<string>('');\r\n  const [cardHolderName, changeCardHolderName] = useState<string>('');\r\n  const [phoneNumber, changePhoneNumber] = useState<string>('');\r\n\r\n  const validateForm = () => {\r\n    const isFormValid = !!cardNumber;\r\n\r\n    props.onValidated(isFormValid, {\r\n      type: E_WITHDRAWAL_METHODS['card-number'],\r\n      cardNumber,\r\n      cardHolderName,\r\n      phoneNumber,\r\n      currency: 'USD',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    validateForm();\r\n  }, [cardNumber, cardHolderName, phoneNumber]);\r\n\r\n  const onCardNumberChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    changeCardNumber(value);\r\n    validateForm();\r\n  }\r\n\r\n  const onCardHolderChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    changeCardHolderName(value);\r\n    validateForm();\r\n  }\r\n\r\n  const onPhoneNumberChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    changePhoneNumber(value);\r\n    validateForm();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Subtitle>Card holder name</Subtitle>\r\n      <Input value={cardHolderName} placeholder='John Smith' onChange={onCardHolderChange} />\r\n\r\n      <Subtitle>Phone number</Subtitle>\r\n      <Input value={phoneNumber} prefix='+' placeholder='1 (123) 456 78 90' onChange={onPhoneNumberChange} />\r\n\r\n      <Subtitle>Card number</Subtitle>\r\n      <Input value={cardNumber} placeholder='4242 4242 4242 4242' onChange={onCardNumberChange} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(CardNumberForm);\r\n","import styled from '@emotion/styled';\r\nimport { Input } from 'antd';\r\nimport React, { FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { E_WITHDRAWAL_METHODS, IWithdrawalMethod } from '../../interfaces/components/withdrawal-method.interface';\r\n\r\nconst Subtitle = styled.span`\r\n  margin-top: 16px;\r\n  color: var(--333333-personal-area-affiliate-program-withdrawal-form);\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-bottom: 9px;\r\n`;\r\n\r\ninterface IPayPalForm {\r\n  onValidated: (isValid: boolean, method: IWithdrawalMethod) => any;\r\n}\r\n\r\nconst PayPalForm: FC<IPayPalForm> = (props) => {\r\n  const [email, setEmail] = useState<string>('');\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onEmailChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    const EMAIL_REGEX =\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    const isEmailValid = EMAIL_REGEX.test(value);\r\n    setEmail(value);\r\n    props.onValidated(isEmailValid, {\r\n      type: E_WITHDRAWAL_METHODS.paypal,\r\n      currency: 'USD',\r\n      paypalEmail: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Subtitle>{translation('base.yourEmail')}</Subtitle>\r\n      <Input type='email' value={email} placeholder={translation('base.yourEmail')} onChange={onEmailChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(PayPalForm);\r\n","import styled from '@emotion/styled';\r\nimport { Input } from 'antd';\r\nimport React, { ChangeEvent, FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { E_WITHDRAWAL_METHODS, IWithdrawalMethod } from '../../interfaces/components/withdrawal-method.interface';\r\n\r\nconst Subtitle = styled.span`\r\n  margin-top: 16px;\r\n  color: var(--333333-personal-area-affiliate-program-withdrawal-form);\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-bottom: 9px;\r\n`;\r\n\r\ninterface IUSDTForm {\r\n  onValidated: (isValid: boolean, method: IWithdrawalMethod) => any;\r\n}\r\n\r\nconst USDTForm: FC<IUSDTForm> = (props) => {\r\n  const [address, setAddress] = useState<string>('');\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onAddressChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    const { value } = event.target;\r\n\r\n    const ADDRESS_REGEX = /^0x[0-9A-Fa-f]{40}$/;\r\n    const isAddressValid = ADDRESS_REGEX.test(value);\r\n\r\n    setAddress(value);\r\n    props.onValidated(isAddressValid, {\r\n      type: E_WITHDRAWAL_METHODS.usdt,\r\n      currency: 'USD',\r\n      usdtWalletAddress: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Subtitle>\r\n        {translation('personalArea.affiliateProgram.withdraw.usdtWalletAddress')}\r\n      </Subtitle>\r\n      <Input type='text'\r\n        value={address}\r\n        placeholder={translation('personalArea.affiliateProgram.withdraw.usdtAddressPlaceholder') || ''}\r\n        onChange={onAddressChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(USDTForm);\r\n","import styled from '@emotion/styled';\r\nimport { Button, Checkbox, Input, Select } from 'antd';\r\nimport React, { FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport BankForm from './BankForm';\r\nimport CardNumberForm from './CardNumberForm';\r\nimport PayPalForm from './PayPalForm';\r\nimport USDTForm from './USDTForm';\r\nimport { ICreateWithdrawal } from '../../interfaces';\r\nimport { E_WITHDRAWAL_METHODS, IWithdrawalMethod, T_WITHDRAWAL_METHODS } from '../../interfaces/components/withdrawal-method.interface';\r\n\r\nconst Bg = styled.div`\r\n  width: 100%;\r\n  background: var(--F6F7F9-personal-area-affiliate-program-withdrawal-form);\r\n  border-radius: 3px;\r\n  padding: 12px 15px;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  width: 279px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Subtitle = styled.span`\r\n  color: var(--333333-personal-area-affiliate-program-withdrawal-form);\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  margin-bottom: 9px;\r\n`;\r\n\r\nconst AmountSubtitle = styled(Subtitle)`\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst ChBoxContainer = styled.div`\r\n  margin-top: 9px;\r\n  color: var(--737373-personal-area-affiliate-program-withdrawal-form);\r\n  font-size: 14px;\r\n  line-height: 17px;\r\n`;\r\n\r\nconst WithdrawBtnContainer = styled.div`\r\n  margin-top: 24px;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  color: var(--4B4B4B-personal-area-affiliate-program-withdrawal-form);\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst WillBeAbleTxt = styled.span`\r\n  margin-left: 17px;\r\n`;\r\n\r\nconst MINIMAL_WITHDRAWAL_AMOUNT = {\r\n  [E_WITHDRAWAL_METHODS.paypal]: 1,\r\n  [E_WITHDRAWAL_METHODS.bank]: 1,\r\n  [E_WITHDRAWAL_METHODS['card-number']]: 1,\r\n  [E_WITHDRAWAL_METHODS.usdt]: 1,\r\n};\r\n\r\ntype TSelectedForm = T_WITHDRAWAL_METHODS;\r\ninterface IForm {\r\n  maxWithdrawSumInCents: number;\r\n  onWithdrawClicked: (withdrawal: ICreateWithdrawal) => any;\r\n}\r\n\r\nconst Form: FC<IForm> = (props) => {\r\n  const [selectedForm, changeSelectedForm] = useState<TSelectedForm>(E_WITHDRAWAL_METHODS.paypal);\r\n  const [withdrawMethodNeedSave, changeWithdrawMethodNeedSave] = useState<boolean>(true);\r\n  const [withdrawSum, changeWithdrawSum] = useState<number>(MINIMAL_WITHDRAWAL_AMOUNT[selectedForm]);\r\n  const [isSelectedFormValid, changeSelectedFormValid] = useState<boolean>(false);\r\n  const [createWithdrawBtnLoading, changeCreateWithdrawBtnLoading] = useState<boolean>(false);\r\n  const [method, changeMethod] = useState<IWithdrawalMethod>();\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onAmountChange = (e: any) => {\r\n    const { value } = e.target;\r\n\r\n    if (/^[^0-9]$/.test(value)) {\r\n      return null;\r\n    }\r\n\r\n    const amount: number = +value;\r\n\r\n    if (isNaN(amount)) {\r\n      return null;\r\n    }\r\n\r\n    if (amount > (props.maxWithdrawSumInCents / 100 | 0)) {\r\n      changeWithdrawSum(props.maxWithdrawSumInCents / 100 | 0);\r\n\r\n      return null;\r\n    }\r\n\r\n    if (amount < MINIMAL_WITHDRAWAL_AMOUNT[selectedForm]) {\r\n      changeWithdrawSum(MINIMAL_WITHDRAWAL_AMOUNT[selectedForm]);\r\n\r\n      return null;\r\n    }\r\n\r\n    changeWithdrawSum(amount);\r\n  };\r\n\r\n  const selectForm = (v: TSelectedForm) => {\r\n    changeWithdrawSum(MINIMAL_WITHDRAWAL_AMOUNT[v]);\r\n    changeSelectedForm(v);\r\n  };\r\n\r\n  const onFormValidate = (isValid: boolean, method: IWithdrawalMethod) => {\r\n    changeSelectedFormValid(isValid);\r\n    changeMethod(method);\r\n  };\r\n\r\n  const createWithdraw = () => {\r\n    try {\r\n      changeCreateWithdrawBtnLoading(true);\r\n      if (method) {\r\n        props.onWithdrawClicked({\r\n          amount: withdrawSum * 100,\r\n          method,\r\n        });\r\n      }\r\n    } catch {\r\n      changeCreateWithdrawBtnLoading(false);\r\n    } finally {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Bg>\r\n      <FormContainer>\r\n        <Subtitle>{translation('personalArea.affiliateProgram.withdraw.to')}</Subtitle>\r\n        <Select value={selectedForm} onChange={selectForm}>\r\n          <Select.Option value={E_WITHDRAWAL_METHODS.paypal}>\r\n            PayPal\r\n          </Select.Option>\r\n          <Select.Option value={E_WITHDRAWAL_METHODS.bank}>\r\n            {translation('personalArea.affiliateProgram.withdraw.wire')}\r\n          </Select.Option>\r\n          <Select.Option value={E_WITHDRAWAL_METHODS['card-number']}>\r\n            {translation('personalArea.affiliateProgram.withdraw.cardNumber')}\r\n          </Select.Option>\r\n          <Select.Option value={E_WITHDRAWAL_METHODS.usdt}>\r\n            USDT BEP-20\r\n          </Select.Option>\r\n        </Select>\r\n\r\n        {selectedForm === E_WITHDRAWAL_METHODS.paypal ? <PayPalForm onValidated={onFormValidate} /> : null}\r\n        {selectedForm === E_WITHDRAWAL_METHODS.bank ? <BankForm onValidated={onFormValidate} /> : null}\r\n        {selectedForm === E_WITHDRAWAL_METHODS['card-number'] ? <CardNumberForm onValidated={onFormValidate} /> : null}\r\n        {selectedForm === E_WITHDRAWAL_METHODS.usdt ? <USDTForm onValidated={onFormValidate} /> : null}\r\n\r\n        <AmountSubtitle>{translation('personalArea.affiliateProgram.withdraw.amount')}</AmountSubtitle>\r\n        <Input\r\n          suffix={`${translation('personalArea.affiliateProgram.withdraw.available')} ${props.maxWithdrawSumInCents ? '$' + (props.maxWithdrawSumInCents / 100 | 0)  : 0}`}\r\n          prefix='$'\r\n          disabled={(props.maxWithdrawSumInCents / 100 | 0) < MINIMAL_WITHDRAWAL_AMOUNT[selectedForm]}\r\n          value={withdrawSum}\r\n          onChange={onAmountChange}\r\n        />\r\n\r\n        <ChBoxContainer>\r\n          <Checkbox\r\n            checked={withdrawMethodNeedSave}\r\n            onChange={(e => changeWithdrawMethodNeedSave(e.target.checked))}\r\n          >\r\n            {translation('personalArea.affiliateProgram.withdraw.saveBtn')}\r\n          </Checkbox>\r\n        </ChBoxContainer>\r\n\r\n        <WithdrawBtnContainer>\r\n          <Button\r\n            disabled={\r\n              // форма не введена полностью\r\n              !isSelectedFormValid\r\n              // сумма вывода меньше минимальной для формы\r\n              || withdrawSum < MINIMAL_WITHDRAWAL_AMOUNT[selectedForm]\r\n              // сумма превышает максимальный баланс\r\n              || withdrawSum > (props.maxWithdrawSumInCents / 100 | 0)\r\n            }\r\n            loading={createWithdrawBtnLoading}\r\n            onClick={createWithdraw}\r\n          >\r\n            {translation('personalArea.affiliateProgram.withdraw.withdrawal')}\r\n          </Button>\r\n          <WillBeAbleTxt>{translation('personalArea.affiliateProgram.withdraw.availableIn')}</WillBeAbleTxt>\r\n        </WithdrawBtnContainer>\r\n      </FormContainer>\r\n    </Bg>\r\n  );\r\n};\r\n\r\nexport default memo(Form);\r\n","import styled from '@emotion/styled';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport IconArrowLeftPayment from '../../../../ui/icons/IconArrowLeftPayment';\r\nimport { createWithdrawal } from '../api';\r\nimport { AffiliateComponent } from '../index';\r\nimport { ICreateWithdrawal } from '../interfaces';\r\nimport Form from './components/Form';\r\n\r\nconst PageTitle = styled('span')`\r\n  margin-left: 16px;\r\n  color: var(--000000-personal-area-affiliate-program-withdrawal-form);\r\n  font-family: Roboto;\r\n  font-size: 20px;\r\n  line-height: 23px;\r\n`;\r\n\r\nconst Col = styled('div')`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  display: flex;\r\n  cursor: pointer;\r\n  align-items: center;\r\n  margin-bottom: 31px;\r\n`;\r\n\r\ninterface IWithdrawalForm {\r\n  changeComponent: (component: AffiliateComponent) => any;\r\n  availableBalance: number;\r\n}\r\n\r\nconst WithdrawalForm: FC<IWithdrawalForm> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  const createWithdrawalRequest = async (withdrawal: ICreateWithdrawal) => {\r\n    try {\r\n      await createWithdrawal(withdrawal);\r\n      props.changeComponent('payment-history');\r\n    } finally {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Col>\r\n        <Row onClick={() => props.changeComponent('overview')}>\r\n          <IconArrowLeftPayment />\r\n          <PageTitle>{translation('personalArea.affiliateProgram.withdraw.funds')}</PageTitle>\r\n        </Row>\r\n        <Form\r\n          maxWithdrawSumInCents={props.availableBalance}\r\n          onWithdrawClicked={createWithdrawalRequest}\r\n        />\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(WithdrawalForm);\r\n","import styled from '@emotion/styled';\r\nimport { Badge, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst IdTd = styled.td`\r\n  max-width: 100px;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n`;\r\n\r\ninterface ITableRow {\r\n  rowInfo: any;\r\n  index: number;\r\n  onNoteChange?: (index: number, note: string) => any;\r\n}\r\n\r\nconst TableRow: FC<ITableRow> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  type AffiliateStatus = 'processing'|'completed'|'rejected';\r\n\r\n  const renderStatuses: Record<AffiliateStatus, JSX.Element> = {\r\n    processing: (\r\n      <Badge status='processing' text='In Process' />\r\n    ),\r\n    completed: (\r\n      <Badge status='success' text={translation('base.paid')} />\r\n    ),\r\n    rejected: (\r\n      <Badge status='error' text='Canceled' />\r\n    ),\r\n  };\r\n\r\n  const renderStatus = (status: AffiliateStatus): JSX.Element => renderStatuses[status];\r\n\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td>\r\n          {props.index + 1}\r\n        </td>\r\n        <td>\r\n          {props.rowInfo.createdAt ? moment(props.rowInfo.createdAt).format('DD.MM.YY') : '-'}\r\n        </td>\r\n        <IdTd>\r\n          <Tooltip title={props.rowInfo.id || '-'}>\r\n            {props.rowInfo.id || '-'}\r\n          </Tooltip>\r\n        </IdTd>\r\n        <td>\r\n          {props.rowInfo.type}\r\n        </td>\r\n        <td>\r\n          {renderStatus(props.rowInfo.status)}\r\n        </td>\r\n        <td>\r\n          {Intl.NumberFormat('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0,\r\n          }).format(Math.abs(props.rowInfo.amount) / 100 | 0)}\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(TableRow);\r\n","import styled from '@emotion/styled';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport TableRow from './TableRow';\r\n\r\nconst Bg = styled.table`\r\n  background: var(--F6F7F9-personal-area-affiliate-program-withdrawal-history);\r\n  border-radius: 3px;\r\n  padding: 15px;\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  color: var(--000000-personal-area-affiliate-program-withdrawal-history);\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst THead = styled.thead`\r\n  border-bottom: 1px solid var(--E6EAF1-personal-area-affiliate-program-withdrawal-history);\r\n`;\r\n\r\ninterface ITable {\r\n  payments: any[];\r\n}\r\n\r\nconst Table: FC<ITable> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Bg cellPadding={16}>\r\n        <THead>\r\n          <Th>#</Th>\r\n          <Th>{translation('personalArea.affiliateProgram.date')}</Th>\r\n          <Th>ID</Th>\r\n          <Th>{translation('personalArea.affiliateProgram.type')}</Th>\r\n          <Th>{translation('personalArea.affiliateProgram.status')}</Th>\r\n          <Th>{translation('personalArea.affiliateProgram.total')}</Th>\r\n        </THead>\r\n        <tbody>\r\n          {props.payments.map((\r\n            (payment, index) => <TableRow key={payment.id} index={index} rowInfo={payment} />\r\n          ))}\r\n        </tbody>\r\n      </Bg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Table);\r\n\r\n","import styled from '@emotion/styled';\r\nimport React, { FC, memo, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Table from './components/Table';\r\nimport IconArrowLeftPayment from '../../../../ui/icons/IconArrowLeftPayment';\r\nimport { getWithdrawals } from '../api';\r\nimport { AffiliateComponent } from '../index';\r\n\r\nconst PageTitle = styled('span')`\r\n\tmargin-left: 16px;\r\n\tcolor: var(--000000-personal-area-affiliate-program-withdrawal-history);\r\n\tfont-family: Roboto;\r\n\tfont-size: 20px;\r\n\tline-height: 23px;\r\n`;\r\n\r\nconst Col = styled('div')`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Row = styled('div')`\r\n  display: flex;\r\n  cursor: pointer;\r\n  align-items: center;\r\n  margin-bottom: 31px;\r\n`;\r\n\r\ninterface IWithdrawalHistory {\r\n  changeComponent: (component: AffiliateComponent) => any;\r\n}\r\nconst WithdrawalHistory: FC<IWithdrawalHistory> = (props) => {\r\n  const [withdrawals, changeWithdrawals] = useState<any[]>([]);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const requestPayments = async () => {\r\n    const withdrawalsList = await getWithdrawals();\r\n    changeWithdrawals(withdrawalsList);\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestPayments();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Col>\r\n        <Row onClick={() => props.changeComponent('overview')}>\r\n          <IconArrowLeftPayment />\r\n          <PageTitle>{translation('personalArea.billing.subTitlePaymentHistory')}</PageTitle>\r\n        </Row>\r\n        <Table payments={withdrawals} />\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(WithdrawalHistory);\r\n","import React, { FC, memo, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { getBalances } from './api';\r\nimport { AffiliateProgramOverview } from './Overview/components';\r\nimport WithdrawalForm from './WithdrawalForm';\r\nimport WithdrawalHistory from './WithdrawalHistory';\r\nimport { TabWrapper } from '../menu/tab-wrapper';\r\nimport { PageTitle } from '../styles';\r\n\r\nexport type AffiliateComponent = 'overview'|'payment-history'|'withdrawal';\r\n\r\nconst EMPTY_BALANCE = 0;\r\n\r\nexport const AffiliateProgram: FC = () => {\r\n  const [componentToRender, setComponentToRender] = useState<AffiliateComponent>('overview');\r\n  const [totalWithdrawnBalance, setTotalWithdrawnBalance] = useState<number>(EMPTY_BALANCE);\r\n  const [totalEarnedBalance, setTotalEarnedBalance] = useState<number>(EMPTY_BALANCE);\r\n  const [availableBalance, setAvailableBalance] = useState<number>(EMPTY_BALANCE);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const updateComponent = (component: AffiliateComponent): void => {\r\n    setComponentToRender(component);\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestBalances();\r\n  }, [componentToRender]);\r\n\r\n  const requestBalances = async (): Promise<void> => {\r\n    const balances = await getBalances();\r\n    const {\r\n      totalWithdraw = EMPTY_BALANCE,\r\n      totalEarned = EMPTY_BALANCE,\r\n      available = EMPTY_BALANCE,\r\n    } = balances || {};\r\n\r\n    setTotalWithdrawnBalance(totalWithdraw);\r\n    setTotalEarnedBalance(totalEarned);\r\n    setAvailableBalance(available);\r\n  };\r\n\r\n  const renderContent = (): JSX.Element|null => {\r\n    if (componentToRender === 'overview') {\r\n      return (\r\n        <AffiliateProgramOverview\r\n          changeComponent={updateComponent}\r\n          totalEarnedBalance={totalEarnedBalance}\r\n          totalWithdrawnBalance={totalWithdrawnBalance}\r\n          availableBalance={availableBalance}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (componentToRender === 'payment-history') {\r\n      return <WithdrawalHistory changeComponent={updateComponent} />;\r\n    }\r\n\r\n    if (componentToRender === 'withdrawal') {\r\n      return (\r\n        <WithdrawalForm\r\n          changeComponent={updateComponent}\r\n          availableBalance={availableBalance}\r\n        />\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <TabWrapper tabKey='affiliate-program'>\r\n      <PageTitle>\r\n        {translation('personalArea.affiliateProgram.title')}\r\n      </PageTitle>\r\n      {renderContent()}\r\n    </TabWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(AffiliateProgram);\r\n"],"names":["getLinks","_ref","_asyncToGenerator","http","concat","API_BASE_URL","body","apply","arguments","createLink","_ref2","prefix","requestBody","JSON","stringify","method","_x","getWithdrawals","_ref3","getBalances","_ref4","createWithdrawal","_ref5","withdrawalData","_x2","React","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","Bg","styled","_templateObject","_taggedTemplateLiteral","props","PriceContainer","_templateObject2","Title","_templateObject3","Price","_templateObject4","BalanceCard","title","Intl","NumberFormat","style","type","currency","minimumFractionDigits","maximumFractionDigits","format","priceInCents","btn","memo","InputContainer","InputText","PrefixInput","Row","_templateObject5","_templateObject6","CreateBtn","_Button","_templateObject7","CreateForm","changePrefix","useState","createBtnLoading","changeCreateBtnLoading","t","translation","useTranslation","onCreateBtnClick","onCreate","placeholder","value","onChange","e","target","test","onClick","loading","IconContainer","TdRightHanded","TableRow","noteEditable","changeNoteEditable","note","changeNote","rowInfo","notes","link","uri","index","display","length","slice","CopyToClipboard","text","onCopy","_message","_Icon","clicks","referrals","paidUsersCount","sumAmount","ThRightHanded","ThLeftHanded","THead","Table","cellPadding","links","map","key","id","onNoteChange","Col","WithdrawalBtn","WithdrawHistoryBtnContainer","GoToWithdrawHistoryBtn","IntercomOpener","_templateObject8","AffiliateProgramOverview","changeLinks","useEffect","requestLinks","formattedLinksArray","split","referralsCount","total","onCreateLink","maxWidth","className","totalWithdrawnBalance","totalEarnedBalance","availableBalance","changeComponent","IconRightArrowWithdrawal","E_WITHDRAWAL_METHODS","Object","values","Subtitle","BankForm","bankName","setBankName","accountHolderName","setAccountHolderName","accountNumber","setAccountNumber","routingNumber","setRoutingNumber","accountType","setAccountType","validateForm","bName","replace","aHolderName","isFormValid","onValidated","bank","bankAccountType","bankRoutingNumber","bankAccountNumber","bankUsername","_Input","_Select","v","CardNumberForm","cardNumber","changeCardNumber","cardHolderName","changeCardHolderName","phoneNumber","changePhoneNumber","PayPalForm","email","setEmail","isEmailValid","paypal","paypalEmail","USDTForm","address","setAddress","event","isAddressValid","usdt","usdtWalletAddress","FormContainer","AmountSubtitle","ChBoxContainer","WithdrawBtnContainer","WillBeAbleTxt","MINIMAL_WITHDRAWAL_AMOUNT","Form","selectedForm","changeSelectedForm","withdrawMethodNeedSave","changeWithdrawMethodNeedSave","withdrawSum","changeWithdrawSum","isSelectedFormValid","changeSelectedFormValid","createWithdrawBtnLoading","changeCreateWithdrawBtnLoading","changeMethod","onFormValidate","isValid","suffix","maxWithdrawSumInCents","disabled","amount","isNaN","_Checkbox","checked","onWithdrawClicked","_unused","PageTitle","WithdrawalForm","createWithdrawalRequest","withdrawal","IconArrowLeftPayment","IdTd","status","renderStatuses","processing","_Badge","completed","rejected","createdAt","moment","_Tooltip","Math","abs","Th","payments","payment","WithdrawalHistory","withdrawals","changeWithdrawals","requestPayments","withdrawalsList","EMPTY_BALANCE","AffiliateProgram","componentToRender","setComponentToRender","setTotalWithdrawnBalance","setTotalEarnedBalance","setAvailableBalance","updateComponent","component","requestBalances","balances","totalWithdraw","totalEarned","available","TabWrapper","tabKey"],"sourceRoot":""}