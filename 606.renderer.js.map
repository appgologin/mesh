{"version":3,"file":"606.renderer.js","mappings":"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","sources":["webpack://GoLogin/./node_modules/@material-ui/core/esm/CircularProgress/CircularProgress.js","webpack://GoLogin/./src/app/features/authentification/ForgotPassword/components/EmailForm.tsx","webpack://GoLogin/./src/app/features/authentification/ForgotPassword/components/NewPasswordForm.tsx","webpack://GoLogin/./src/app/utils/numbers-validator.ts","webpack://GoLogin/./src/app/features/authentification/ForgotPassword/components/ResetCodeForm.tsx","webpack://GoLogin/./src/app/features/authentification/ForgotPassword/components/index.tsx","webpack://GoLogin/./src/app/features/authentification/ForgotPassword/api.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/AuthFormContainer.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/AuthTextField.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/Form.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/NavigationContainer.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/NavigationDividerContainer.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/NavigationLink.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/PageWrapper.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/SubmitButton.tsx","webpack://GoLogin/./src/app/features/authentification/StyledComponents/Subtitle.ts","webpack://GoLogin/./src/app/features/authentification/StyledComponents/Title.ts","webpack://GoLogin/./src/app/features/authentification/helpers/check-authentification.ts"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nvar SIZE = 44;\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-block'\n    },\n\n    /* Styles applied to the root element if `variant=\"static\"`. */\n    static: {\n      transition: theme.transitions.create('transform')\n    },\n\n    /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: {\n      animation: '$circular-rotate 1.4s linear infinite'\n    },\n\n    /* Styles applied to the root element if `variant=\"determinate\"`. */\n    determinate: {\n      transition: theme.transitions.create('transform')\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the `svg` element. */\n    svg: {\n      display: 'block' // Keeps the progress centered\n\n    },\n\n    /* Styles applied to the `circle` svg path. */\n    circle: {\n      stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.\n      // strokeLinecap: 'butt',\n\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"static\"`. */\n    circleStatic: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n    circleIndeterminate: {\n      animation: '$circular-dash 1.4s ease-in-out infinite',\n      // Some default value that looks fine waiting for the animation to kicks in.\n      strokeDasharray: '80px, 200px',\n      strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.\n\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"determinate\"`. */\n    circleDeterminate: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    },\n    '@keyframes circular-rotate': {\n      '0%': {\n        // Fix IE 11 wobbly\n        transformOrigin: '50% 50%'\n      },\n      '100%': {\n        transform: 'rotate(360deg)'\n      }\n    },\n    '@keyframes circular-dash': {\n      '0%': {\n        strokeDasharray: '1px, 200px',\n        strokeDashoffset: '0px'\n      },\n      '50%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-15px'\n      },\n      '100%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-125px'\n      }\n    },\n\n    /* Styles applied to the `circle` svg path if `disableShrink={true}`. */\n    circleDisableShrink: {\n      animation: 'none'\n    }\n  };\n};\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nvar CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$disableShrink = props.disableShrink,\n      disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 40 : _props$size,\n      style = props.style,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"]);\n\n  var circleStyle = {};\n  var rootStyle = {};\n  var rootProps = {};\n\n  if (variant === 'determinate' || variant === 'static') {\n    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = \"\".concat(((100 - value) / 100 * circumference).toFixed(3), \"px\");\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], {\n      'determinate': classes.determinate,\n      'indeterminate': classes.indeterminate,\n      'static': classes.static\n    }[variant]),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, style),\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other), /*#__PURE__*/React.createElement(\"svg\", {\n    className: classes.svg,\n    viewBox: \"\".concat(SIZE / 2, \" \").concat(SIZE / 2, \" \").concat(SIZE, \" \").concat(SIZE)\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {\n      'determinate': classes.circleDeterminate,\n      'indeterminate': classes.circleIndeterminate,\n      'static': classes.circleStatic\n    }[variant]),\n    style: circleStyle,\n    cx: SIZE,\n    cy: SIZE,\n    r: (SIZE - thickness) / 2,\n    fill: \"none\",\n    strokeWidth: thickness\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, function (props) {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('Material-UI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The size of the circle.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The thickness of the circle.\n   */\n  thickness: PropTypes.number,\n\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   */\n  variant: chainPropTypes(PropTypes.oneOf(['determinate', 'indeterminate', 'static']), function (props) {\n    var variant = props.variant;\n\n    if (variant === 'static') {\n      throw new Error('Material-UI: `variant=\"static\"` was deprecated. Use `variant=\"determinate\"` instead.');\n    }\n\n    return null;\n  })\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCircularProgress',\n  flip: false\n})(CircularProgress);","import React, { FC, memo, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { isEmailValid } from '../../../../utils/email-validator';\r\nimport { AuthTextField, Form, SubmitButton } from '../../StyledComponents';\r\n\r\ninterface IEmailForm {\r\n  onSubmit: (email: string) => any;\r\n  loading?: boolean;\r\n}\r\nconst EmailForm: FC<IEmailForm> = (props) => {\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const emailFieldRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n\r\n  const onEmailFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    const email = emailFieldRef.current.value;\r\n\r\n    // Validating email\r\n    const isEmailValidationSuccess = isEmailValid(email);\r\n    if (!isEmailValidationSuccess) {\r\n      emailFieldRef.current.focus();\r\n      setIsError(true);\r\n      return null;\r\n    }\r\n\r\n    props.onSubmit(email);\r\n  }\r\n\r\n  return (\r\n    <Form style={{ width: 370 }} onSubmit={onEmailFormSubmit}>\r\n      <AuthTextField\r\n        ref={emailFieldRef}\r\n        status={isError ? 'error' : 'default'}\r\n        placeholder={translation('auth.forgotPassword.email.emailInputPlaceholder')}\r\n        type='email'\r\n        required={true}\r\n        autoFocus={true}\r\n      />\r\n\r\n      <SubmitButton type='submit' loading={props.loading}>{translation('auth.forgotPassword.email.submitBtnTxt')}</SubmitButton>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default memo(EmailForm);\r\n","import React, { memo, FC, useState, useRef } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { AuthTextField, Form, SubmitButton } from '../../StyledComponents';\r\n\r\ninterface INewPasswordForm {\r\n  onSubmit: (password: string) => any;\r\n  loading?: boolean;\r\n}\r\nconst NewPasswordForm: FC<INewPasswordForm> = (props) => {\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const passwordFieldRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n  const confirmPasswordRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n\r\n  const onResetPasswordFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    const password = passwordFieldRef.current.value;\r\n    const confirmPassword = confirmPasswordRef.current.value;\r\n\r\n    // Validating passwords\r\n    if (password !== confirmPassword) {\r\n      setIsError(true);\r\n      return null;\r\n    }\r\n\r\n    props.onSubmit(password);\r\n  }\r\n\r\n  return (\r\n    <Form style={{ width: 370 }} onSubmit={onResetPasswordFormSubmit}>\r\n      <AuthTextField\r\n        ref={passwordFieldRef}\r\n        status={isError ? 'error' : 'default'}\r\n        placeholder={translation('auth.forgotPassword.password.passwordInputPlaceholder')}\r\n        type='password'\r\n        required={true}\r\n        autoFocus={true}\r\n      />\r\n      <AuthTextField\r\n        ref={confirmPasswordRef}\r\n        status={isError ? 'error' : 'default'}\r\n        placeholder={translation('auth.forgotPassword.password.confirmPasswordInputPlaceholder')}\r\n        type='password'\r\n        required={true}\r\n      />\r\n\r\n      <SubmitButton type='submit' loading={props.loading} width={110}>{translation('auth.forgotPassword.password.submitBtnTxt')}</SubmitButton>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default memo(NewPasswordForm);\r\n","export const isNumbersOnly = (str: string) => {\r\n  const EMAIL_REGEXP = /^\\d*$/;\r\n\r\n  return EMAIL_REGEXP.test(str);\r\n}\r\n","import React, { FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { isNumbersOnly } from '../../../../utils/numbers-validator';\r\nimport { AuthTextField, Form, SubmitButton } from '../../StyledComponents';\r\n\r\ninterface IResetCodeForm {\r\n  onSubmit: (code: string) => any;\r\n  loading?: boolean;\r\n}\r\nconst ResetCodeForm: FC<IResetCodeForm> = (props) => {\r\n  const [codeFieldValue, setCodeFieldValue] = useState<string>('');\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  // Контроллируемый инпут реализации ввода только чисел\r\n  const onCodeFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    const nextValue = e.target.value;\r\n\r\n    const isNextValueValid = isNumbersOnly(nextValue);\r\n    if (!isNextValueValid) {\r\n      return null;\r\n    }\r\n\r\n    setCodeFieldValue(nextValue);\r\n  }\r\n\r\n  const onResetFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit(codeFieldValue);\r\n  }\r\n\r\n  return (\r\n    <Form style={{ width: 370 }} onSubmit={onResetFormSubmit}>\r\n      <AuthTextField\r\n        autoFocus={true}\r\n        onChange={onCodeFieldChange}\r\n        placeholder={translation('auth.forgotPassword.reset.codeInputPlaceholder')}\r\n        required={true}\r\n        value={codeFieldValue}\r\n      />\r\n\r\n      <SubmitButton type='submit' loading={props.loading} width={115}>{translation('auth.forgotPassword.reset.submitBtnTxt')}</SubmitButton>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default memo(ResetCodeForm);\r\n","import { message } from 'antd';\r\nimport React, { memo, ReactComponentElement, useEffect, useState } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { history } from '../../../../services';\r\nimport { checkAuthentication } from '../../helpers';\r\nimport {\r\n  AuthContentContainer,\r\n  NavigationContainer,\r\n  NavigationDividerContainer,\r\n  NavigationLink,\r\n  PageWrapper,\r\n  Subtitle,\r\n  Title,\r\n} from '../../StyledComponents';\r\nimport { getResetPasswordId, resetPassword, sendResetCode } from '../api';\r\nimport EmailForm from './EmailForm';\r\nimport NewPasswordForm from './NewPasswordForm';\r\nimport ResetCodeForm from './ResetCodeForm';\r\n\r\nlet expirationTimer: NodeJS.Timeout;\r\nlet resetPasswordId = '';\r\n\r\ntype TForm = 'email'|'reset'|'password';\r\n\r\nconst ForgotPassword = (): ReactComponentElement<any> => {\r\n  const [formType, setFormType] = useState<TForm>('email');\r\n  const [emailFormLoading, setEmailFormLoading] = useState<boolean>(false);\r\n  const [resetFormLoading, setResetFormLoading] = useState<boolean>(false);\r\n  const [newPasswordFormLoading, setNewPasswordFormLoading] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    checkAuthentication();\r\n  }, []);\r\n\r\n  const onSessionExpired = (): void => {\r\n    message.info(translation('notifications.info.sessionExpired'));\r\n    setFormType('email');\r\n    resetPasswordId = '';\r\n  };\r\n\r\n  const startExpirationTimer = (): void => {\r\n    // Code alive 10 minutes but for most user experience we set 9 minutes\r\n    clearTimeout(expirationTimer);\r\n    expirationTimer = setTimeout(onSessionExpired, 9 * 60 * 1000);\r\n  };\r\n\r\n  const onEmailFormSubmit = async (email: string): Promise<void> => {\r\n    try {\r\n      setEmailFormLoading(true);\r\n\r\n      await sendResetCode(email);\r\n      message.success(translation('notifications.success.verificationCodeSend'));\r\n\r\n      // Return to main form on code expired\r\n      startExpirationTimer();\r\n\r\n      setFormType('reset');\r\n    } finally {\r\n      setEmailFormLoading(false);\r\n    }\r\n  };\r\n\r\n  const onResetCodeFormSubmit = async (code: string): Promise<void> => {\r\n    try {\r\n      setResetFormLoading(true);\r\n\r\n      const resetPasswordData = await getResetPasswordId(code);\r\n      resetPasswordId = resetPasswordData.body.resetId;\r\n\r\n      // Return to main form on code expired\r\n      startExpirationTimer();\r\n\r\n      setFormType('password');\r\n\r\n    } finally {\r\n      setResetFormLoading(false);\r\n    }\r\n  };\r\n\r\n  const onNewPasswordFormSubmit = async (password: string): Promise<void> => {\r\n    try {\r\n      setNewPasswordFormLoading(true);\r\n\r\n      await resetPassword({\r\n        resetId: resetPasswordId,\r\n        password,\r\n        passwordConfirm: password,\r\n      });\r\n      message.success(translation('notifications.success.passwordChanged'));\r\n\r\n      history.replace('/sign_in');\r\n    } finally {\r\n      setNewPasswordFormLoading(false);\r\n    }\r\n  };\r\n\r\n  const Forms = {\r\n    email: <EmailForm loading={emailFormLoading} onSubmit={onEmailFormSubmit} />,\r\n    password: <NewPasswordForm loading={newPasswordFormLoading} onSubmit={onNewPasswordFormSubmit} />,\r\n    reset: <ResetCodeForm loading={resetFormLoading} onSubmit={onResetCodeFormSubmit} />,\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <AuthContentContainer>\r\n\r\n        {/* Render title by form */}\r\n        <Title>\r\n          {translation(`auth.forgotPassword.${formType}.title`)}\r\n        </Title>\r\n\r\n        {/* Render subtitle by form */}\r\n        {translation(`auth.forgotPassword.${formType}.subtitle`) && (\r\n          <Subtitle style={{ width: 415 }}>\r\n            {translation(`auth.forgotPassword.${formType}.subtitle`)}\r\n          </Subtitle>\r\n        )}\r\n\r\n        {/* Render form */}\r\n        {Forms[formType]}\r\n\r\n        <NavigationContainer>\r\n          <NavigationLink to='/sign_in'>{translation('auth.links.logIn')}</NavigationLink>\r\n          <NavigationDividerContainer>•</NavigationDividerContainer>\r\n          <NavigationLink to='/sign_up'>{translation('auth.links.signIn')}</NavigationLink>\r\n        </NavigationContainer>\r\n      </AuthContentContainer>\r\n\r\n      <Helmet>\r\n        <title>{translation('auth.forgotPassword.title')} - GoLogin</title>\r\n      </Helmet>\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ForgotPassword);\r\n","import { API_BASE_URL } from '../../../../common/constants/constants';\r\nimport { http } from '../../../services';\r\n\r\nexport function sendResetCode(email: string) {\r\n  const requestBody = JSON.stringify({\r\n    email,\r\n  });\r\n\r\n  return http(`${API_BASE_URL}/user/reset`, {\r\n    method: 'POST',\r\n    body: requestBody,\r\n  });\r\n}\r\n\r\nexport function getResetPasswordId(code: string) {\r\n  return http(`${API_BASE_URL}/user/reset/${code}`);\r\n}\r\n\r\ninterface IResetPassword {\r\n  resetId: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n}\r\nexport function resetPassword(resetData: IResetPassword) {\r\n  const requestBody = JSON.stringify({\r\n    resetId: resetData.resetId,\r\n    password: resetData.password,\r\n    passwordConfirm: resetData.passwordConfirm,\r\n  });\r\n\r\n  return http(`${API_BASE_URL}/user/password`, {\r\n    method: 'PATCH',\r\n    body: requestBody,\r\n  });\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const AuthContentContainer = styled.div`\r\n  width: 404px;\r\n  color: var(--FFFFFF-auth-pages-form);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\ninterface IAuthTextField {\r\n  status?: 'error'|'default';\r\n}\r\n\r\nexport const AuthTextField = styled.input<IAuthTextField>`\r\n  height: 50px;\r\n  padding: 13px 14px;\r\n  border: 1px solid var(--E0E0E0-auth-pages-text);\r\n  border-radius: 4px;\r\n\r\n  font-family: Calibre, Roboto;\r\n  font-weight: 400;\r\n  line-height: 21px;\r\n  color: var(--808080-auth-pages-text);\r\n  outline: none;\r\n  background: var(--FCFCFC-auth-pages-text);\r\n\r\n  & + * {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  // Handling \"status\" props\r\n  ${(props) => {\r\n    if (props.status === 'error') {\r\n      return 'border: 2px solid var(--F5222D-auth-pages-text);';\r\n    }\r\n  }}\r\n  \r\n  mix-blend-mode: normal;\r\n  \r\n  &::placeholder {\r\n    color: var(--808080-auth-pages-text);\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  margin-top: 20px;\r\n  background: var(--00A987-auth-pages);\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const NavigationContainer = styled.span`\r\n  margin-top: 32px;\r\n  width: max-content;\r\n  text-align: center;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const NavigationDividerContainer = styled.span`\r\n  margin: 0 5px;\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NavigationLink = styled(Link)`;\r\n  color: var(--FFFFFF-auth-pages-navigation-link);\r\n  font: 300 18px/21.6px 'Graphik LC', Roboto;\r\n  transition: opacity linear .2s;\r\n  \r\n  :hover {\r\n    color: var(--FFFFFF-auth-pages-navigation-link);\r\n    opacity: .5;\r\n  }\r\n`;\r\n\r\nexport const NavigationSpan = styled('span')`;\r\n  color: var(--FFFFFF-auth-pages-navigation-link);\r\n  font: 300 18px/21.6px 'Graphik LC', Roboto;\r\n  transition: opacity linear .2s;\r\n  cursor: pointer;\r\n  \r\n  :hover {\r\n    color: var(--FFFFFF-auth-pages-navigation-link);\r\n    opacity: .5;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PageWrapper = styled.div`\r\n  background: var(--00A987-auth-pages);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  height: auto;\r\n  min-height: 100%;\r\n  flex: 1;\r\n  flex-direction: column;\r\n`;\r\n","import React, { FC, memo } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ninterface IStyledButton {\r\n  loading?: boolean;\r\n  width?: number;\r\n}\r\n\r\nexport const StyledButton = styled.button<IStyledButton>`\r\n  height: 56px;\r\n  padding: 17px 30px;\r\n  margin: 32px auto 0 auto;\r\n  border-radius: 60px;\r\n  border: none;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  font-family: 'Graphik LC', Roboto;\r\n  font-weight: 400;\r\n  font-size: 18px;\r\n  line-height: 21.6px;\r\n  color: var(--000000-auth-pages-button);\r\n\r\n  background: var(--FFE164-auth-pages-button);\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: all linear .3s;\r\n  \r\n  width: ${props => `${props.width}px` || 'auto'};\r\n\r\n  ${(props) => {\r\n    if (!props.loading) {\r\n      return `\r\n        :hover {\r\n          color: var(--FFE164-auth-pages-button);\r\n          background: var(--000000-auth-pages-button);\r\n        }\r\n      `;\r\n    }\r\n  }}\r\n`;\r\n\r\ninterface ISubmitButton extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  loading?: boolean;\r\n  width?: number;\r\n}\r\nconst SButton: FC<ISubmitButton> = (props) => {\r\n\r\n  if (props.loading) {\r\n    return (\r\n      <StyledButton {...props}>\r\n        <CircularProgress value={99} disableShrink={true} size={14} color='inherit' />\r\n      </StyledButton>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StyledButton {...props}>{props.children}</StyledButton>\r\n  );\r\n}\r\n\r\nexport const SubmitButton = memo(SButton);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Subtitle = styled.h2`\r\n  font: 300 18px/21.6px 'Graphik LC', Roboto;\r\n  text-align: center;\r\n  color: var(--FFFFFF-auth-pages-text);\r\n  margin-top: 19px;\r\n  margin-bottom: 0;\r\n  width: 336px;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h1`\r\n  margin: 0;\r\n\r\n  font-family: 'Graphik LC', Roboto;\r\n  font-size: 38px;\r\n  font-weight: 700;\r\n  line-height: 45.6px;\r\n  text-align: center;\r\n  color: var(--FFFFFF-auth-pages-text);\r\n`;\r\n","import { history } from '../../../services';\r\nimport { retrieveToken } from '../../../services/http/storage';\r\n\r\nexport const checkAuthentication = async (): Promise<void> => {\r\n  const token = await retrieveToken();\r\n\r\n  if (token) {\r\n    history.replace('/profileList');\r\n  }\r\n};\r\n"],"names":["SIZE","CircularProgress","props","ref","classes","className","_props$color","color","_props$disableShrink","disableShrink","_props$size","size","style","_props$thickness","thickness","_props$value","value","_props$variant","variant","other","circleStyle","rootStyle","rootProps","circumference","Math","PI","strokeDasharray","toFixed","round","strokeDashoffset","concat","transform","root","determinate","indeterminate","static","width","height","role","svg","viewBox","circle","circleDisableShrink","circleDeterminate","circleIndeterminate","circleStatic","cx","cy","r","fill","strokeWidth","theme","display","transition","transitions","create","animation","colorPrimary","palette","primary","main","colorSecondary","secondary","stroke","transformOrigin","name","flip","EmailForm","isError","setIsError","useState","t","translation","useTranslation","emailFieldRef","useRef","React","Form","onSubmit","e","preventDefault","email","current","isEmailValid","focus","AuthTextField","status","placeholder","type","required","autoFocus","SubmitButton","loading","memo","NewPasswordForm","passwordFieldRef","confirmPasswordRef","password","ResetCodeForm","codeFieldValue","setCodeFieldValue","onChange","nextValue","target","test","expirationTimer","resetPasswordId","ForgotPassword","formType","setFormType","emailFormLoading","setEmailFormLoading","resetFormLoading","setResetFormLoading","newPasswordFormLoading","setNewPasswordFormLoading","useEffect","checkAuthentication","onSessionExpired","_message","startExpirationTimer","clearTimeout","setTimeout","onEmailFormSubmit","_ref","_asyncToGenerator","requestBody","JSON","stringify","http","API_BASE_URL","method","body","sendResetCode","_x","apply","arguments","onResetCodeFormSubmit","_ref2","code","resetPasswordData","getResetPasswordId","resetId","_x2","onNewPasswordFormSubmit","_ref3","resetData","passwordConfirm","history","_x3","Forms","reset","PageWrapper","AuthContentContainer","Title","Subtitle","NavigationContainer","NavigationLink","to","NavigationDividerContainer","Helmet","styled","_templateObject","_taggedTemplateLiteral","Link","NavigationSpan","_templateObject2","StyledButton","SButton","children","retrieveToken"],"sourceRoot":""}