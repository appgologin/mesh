{"version":3,"file":"197.renderer.js","mappings":"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","sources":["webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-installer/api.ts","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-installer/components/qr-code.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-installer/index.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-installer/TwoFaOn.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-uninstaller/api.ts","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-uninstaller/index.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-uninstaller/afterUninstallConfirmation.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/2fa-uninstaller/beforeUninstalConfirmation.tsx","webpack://GoLogin/./src/app/features/modalsComponents/components/passwordChecker/api.ts","webpack://GoLogin/./src/app/features/modalsComponents/components/passwordChecker/index.tsx","webpack://GoLogin/./src/app/features/personalArea/2fa/index.tsx"],"sourcesContent":["import { API_BASE_URL } from '../../../../../common/constants/constants';\r\nimport { http } from '../../../../services';\r\nimport { ITwoFaStatus } from '../../../authentification/o-auth/interfaces/user-providers.interface';\r\n\r\nexport const getTwoFaStatus = async (): Promise<ITwoFaStatus> => {\r\n  const twoFaStatusRequest = await http(`${API_BASE_URL}/2fa/status`, {\r\n    method: 'GET',\r\n  });\r\n\r\n  return twoFaStatusRequest.body;\r\n};\r\n\r\nexport const generate2faSecret = async () => {\r\n  const apiGenerate2faRequest = await http(`${API_BASE_URL}/2fa/generate`, {\r\n    method: 'POST',\r\n  });\r\n\r\n  return apiGenerate2faRequest.body;\r\n};\r\n\r\nexport const turnOn2fa = (code: string) => {\r\n  const body = JSON.stringify({\r\n    code,\r\n  });\r\n\r\n  return http(`${API_BASE_URL}/2fa/turn-on`, {\r\n    method: 'POST',\r\n    body,\r\n  });\r\n};\r\n\r\nexport const turnOff2fa = (code: string) => {\r\n  const body = JSON.stringify({\r\n    code,\r\n  });\r\n\r\n  return http(`${API_BASE_URL}/2fa/turn-off`, {\r\n    method: 'POST',\r\n    body,\r\n  });\r\n};\r\n","import React, { FC, memo } from 'react';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\n\r\ninterface IQRCode {\r\n  value: string;\r\n}\r\nconst QRCode: FC<IQRCode> = (props) => {\r\n  return (\r\n    <QRCodeCanvas value={props.value} level='L' />\r\n  );\r\n}\r\n\r\nexport default memo(QRCode);\r\n","import styled from '@emotion/styled';\r\nimport { Modal, Input, Icon, message } from 'antd';\r\nimport React, { ChangeEvent, FC, memo, useEffect, useState } from 'react';\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { generate2faSecret, turnOn2fa } from './api';\r\nimport QRCode from './components/qr-code';\r\nimport { TWO_FA_TOKEN_KEY_NAME } from '../../../../../common/constants/constants';\r\nimport { saveToken } from '../../../../services/http/storage';\r\n\r\nconst ContentText = styled.span`\r\n  color: var(--676767);\r\n`;\r\n\r\nconst ChangeFormTypeBtn = styled.div`\r\n  color: var(--6269AF);\r\n  text-align: center;\r\n  margin-bottom: 16px;\r\n  cursor: pointer;\r\n  user-select: none;\r\n`;\r\n\r\nconst GrayCircle = styled.div`\r\n  cursor: pointer;\r\n  background-color: var(--EBEBEB);\r\n  color: var(--999999);\r\n  width: 25px;\r\n  height: 25px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst QRCodeContainer = styled.div`\r\n  margin: 16px auto;\r\n  width: fit-content;\r\n`;\r\n\r\ninterface ITwoFAInstaller {\r\n  onClose: (isSuccess?: boolean) => any;\r\n  visible: boolean;\r\n}\r\nconst TwoFAInstaller: FC<ITwoFAInstaller> = (props) => {\r\n  const [formType, setFormType] = useState<'qr'|'manual'>('qr');\r\n  const [twoFaSecret, setTwoFaSecret] = useState<string>('');\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [authCode, setAuthCode] = useState<string>('');\r\n  const [isCodeChecking, setIsCodeChecking] = useState<boolean>(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const verifyCode = async () => {\r\n    if (isCodeChecking) {\r\n      return;\r\n    }\r\n\r\n    if (authCode.length !== 6) {\r\n      message.error(translation('notifications.error.invalidCode'));\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsCodeChecking(true);\r\n      const { body } = await turnOn2fa(authCode);\r\n      const { twoFaToken, token } = body;\r\n      localStorage.setItem(TWO_FA_TOKEN_KEY_NAME, twoFaToken);\r\n      saveToken(token, 'verifyCode');\r\n\r\n      setAuthCode('');\r\n      props.onClose(true);\r\n    } finally {\r\n      setIsCodeChecking(false);\r\n    }\r\n  };\r\n\r\n  const loadOptAuth = async () => {\r\n    try {\r\n      const otpObj = await generate2faSecret();\r\n      setTwoFaSecret(otpObj.otpAuthUrl);\r\n      setIsLoading(false);\r\n    } catch {\r\n      setIsLoading(true);\r\n    }\r\n  };\r\n\r\n  const onAuthCodeChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { value = '' } = e.target;\r\n\r\n    if (isCodeChecking) {\r\n      return;\r\n    }\r\n\r\n    if (!value) {\r\n      setAuthCode(value);\r\n\r\n      return;\r\n    }\r\n\r\n    const isValueValid = /^[0-9]{0,6}$/g.test(value);\r\n    if (!isValueValid) {\r\n      return;\r\n    }\r\n\r\n    setAuthCode(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadOptAuth();\r\n  }, []);\r\n\r\n  const forms = {\r\n    qr: (\r\n      <>\r\n        <QRCodeContainer>\r\n          <QRCode value={twoFaSecret} />\r\n        </QRCodeContainer>\r\n\r\n        <ChangeFormTypeBtn onClick={() => setFormType('manual')}>\r\n          {translation('twoFA.enterCodeManually')}\r\n        </ChangeFormTypeBtn>\r\n      </>\r\n    ),\r\n    manual: (\r\n      <>\r\n        <Input\r\n          type='one-time-code'\r\n          style={{ margin: '16px 0' }}\r\n          readOnly={true}\r\n          value={twoFaSecret ? new URL(twoFaSecret).searchParams.get('secret')! : ''}\r\n          addonAfter={(\r\n            <CopyToClipboard text={twoFaSecret ? new URL(twoFaSecret || '').searchParams.get('secret')! : ''} onCopy={() => message.success(translation('base.copiedText'))}>\r\n              <GrayCircle>\r\n                <Icon type='copy' />\r\n              </GrayCircle>\r\n            </CopyToClipboard>\r\n          )}\r\n        />\r\n        <ChangeFormTypeBtn onClick={() => setFormType('qr')}>\r\n          {translation('twoFA.scanQR')}\r\n        </ChangeFormTypeBtn>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      destroyOnClose={true}\r\n      title={translation('twoFA.setup')}\r\n      visible={props.visible}\r\n      onCancel={() => {\r\n        setAuthCode('');\r\n        props.onClose(false);\r\n      }}\r\n      footer={null}\r\n    >\r\n      <ContentText>\r\n        {translation('twoFA.subtitle')}\r\n      </ContentText>\r\n\r\n      {isLoading ? (\r\n        <div style={{ margin: '0 auto', width: 'fit-content' }}>\r\n          <Icon type='loading' style={{ fontSize: 32 }} />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {forms[formType]}\r\n\r\n          <Input\r\n            value={authCode}\r\n            onChange={onAuthCodeChange}\r\n            placeholder={translation('twoFA.enter6DigitCode')}\r\n            onPressEnter={verifyCode}\r\n            addonAfter={(\r\n              <GrayCircle onClick={verifyCode}>\r\n                {isCodeChecking ? <Icon type='loading' /> : <Icon type='right' />}\r\n              </GrayCircle>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(TwoFAInstaller);\r\n","import styled from '@emotion/styled';\r\nimport { Button, Modal } from 'antd';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ContentText = styled.span`\r\n  color: var(--676767);\r\n`;\r\n\r\nconst BtnContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-top: 24px;\r\n`;\r\n\r\ninterface ITwoFaIsOnModal {\r\n  onClose: () => any;\r\n  visible: boolean;\r\n}\r\nconst TwoFaIsOnModal: FC<ITwoFaIsOnModal> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      destroyOnClose={true}\r\n      title={translation('twoFA.isOn')}\r\n      visible={props.visible}\r\n      onCancel={props.onClose}\r\n      footer={null}\r\n    >\r\n      <ContentText>{translation('twoFA.askCode')}</ContentText>\r\n      <BtnContainer>\r\n        <Button type='primary' onClick={props.onClose}>{translation('base.confirm')}</Button>\r\n      </BtnContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(TwoFaIsOnModal);\r\n","import { API_BASE_URL } from '../../../../../common/constants/constants';\r\nimport { http } from '../../../../services';\r\n\r\nexport const turnOff2fa = async (code: string) => {\r\n  const body = JSON.stringify({\r\n    code,\r\n  });\r\n\r\n  try {\r\n    return http(`${API_BASE_URL}/2fa/turn-off`, {\r\n      method: 'POST',\r\n      body,\r\n    });\r\n\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Button, Input, message, Modal } from 'antd';\r\nimport React, { FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { turnOff2fa } from './api';\r\n\r\nconst ContentContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  gap: 8px;\r\n`;\r\n\r\ninterface ITwoFaUninstaller {\r\n  onClose: (isTwoFaDisabled: boolean) => any;\r\n  visible: boolean;\r\n}\r\nconst TwoFaUninstaller: FC<ITwoFaUninstaller> = (props) => {\r\n  const [twoFACode, setTwoFACode] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onSubmit = async () => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      if (!twoFACode) {\r\n        message.error(translation('twoFAUninstallModal.errorNoCode'));\r\n\r\n        return;\r\n      }\r\n\r\n      if (twoFACode.length !== 6) {\r\n        message.error(translation('twoFAUninstallModal.invalidCode'));\r\n      }\r\n\r\n      const isOnlyNumbers = /^[0-9]{6}$/g.test(twoFACode);\r\n      if (!isOnlyNumbers) {\r\n        message.error(translation('twoFAUninstallModal.wrongCode'));\r\n\r\n        return;\r\n      }\r\n\r\n      await turnOff2fa(twoFACode);\r\n\r\n      setIsLoading(false);\r\n      props.onClose(true);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onCancel={() => props.onClose(false)}\r\n      footer={false}\r\n      visible={props.visible}\r\n      closable={!isLoading}\r\n      title={translation('twoFAUninstallModal.title')}\r\n    >\r\n      <ContentContainer>\r\n        <span>{translation('twoFAUninstallModal.subtitle')}</span>\r\n\r\n        <FormContainer>\r\n          <Input\r\n            placeholder={translation('twoFAUninstallModal.codeInputPlaceholder')}\r\n            autoComplete='off'\r\n            value={twoFACode}\r\n            onChange={(e) => setTwoFACode(e.target.value)}\r\n            maxLength={6}\r\n            onPressEnter={onSubmit}\r\n            autoFocus={true}\r\n          />\r\n\r\n          <Button type='primary' onClick={onSubmit} loading={isLoading}>{translation('base.confirm')}</Button>\r\n        </FormContainer>\r\n      </ContentContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(TwoFaUninstaller);\r\n","import styled from '@emotion/styled';\r\nimport { Button, Modal } from 'antd';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ContentText = styled.span`\r\n  color: var(--676767);\r\n`;\r\n\r\nconst BtnContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-top: 24px;\r\n`;\r\n\r\ninterface IAfterUninstallConfirmation {\r\n  onClose: () => any;\r\n  visible: boolean;\r\n}\r\nconst AfterUninstallConfirmation: FC<IAfterUninstallConfirmation> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      destroyOnClose={true}\r\n      title={translation('twoFA.disable.title')}\r\n      visible={props.visible}\r\n      onCancel={props.onClose}\r\n      footer={null}\r\n    >\r\n      <ContentText>{translation('twoFA.disable.subtitle')}</ContentText>\r\n      <BtnContainer>\r\n        <Button type='primary' onClick={props.onClose}>{translation('twoFA.disable.confirm')}</Button>\r\n      </BtnContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(AfterUninstallConfirmation);\r\n","import styled from '@emotion/styled';\r\nimport { Button, Modal } from 'antd';\r\nimport React, { FC, memo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ContentText = styled.span`\r\n  color: var(--676767);\r\n`;\r\n\r\nconst BtnContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  margin-top: 24px;\r\n  gap: 8px;\r\n`;\r\n\r\ninterface IBeforeUninstallConfirmation {\r\n  onClose: (isConfirmed: boolean) => any;\r\n  visible: boolean;\r\n}\r\nconst BeforeUninstallConfirmation: FC<IBeforeUninstallConfirmation> = (props) => {\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      destroyOnClose={true}\r\n      title={translation('twoFA.confirmTurnOff')}\r\n      visible={props.visible}\r\n      onCancel={() => props.onClose(false)}\r\n      footer={null}\r\n    >\r\n      <ContentText>{translation('twoFA.noSendCode')}</ContentText>\r\n      <br/>\r\n      <br/>\r\n      <ContentText>{translation('twoFA.lessSecure')}</ContentText>\r\n      <BtnContainer>\r\n        <Button type='primary' onClick={() => props.onClose(true)}>{translation('base.confirm')}</Button>\r\n        <Button type='danger' onClick={() => props.onClose(false)}>{translation('base.cancel')}</Button>\r\n      </BtnContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(BeforeUninstallConfirmation);\r\n","import { API_BASE_URL } from '../../../../../common/constants/constants';\r\nimport { http } from '../../../../services';\r\n\r\nexport const verifyPassword = async (password: string) => {\r\n  const body = JSON.stringify({\r\n    password,\r\n  });\r\n\r\n  try {\r\n    const data = await http(`${API_BASE_URL}/user/password/confirm`, {\r\n      method: 'POST',\r\n      body,\r\n    });\r\n\r\n    return data.body;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Button, Input, message, Modal } from 'antd';\r\nimport React, { FC, memo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { verifyPassword } from './api';\r\n\r\nconst ContentContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  gap: 8px;\r\n`;\r\n\r\ninterface IPasswordChecker {\r\n  onClose: (isPasswordConfirmed) => any;\r\n  visible: boolean;\r\n}\r\nconst PasswordChecker: FC<IPasswordChecker> = (props) => {\r\n  const [password, setPassword] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const onSubmit = async () => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const cleanedPassword = password.trim();\r\n\r\n      if (!cleanedPassword) {\r\n        message.error(translation('notifications.error.pleaseEnterPassword'));\r\n\r\n        return;\r\n      }\r\n\r\n      const { isPasswordValid } = await verifyPassword(cleanedPassword);\r\n      if (!isPasswordValid) {\r\n        message.error(translation('notifications.error.invalidPassword'));\r\n\r\n        return;\r\n      }\r\n\r\n      setIsLoading(false);\r\n      props.onClose(true);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onCancel={() => props.onClose(false)}\r\n      footer={false}\r\n      visible={props.visible}\r\n      closable={!isLoading}\r\n      title={translation('passwordCheckerModal.title')}\r\n    >\r\n      <ContentContainer>\r\n        <span>\r\n          {translation('passwordCheckerModal.overview.title')}\r\n        </span>\r\n\r\n        <FormContainer>\r\n          <Input\r\n            placeholder={translation('passwordCheckerModal.overview.placeholder')}\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type='password'\r\n            autoComplete='off'\r\n            maxLength={256}\r\n            onPressEnter={onSubmit}\r\n            autoFocus={true}\r\n          />\r\n\r\n          <Button type='primary' onClick={onSubmit} loading={isLoading}>\r\n            {translation('passwordCheckerModal.overview.confirmSubmitBtnText')}\r\n          </Button>\r\n        </FormContainer>\r\n      </ContentContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(PasswordChecker);\r\n","import { Button } from 'antd';\r\nimport React, { FC, memo, useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { userContext } from '../../../state';\r\nimport { UserAuthProviderType } from '../../authentification/o-auth/types';\r\nimport LoadingPage from '../../common/loading-page';\r\nimport TwoFAInstaller from '../../modalsComponents/components/2fa-installer';\r\nimport { getTwoFaStatus } from '../../modalsComponents/components/2fa-installer/api';\r\nimport TwoFaIsOnModal from '../../modalsComponents/components/2fa-installer/TwoFaOn';\r\nimport TwoFaUninstaller from '../../modalsComponents/components/2fa-uninstaller';\r\nimport AfterUninstallConfirmation from '../../modalsComponents/components/2fa-uninstaller/afterUninstallConfirmation';\r\nimport BeforeUninstallConfirmation from '../../modalsComponents/components/2fa-uninstaller/beforeUninstalConfirmation';\r\nimport PasswordChecker from '../../modalsComponents/components/passwordChecker';\r\nimport { TabWrapper } from '../menu/tab-wrapper';\r\nimport { PageTitle, ContentArea, ContentAreaRow } from '../styles';\r\n\r\nconst PersonalAreaTwoFAPage: FC = () => {\r\n  const [isTwoFaInstallerModalVisible, setIsTwoFaInstallerModalVisible] = useState(false);\r\n  const [isPasswordConfirmModalVisible, setIsPasswordConfirmModalVisible] = useState(false);\r\n  const [twoFaInstalledModalOpened, setTwoFaInstalledModalOpened] = useState(false);\r\n  const [isConfirmationTurnOffVisible, setIsConfirmationTurnOffVisible] = useState(false);\r\n  const [isTwoFaUninstallerVisible, setIsTwoFaUninstallerVisible] = useState(false);\r\n  const [twoFaUninstalledModalVisible, setTwoFaUninstalledModalVisible] = useState(false);\r\n\r\n  const [isTwoFaEnabled, setIsTwoFaEnabled] = useState<boolean>(false);\r\n  const [userAuthProviderType, setUserAuthProviderType] = useState<UserAuthProviderType>('default');\r\n  const [isDataLoaded, setIsDataLoaded] = useState<boolean>(false);\r\n  const [isNeedRefreshData, setIsNeedRefreshData] = useState<boolean>(false);\r\n\r\n  const { _id } = useContext(userContext);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    checkTwoFaStatus();\r\n  }, [isNeedRefreshData]);\r\n\r\n  const checkTwoFaStatus = async (): Promise<void> => {\r\n    const { authProvider = 'default', is2faEnabled = false } = await getTwoFaStatus();\r\n\r\n    setUserAuthProviderType(authProvider);\r\n    setIsTwoFaEnabled(is2faEnabled);\r\n    setIsDataLoaded(true);\r\n  };\r\n\r\n  const onTwoFaInstallerClosed = (isTwoFaInstalled?: boolean): void => {\r\n    setIsTwoFaInstallerModalVisible(false);\r\n    setTwoFaInstalledModalOpened(!!isTwoFaInstalled);\r\n    setIsNeedRefreshData(!isNeedRefreshData);\r\n  };\r\n\r\n  const onTwoFaUninstallerClosed = (is2FaUninstalled: boolean): void => {\r\n    setIsTwoFaUninstallerVisible(false);\r\n    setTwoFaUninstalledModalVisible(is2FaUninstalled);\r\n    setIsNeedRefreshData(!isNeedRefreshData);\r\n  };\r\n\r\n  const onPasswordCheckerClose = (isPasswordValid: boolean): void => {\r\n    setIsPasswordConfirmModalVisible(false);\r\n\r\n    if (!isPasswordValid) {\r\n      return;\r\n    }\r\n\r\n    setIsTwoFaInstallerModalVisible(true);\r\n  };\r\n\r\n  const initInstall2fa = (): void => {\r\n    if (userAuthProviderType === 'default') {\r\n      setIsPasswordConfirmModalVisible(true);\r\n\r\n      return;\r\n    }\r\n\r\n    setIsTwoFaInstallerModalVisible(true);\r\n  };\r\n\r\n  const renderBtns = (): JSX.Element|null => {\r\n    if (!_id) {\r\n      return null;\r\n    }\r\n\r\n    if (isTwoFaEnabled) {\r\n      return (\r\n        <>\r\n          <Button type='ghost' onClick={(): void => setIsConfirmationTurnOffVisible(true)}>\r\n            {translation('twoFA.turnOffBtn')}\r\n          </Button>\r\n          <Button type='primary' onClick={(): void => setIsTwoFaInstallerModalVisible(true)}>\r\n            {translation('twoFA.addMoreDevBtn')}\r\n          </Button>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Button type='primary' onClick={initInstall2fa}>\r\n        {translation('base.install')}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const twoFaTopText = isTwoFaEnabled ?\r\n    translation('twoFA.askCode') :\r\n    translation('twoFA.warn') + translation('twoFA.deviceLose');\r\n\r\n  if (!isDataLoaded) {\r\n    return (\r\n      <TabWrapper tabKey='two-factor-auth'>\r\n        <PageTitle>\r\n          {translation('twoFA.setup')}\r\n        </PageTitle>\r\n        <LoadingPage />\r\n      </TabWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TabWrapper tabKey='two-factor-auth'>\r\n      <PageTitle>\r\n        {isTwoFaEnabled ? translation('twoFA.isOn') : translation('twoFA.setup')}\r\n      </PageTitle>\r\n      <ContentArea>\r\n        <ContentAreaRow>\r\n          <span>\r\n            {twoFaTopText}\r\n          </span>\r\n        </ContentAreaRow>\r\n        <ContentAreaRow>\r\n          {renderBtns()}\r\n        </ContentAreaRow>\r\n      </ContentArea>\r\n      <PasswordChecker\r\n        onClose={onPasswordCheckerClose}\r\n        visible={isPasswordConfirmModalVisible}\r\n      />\r\n      {_id ? (\r\n        <TwoFAInstaller\r\n          visible={isTwoFaInstallerModalVisible}\r\n          onClose={onTwoFaInstallerClosed}\r\n        />\r\n      ) : null}\r\n      <TwoFaIsOnModal visible={twoFaInstalledModalOpened} onClose={(): void => setTwoFaInstalledModalOpened(false)} />\r\n      <BeforeUninstallConfirmation\r\n        onClose={(isConfirmed): void => {\r\n          setIsTwoFaUninstallerVisible(isConfirmed);\r\n          setIsConfirmationTurnOffVisible(false);\r\n        }}\r\n        visible={isConfirmationTurnOffVisible}\r\n      />\r\n      <TwoFaUninstaller\r\n        visible={isTwoFaUninstallerVisible}\r\n        onClose={onTwoFaUninstallerClosed}\r\n      />\r\n      <AfterUninstallConfirmation\r\n        onClose={(): void => setTwoFaUninstalledModalVisible(false)}\r\n        visible={twoFaUninstalledModalVisible}\r\n      />\r\n    </TabWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(PersonalAreaTwoFAPage);\r\n"],"names":["getTwoFaStatus","_ref","_asyncToGenerator","http","concat","API_BASE_URL","method","body","apply","arguments","generate2faSecret","_ref2","QRCode","props","React","QRCodeCanvas","value","level","memo","ContentText","styled","_templateObject","_taggedTemplateLiteral","ChangeFormTypeBtn","_templateObject2","GrayCircle","_templateObject3","QRCodeContainer","_templateObject4","TwoFAInstaller","formType","setFormType","useState","twoFaSecret","setTwoFaSecret","isLoading","setIsLoading","authCode","setAuthCode","isCodeChecking","setIsCodeChecking","t","translation","useTranslation","verifyCode","length","code","JSON","stringify","turnOn2fa","twoFaToken","token","localStorage","setItem","TWO_FA_TOKEN_KEY_NAME","saveToken","onClose","_message","loadOptAuth","otpObj","otpAuthUrl","_unused","useEffect","forms","qr","onClick","manual","_Input","type","style","margin","readOnly","URL","searchParams","get","addonAfter","CopyToClipboard","text","onCopy","_Icon","_Modal","destroyOnClose","title","visible","onCancel","footer","width","fontSize","onChange","e","target","test","placeholder","onPressEnter","BtnContainer","TwoFaIsOnModal","_Button","turnOff2fa","_x","ContentContainer","FormContainer","TwoFaUninstaller","twoFACode","setTwoFACode","onSubmit","closable","autoComplete","maxLength","autoFocus","loading","AfterUninstallConfirmation","BeforeUninstallConfirmation","verifyPassword","password","PasswordChecker","setPassword","cleanedPassword","trim","isPasswordValid","PersonalAreaTwoFAPage","isTwoFaInstallerModalVisible","setIsTwoFaInstallerModalVisible","isPasswordConfirmModalVisible","setIsPasswordConfirmModalVisible","twoFaInstalledModalOpened","setTwoFaInstalledModalOpened","isConfirmationTurnOffVisible","setIsConfirmationTurnOffVisible","isTwoFaUninstallerVisible","setIsTwoFaUninstallerVisible","twoFaUninstalledModalVisible","setTwoFaUninstalledModalVisible","isTwoFaEnabled","setIsTwoFaEnabled","userAuthProviderType","setUserAuthProviderType","isDataLoaded","setIsDataLoaded","isNeedRefreshData","setIsNeedRefreshData","_id","useContext","userContext","checkTwoFaStatus","authProvider","is2faEnabled","initInstall2fa","twoFaTopText","TabWrapper","tabKey","PageTitle","ContentArea","ContentAreaRow","isTwoFaInstalled","isConfirmed","is2FaUninstalled","LoadingPage"],"sourceRoot":""}