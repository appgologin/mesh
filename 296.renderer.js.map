{"version":3,"file":"296.renderer.js","mappings":"4vBAEaA,GAA0BC,EAAAA,EAAAA,GAAO,MAAPA,CAAaC,IAAAA,EAAAC,IAAA,8CAKvCC,GAAqBH,EAAAA,EAAAA,GAAO,MAAPA,CAAaI,IAAAA,EAAAF,IAAA,kLASlCG,GAAiBL,EAAAA,EAAAA,GAAO,MAAPA,CAAaM,IAAAA,EAAAJ,IAAA,iIAQ9BK,GAAiBP,EAAAA,EAAAA,GAAO,MAAPA,CAAaQ,IAAAA,EAAAN,IAAA,wHAGxB,SAACO,GAAK,OAAaA,EAAMC,WAAa,wDAA0D,MAAM,IAK5GC,GAAYX,EAAAA,EAAAA,GAAO,OAAPA,CAAcY,IAAAA,EAAAV,IAAA,qMAQ1BW,GAAWb,EAAAA,EAAAA,GAAO,OAAPA,CAAcc,IAAAA,EAAAZ,IAAA,2BAIzBa,GAAkBf,EAAAA,EAAAA,GAAO,OAAPA,CAAcgB,IAAAA,EAAAd,IAAA,iLAOhCe,EAAajB,EAAAA,EAAAA,KAAWkB,IAAAA,EAAAhB,IAAA,iECarC,QAzCkD,SAACO,GACjD,IAAM,aAAEU,EAAY,IAAEC,EAAG,GAAEC,EAAE,GAAEC,EAAE,WAAEZ,EAAU,OAAEa,EAAM,SAAEC,GAAaf,GAE5DgB,EAAGC,IAAgBC,EAAAA,EAAAA,MAE3B,OACEC,EAAAA,cAACrB,EAAc,CAACG,WAAYA,GAC1BkB,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAAA,YACGR,GAEFD,EACCS,EAAAA,cAACb,EAAe,KACbc,IAAOV,GAAcW,WAEtB,MAENF,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAACf,EAAQ,KACNS,IAGLM,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAACf,EAAQ,KACNU,GAEHK,EAAAA,cAAAG,EAAAA,EAAA,CACEC,MAAON,EAAY,8DACnBO,UAAW,kBAAYT,EAASH,EAAG,EACnCa,OAAQR,EAAY,YACpBS,WAAYT,EAAY,YAExBE,EAAAA,cAACjB,EAAS,KACPe,EAAY,kBAMzB,E,0BCpBA,QA3B0D,SAACjB,GACzD,IAAM,IAAEW,EAAG,GAAEE,EAAE,OAAEC,GAAWd,EAE5B,OACEmB,EAAAA,cAACrB,EAAc,KACbqB,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAAA,YACGR,GAEHQ,EAAAA,cAACX,EAAU,KAAC,WAIdW,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAACf,EAAQ,KACNS,IAGLM,EAAAA,cAACvB,EAAc,KACbuB,EAAAA,cAACf,EAAQ,KACNU,IAKX,E,gDCtBMa,EAAyB,WAC7B,IAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAA2B,KACpDC,EAAeC,IAAoBF,EAAAA,EAAAA,UAA8B,OAEhEd,EAAGC,IAAgBC,EAAAA,EAAAA,OAE3Be,EAAAA,EAAAA,YAAU,WACRC,GACF,GAAG,IAEH,IAAMC,EAAmB,eAAAC,EAAAC,KAAG,YAC1B,IAAMC,QAAcC,EAAAA,EAAAA,OACbC,EAAGC,IAAYH,GAAS,IAAII,MAAM,KACnCC,EAAYC,KAAKH,GAGvB,OAFqBI,KAAKC,MAAMH,GAEZI,KACtB,IAAC,kBAPwB,OAAAX,EAAAY,MAAA,KAAAC,UAAA,KASnBf,EAAe,eAAAgB,EAAAb,KAAG,YACtB,IAAMc,QCxBRC,EAAAA,EAAAA,IAAK,GAADC,OAAIC,EAAAA,GAAY,0BACjBC,MAAK,SAACC,GAAQ,OAAKA,EAAIC,IAAI,IDwBtBC,QAAyBvB,IAEzBwB,EAAyBR,EAAeS,QAAyB,SAACC,EAAKC,GAO3E,OANIA,EAAQlD,KAAO8C,EACjB1B,EAAiB8B,GAEjBD,EAAIE,KAAKD,GAGJD,CACT,GAAG,IAEHhC,EAAY8B,EACd,IAAC,kBAfoB,OAAAT,EAAAF,MAAA,KAAAC,UAAA,KAiBfe,EAAa,eAAAC,EAAA5B,KAAG,UAAOzB,SCrCA,SAACA,GAAU,OACxCwC,EAAAA,EAAAA,IAAK,GAADC,OAAIC,EAAAA,GAAY,gBAAAD,OAAezC,GAAM,CACvCsD,OAAQ,UACR,CDmCMC,CAAgBvD,GAEtB,IAAMwD,EAAsBxC,EAASyC,QAAO,SAAAP,GAAO,OAAIA,EAAQlD,KAAOA,CAAE,IACxEiB,EAAYuC,EACd,IAAC,gBALkBE,GAAA,OAAAL,EAAAjB,MAAA,KAAAC,UAAA,KAObsB,EAAwB,eAAAC,EAAAnC,KAAG,YCvCG,IAACoC,EDwC9B1C,UCxC8B0C,ED4CN1C,EAAcnB,IC3C7CwC,EAAAA,EAAAA,IAAK,GAADC,OAAIC,EAAAA,GAAY,eAAe,CACjCY,OAAQ,SACRT,KAAMZ,KAAK6B,UAAU,CACnBD,mBDyCF5C,EAAY,IACd,IAAC,kBAP6B,OAAA2C,EAAAxB,MAAA,KAAAC,UAAA,KAS9B,OAAKlB,EAYHZ,EAAAA,cAACwD,EAAAA,EAAU,CAACC,OAAO,mBACjBzD,EAAAA,cAAC0D,EAAAA,GAAS,KACP5D,EAAY,sCAEfE,EAAAA,cAAC7B,EAAuB,KACtB6B,EAAAA,cAAA,YACGF,EAAY,+CAEfE,EAAAA,cAACzB,EAAkB,KACjByB,EAAAA,cAAC2D,EAA0B/C,GAC1BH,EAASmD,OACR5D,EAAAA,cAAAG,EAAAA,EAAA,CACEC,MAAON,EAAY,mEACnBO,UAAW+C,GAEXpD,EAAAA,cAAA6D,EAAAA,QAAA,CACEC,MAAO,CACLC,MAAO,OACPC,aAAc,GAEhBC,KAAK,SACLC,OAAO,GAENpE,EAAY,wEAGf,KACJE,EAAAA,cAACf,EAAQ,KACNa,EAAY,oDAIlBW,EAASmD,OACR5D,EAAAA,cAAC7B,EAAuB,KACtB6B,EAAAA,cAAA,YACGF,EAAY,sCAEfE,EAAAA,cAACzB,EAAkB,KAChBkC,EAAS0D,KAAI,SAACxB,EAASyB,GAAK,OAC3BpE,EAAAA,cAACqE,EAAiBC,IAAA,CAChBC,IAAK5B,EAAQlD,GACbX,WAAYsF,EAAQ3D,EAASmD,OAAS,EACtChE,SAAUiD,GACNF,GACJ,MAIN,MA1DJ3C,EAAAA,cAACwD,EAAAA,EAAU,CAACC,OAAO,mBACjBzD,EAAAA,cAAC0D,EAAAA,GAAS,KACP5D,EAAY,sCAEfE,EAAAA,cAACwE,EAAAA,EAAW,MAyDpB,EAEA,SAAeC,EAAAA,EAAAA,MAAKjE,E","sources":["webpack://GoLogin/./src/app/features/personalArea/activeSessions/styles.tsx","webpack://GoLogin/./src/app/features/personalArea/activeSessions/active-session-card.tsx","webpack://GoLogin/./src/app/features/personalArea/activeSessions/this-device-session-card.tsx","webpack://GoLogin/./src/app/features/personalArea/activeSessions/index.tsx","webpack://GoLogin/./src/app/features/personalArea/activeSessions/api.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const ActiveSessionsContainer = styled('div')`\r\n  margin: 20px 0;\r\n  width: 500px;\r\n`;\r\n\r\nexport const ActiveSessionsList = styled('div')`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 10px;\r\n  flex-direction: column;\r\n  background-color: var(--FAFAFA-personal-area-active-sessions);\r\n  border-radius: 8px;\r\n`;\r\n\r\nexport const RowInfoSession = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 2px 0;\r\n`;\r\n\r\nexport const BlockContainer = styled('div')<{ needBorder?: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-bottom: ${(props): string => props.needBorder ? '1px solid var(--CFCFCF-personal-area-active-sessions)' : 'none'};\r\n  margin-bottom: 4px;\r\n  padding: 4px 0;\r\n`;\r\n\r\nexport const RevokeBtn = styled('span')`\r\n  color: var(--434343-personal-area-active-sessions);\r\n  background-color: var(--CFCFCF-personal-area-active-sessions);\r\n  border-radius: 100px;\r\n  padding: 4px 8px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const GreyText = styled('span')`\r\n  opacity: 0.5;\r\n`;\r\n\r\nexport const LastActivityBox = styled('span')`\r\n  background-color: var(--00AE67-personal-area-active-sessions);\r\n  padding: 4px 8px;\r\n  border-radius: 100px;\r\n  color: var(--FFFFFF-personal-area-active-sessions);\r\n`;\r\n\r\nexport const OnlineText = styled.span`\r\n  color: var(--0F67BF-personal-area-active-sessions);\r\n`;\r\n","import { Popconfirm } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n  BlockContainer,\r\n  GreyText,\r\n  LastActivityBox,\r\n  RevokeBtn,\r\n  RowInfoSession,\r\n} from './styles';\r\n\r\ninterface IActiveSessionCard {\r\n  lastActivity?: string;\r\n  app: string;\r\n  id: string;\r\n  os: string;\r\n  needBorder?: boolean;\r\n  lastIp?: string;\r\n  onRevoke: (id: string) => any;\r\n}\r\n\r\nconst ActiveSessionCard: FC<IActiveSessionCard> = (props) => {\r\n  const { lastActivity, app, id, os, needBorder, lastIp, onRevoke } = props;\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <BlockContainer needBorder={needBorder}>\r\n      <RowInfoSession>\r\n        <span>\r\n          {app}\r\n        </span>\r\n        {lastActivity ? (\r\n          <LastActivityBox>\r\n            {moment(lastActivity).fromNow()}\r\n          </LastActivityBox>\r\n        ) : null}\r\n      </RowInfoSession>\r\n      <RowInfoSession>\r\n        <GreyText>\r\n          {os}\r\n        </GreyText>\r\n      </RowInfoSession>\r\n      <RowInfoSession>\r\n        <GreyText>\r\n          {lastIp}\r\n        </GreyText>\r\n        <Popconfirm\r\n          title={translation('personalArea.activeSessions.popConfirmTerminateThisSession')}\r\n          onConfirm={(): void => onRevoke(id)}\r\n          okText={translation('base.yes')}\r\n          cancelText={translation('base.no')}\r\n        >\r\n          <RevokeBtn>\r\n            {translation('base.revoke')}\r\n          </RevokeBtn>\r\n        </Popconfirm>\r\n      </RowInfoSession>\r\n    </BlockContainer>\r\n  );\r\n};\r\n\r\nexport default ActiveSessionCard;\r\n","import React, { FC } from 'react';\r\n\r\nimport {\r\n  BlockContainer,\r\n  GreyText,\r\n  OnlineText,\r\n  RowInfoSession,\r\n} from './styles';\r\n\r\ninterface IThisDeviceSessionCard {\r\n  app: string;\r\n  os: string;\r\n  lastIp?: string;\r\n}\r\n\r\nconst ThisDeviceSessionCard: FC<IThisDeviceSessionCard> = (props) => {\r\n  const { app, os, lastIp } = props;\r\n\r\n  return (\r\n    <BlockContainer>\r\n      <RowInfoSession>\r\n        <span>\r\n          {app}\r\n        </span>\r\n        <OnlineText>\r\n          online\r\n        </OnlineText>\r\n      </RowInfoSession>\r\n      <RowInfoSession>\r\n        <GreyText>\r\n          {os}\r\n        </GreyText>\r\n      </RowInfoSession>\r\n      <RowInfoSession>\r\n        <GreyText>\r\n          {lastIp}\r\n        </GreyText>\r\n      </RowInfoSession>\r\n    </BlockContainer>\r\n  );\r\n};\r\n\r\nexport default ThisDeviceSessionCard;\r\n","import { Button, Popconfirm } from 'antd';\r\nimport React, { FC, memo, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport ActiveSessionCard from './active-session-card';\r\nimport {\r\n  deleteTokenById,\r\n  IActiveSession,\r\n  requestActiveSessions,\r\n  terminateOtherSessions,\r\n} from './api';\r\nimport { ActiveSessionsContainer, ActiveSessionsList, GreyText } from './styles';\r\nimport ThisDeviceSessionCard from './this-device-session-card';\r\nimport { retrieveToken } from '../../../services/http/storage';\r\nimport LoadingPage from '../../common/loading-page';\r\nimport { TabWrapper } from '../menu/tab-wrapper';\r\nimport { PageTitle } from '../styles';\r\n\r\nconst ActiveSessionsPage: FC = () => {\r\n  const [sessions, setSessions] = useState<IActiveSession[]>([]);\r\n  const [deviceSession, setDeviceSession] = useState<IActiveSession|null>(null);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    requestSessions();\r\n  }, []);\r\n\r\n  const getCurrentSessionId = async (): Promise<string> => {\r\n    const token = await retrieveToken();\r\n    const [_, payload] = (token || '').split('.');\r\n    const tokenJSON = atob(payload);\r\n    const tokenPayload = JSON.parse(tokenJSON);\r\n\r\n    return tokenPayload.jwtid;\r\n  };\r\n\r\n  const requestSessions = async (): Promise<void> => {\r\n    const activeSessions = await requestActiveSessions();\r\n    const currentSessionId = await getCurrentSessionId();\r\n\r\n    const anotherDevicesSessions = activeSessions.reduce<IActiveSession[]>((acc, session) => {\r\n      if (session.id === currentSessionId) {\r\n        setDeviceSession(session);\r\n      } else {\r\n        acc.push(session);\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    setSessions(anotherDevicesSessions);\r\n  };\r\n\r\n  const onTokenDelete = async (id: string): Promise<void> => {\r\n    await deleteTokenById(id);\r\n\r\n    const updatedSessionArray = sessions.filter(session => session.id !== id);\r\n    setSessions(updatedSessionArray);\r\n  };\r\n\r\n  const onTerminateOtherSessions = async (): Promise<void> => {\r\n    if (!deviceSession) {\r\n      return;\r\n    }\r\n\r\n    await terminateOtherSessions(deviceSession.id);\r\n    setSessions([]);\r\n  };\r\n\r\n  if (!deviceSession) {\r\n    return (\r\n      <TabWrapper tabKey='active-sessions'>\r\n        <PageTitle>\r\n          {translation('personalArea.activeSessions.title')}\r\n        </PageTitle>\r\n        <LoadingPage />\r\n      </TabWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TabWrapper tabKey='active-sessions'>\r\n      <PageTitle>\r\n        {translation('personalArea.activeSessions.title')}\r\n      </PageTitle>\r\n      <ActiveSessionsContainer>\r\n        <span>\r\n          {translation('personalArea.activeSessions.subTitleDevice')}\r\n        </span>\r\n        <ActiveSessionsList>\r\n          <ThisDeviceSessionCard {...deviceSession} />\r\n          {sessions.length ? (\r\n            <Popconfirm\r\n              title={translation('personalArea.activeSessions.popConfirmTerminateAllOtherSessions')}\r\n              onConfirm={onTerminateOtherSessions}\r\n            >\r\n              <Button\r\n                style={{\r\n                  width: '100%',\r\n                  marginBottom: 3,\r\n                }}\r\n                type='danger'\r\n                ghost={true}\r\n              >\r\n                {translation('personalArea.activeSessions.terminateAllOtherSessionsSubmitBtnText')}\r\n              </Button>\r\n            </Popconfirm>\r\n          ) : null}\r\n          <GreyText>\r\n            {translation('personalArea.activeSessions.logsOutAllDevices')}\r\n          </GreyText>\r\n        </ActiveSessionsList>\r\n      </ActiveSessionsContainer>\r\n      {sessions.length ? (\r\n        <ActiveSessionsContainer>\r\n          <span>\r\n            {translation('personalArea.activeSessions.title')}\r\n          </span>\r\n          <ActiveSessionsList>\r\n            {sessions.map((session, index) => (\r\n              <ActiveSessionCard\r\n                key={session.id}\r\n                needBorder={index < sessions.length - 1}\r\n                onRevoke={onTokenDelete}\r\n                {...session}\r\n              />\r\n            ))}\r\n          </ActiveSessionsList>\r\n        </ActiveSessionsContainer>\r\n      ) : null}\r\n    </TabWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ActiveSessionsPage);\r\n","import { API_BASE_URL } from '../../../../common/constants/constants';\r\nimport { http } from '../../../services';\r\nimport { OsType } from '../../../types';\r\n\r\nexport interface IActiveSession {\r\n  id: string;\r\n  createdAt: string;\r\n  os: OsType;\r\n  app: string;\r\n  lastActivity?: string;\r\n  lastIp?: string;\r\n}\r\n\r\nexport const requestActiveSessions = (): Promise<IActiveSession[]> =>\r\n  http(`${API_BASE_URL}/user/active-sessions`)\r\n    .then((res: any) => res.body);\r\n\r\nexport const deleteTokenById = (id: string): Promise<void> =>\r\n  http(`${API_BASE_URL}/user/token/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\nexport const terminateOtherSessions = (saveTokenId: string): Promise<void> =>\r\n  http(`${API_BASE_URL}/user/token`, {\r\n    method: 'DELETE',\r\n    body: JSON.stringify({\r\n      saveTokenId,\r\n    }),\r\n  });\r\n"],"names":["ActiveSessionsContainer","styled","_templateObject","_taggedTemplateLiteral","ActiveSessionsList","_templateObject2","RowInfoSession","_templateObject3","BlockContainer","_templateObject4","props","needBorder","RevokeBtn","_templateObject5","GreyText","_templateObject6","LastActivityBox","_templateObject7","OnlineText","_templateObject8","lastActivity","app","id","os","lastIp","onRevoke","t","translation","useTranslation","React","moment","fromNow","_Popconfirm","title","onConfirm","okText","cancelText","ActiveSessionsPage","sessions","setSessions","useState","deviceSession","setDeviceSession","useEffect","requestSessions","getCurrentSessionId","_ref","_asyncToGenerator","token","retrieveToken","_","payload","split","tokenJSON","atob","JSON","parse","jwtid","apply","arguments","_ref2","activeSessions","http","concat","API_BASE_URL","then","res","body","currentSessionId","anotherDevicesSessions","reduce","acc","session","push","onTokenDelete","_ref3","method","deleteTokenById","updatedSessionArray","filter","_x","onTerminateOtherSessions","_ref4","saveTokenId","stringify","TabWrapper","tabKey","PageTitle","ThisDeviceSessionCard","length","_Button","style","width","marginBottom","type","ghost","map","index","ActiveSessionCard","_extends","key","LoadingPage","memo"],"sourceRoot":""}