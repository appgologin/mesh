{"version":3,"file":"661.renderer.js","mappings":"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","sources":["webpack://GoLogin/./src/app/features/folders/components/folder-new-button/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folder-new-button/index.tsx","webpack://GoLogin/./src/app/features/folders/components/folder-new-input/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folder-new-input/index.tsx","webpack://GoLogin/./src/app/features/folders/components/folders-empty/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folders-empty/index.tsx","webpack://GoLogin/./src/app/features/folders/constants.ts","webpack://GoLogin/./src/app/features/folders/components/folder-name/name-wrapper/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folder-name/name-wrapper/index.tsx","webpack://GoLogin/./src/app/features/folders/components/folder-name/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folder-edit-input/styles.ts","webpack://GoLogin/./src/app/features/folders/components/folder-edit-input/index.tsx","webpack://GoLogin/./src/app/features/folders/components/folder-name/index.tsx","webpack://GoLogin/./src/app/ui/icons/IconDeleteFolder.tsx","webpack://GoLogin/./src/app/ui/icons/IconPencilFolder.tsx","webpack://GoLogin/./src/app/features/folders/components/sort-container.tsx","webpack://GoLogin/./src/app/features/folders/components/folders-container.tsx","webpack://GoLogin/./src/app/features/quickProfiles/no-profiles-placeholder/styles.ts","webpack://GoLogin/./src/app/ui/icons/IconDelete.tsx","webpack://GoLogin/./src/app/ui/icons/IconReplace.tsx","webpack://GoLogin/./src/app/utils/drag-sort.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nimport { FirstProfileButtonContainer } from '../../../quickProfiles/no-profiles-placeholder/styles';\r\n\r\nexport const FolderNewButtonWrapper = styled(FirstProfileButtonContainer)`\r\n  height: 28px;\r\n  padding: 4px 12px 4px 9px;\r\n  border-color: var(--E9E9E7-folders-page-folder-new-button);\r\n  margin: 0;\r\n\r\n  display: inline-flex;\r\n  gap: 0;\r\n  \r\n  span {\r\n    margin-left: 6px;\r\n  }\r\n\r\n  &, svg {\r\n    transition: border 300ms ease-in-out, stroke 300ms ease-in-out;\r\n  }\r\n\r\n  &:hover {\r\n    border-color: var(--2B2B31-folders-page-folder-new-button);\r\n\r\n    svg {\r\n      stroke: var(--2B2B31-folders-page-folder-new-button);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { FolderNewButtonWrapper } from './styles';\r\nimport { IconPlus } from '../../../../ui/gologin-header/icons';\r\nimport { blackMain, greyInformers } from '../../../../ui/style-templates/colors';\r\n\r\ninterface IFolderNewButton {\r\n  isClickAvailable?: boolean;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst FolderNewButton: React.FC<IFolderNewButton> = (props) => {\r\n  const { isClickAvailable = true, handleClick } = props;\r\n  const { t: translation } = useTranslation();\r\n\r\n  return (\r\n    <FolderNewButtonWrapper onClick={handleClick} style={{ cursor: isClickAvailable ? 'pointer' : 'default' }}>\r\n      <IconPlus padding={0} styleType='lightGray' iconColor='var(--B5B5BA-folders-page-folder-new-button)' />\r\n      <span style={{ color: 'var(--2B2B31-folders-page-folder-new-button)' }}>\r\n        {translation('folders.createForm.addButton')}\r\n      </span>\r\n    </FolderNewButtonWrapper>\r\n  );\r\n};\r\n\r\nexport default FolderNewButton;\r\n","import styled from '@emotion/styled';\r\n\r\nimport { textFont } from '../../../../ui/style-templates';\r\nimport { blackMain, greyInformers } from '../../../../ui/style-templates/colors';\r\n\r\nexport const InputWrapper = styled('div')`\r\n  width: 489px;\r\n  height: 32px;\r\n  margin-top: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const IconsWrapper = styled('div')`\r\n  padding-left: 2px;\r\n  display: flex;\r\n`;\r\n\r\nexport const Input = styled('input')`\r\n  width: 343px;\r\n  padding: 0;\r\n  border: none;\r\n  outline: none;\r\n\r\n  background: transparent;\r\n  ${textFont};\r\n  line-height: 16px;\r\n  color: var(--2B2B31-folders-page-folder-new-input);\r\n  \r\n  &::placeholder {\r\n    color: var(--B5B5BA-folders-page-folder-new-input);\r\n  }\r\n`;\r\n","import { message } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { IconsWrapper, Input, InputWrapper } from './styles';\r\nimport { IFolder } from '../../../../interfaces';\r\nimport { IconDragNDrop, IconFolder } from '../../../../ui/gologin-header/icons';\r\nimport { greyInformers } from '../../../../ui/style-templates/colors';\r\n\r\ninterface IFolderNewInput {\r\n  isVisible: boolean;\r\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\r\n  handleEditCompleted: (folderName: string) => Promise<void>|void;\r\n  otherFolders: IFolder[];\r\n  inputRef: React.RefObject<HTMLInputElement>;\r\n}\r\n\r\nconst FolderNewInput: React.FC<IFolderNewInput> = (props) => {\r\n  const { isVisible, setIsVisible, handleEditCompleted, otherFolders = [], inputRef } = props;\r\n  const [folderName, setFolderName] = useState<string>('');\r\n  const { t: translation } = useTranslation();\r\n\r\n  const saveFolderNew = async (event: React.KeyboardEvent<HTMLInputElement>|React.FocusEvent<HTMLInputElement>, name: string): Promise<void> => {\r\n    const doesFolderExist = otherFolders.some(({ name: otherFolderName }) => otherFolderName === name);\r\n    if (doesFolderExist) {\r\n      message.error(`Folder \"${name}\" already exists`);\r\n\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    await handleEditCompleted(name);\r\n    setFolderName('');\r\n  };\r\n\r\n  const handleKeyDownEnter = async (event: React.KeyboardEvent<HTMLInputElement>): Promise<void> => {\r\n    if (!folderName) {\r\n      message.error(translation('notifications.error.emptyFolder'));\r\n\r\n      return;\r\n    }\r\n\r\n    await saveFolderNew(event, folderName);\r\n  };\r\n\r\n  const handleKeyDownBackspace = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.currentTarget.value) {\r\n      return;\r\n    }\r\n\r\n    setIsVisible(false);\r\n  };\r\n\r\n  const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (event): void => {\r\n    switch (event.key) {\r\n      case 'Enter':\r\n        handleKeyDownEnter(event);\r\n        break;\r\n      case 'Backspace':\r\n        handleKeyDownBackspace(event);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleBlur: React.FocusEventHandler<HTMLInputElement> = async (event) => {\r\n    if (event.currentTarget.value?.trim()) {\r\n      await saveFolderNew(event, event.currentTarget.value?.trim());\r\n    }\r\n\r\n    setIsVisible(false);\r\n    setFolderName('');\r\n  };\r\n\r\n  return isVisible ? (\r\n    <InputWrapper>\r\n      <IconsWrapper className='noselect'>\r\n        <IconDragNDrop iconColor='var(--B5B5BA-folders-page-folder-new-input)' />\r\n        <IconFolder iconColor='var(--B5B5BA-folders-page-folder-new-input)' margin='0 0 0 -8px' />\r\n      </IconsWrapper>\r\n      <Input\r\n        ref={inputRef}\r\n        value={folderName}\r\n        placeholder={translation('folders.createForm.inputPlaceholder') || 'New folder name'}\r\n        onChange={({ target }): void => setFolderName(target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        onBlur={handleBlur}\r\n        autoFocus={true}\r\n      />\r\n    </InputWrapper>\r\n  ) : null;\r\n};\r\n\r\nexport default FolderNewInput;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nimport { AddFirstProfileTitle } from '../../../quickProfiles/no-profiles-placeholder/styles';\r\n\r\nexport const Wrapper = styled('div')`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: center;\r\n  align-items: center;  \r\n`;\r\n\r\nexport const IconFolderWrapper = styled('div')`\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 0 0 20px;\r\n  \r\n  & > div {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  svg {\r\n    stroke-width: 0.5px;\r\n    transform: scale(4);\r\n  }\r\n`;\r\n\r\nexport const AddFirstFolderTitle = styled(AddFirstProfileTitle)`\r\n  margin-bottom: 32px;\r\n  color: var(--D2D2D5-folders-page-empty);\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { IconFolder } from '../../../../ui/gologin-header/icons';\r\nimport { checkboxes } from '../../../../ui/style-templates/colors';\r\nimport FolderNewButton from '../folder-new-button';\r\nimport { AddFirstFolderTitle, IconFolderWrapper, Wrapper } from './styles';\r\n\r\nconst FIRST_FOLDER_NAME_DEFAULT = 'New folder';\r\n\r\ninterface IFoldersEmpty {\r\n  addNewFolder: (name: string) => Promise<void>;\r\n  setFolderNameToEdit: React.Dispatch<React.SetStateAction<string>>;\r\n  hideFolderNewInput: () => void;\r\n}\r\n\r\nconst FoldersEmpty: React.FC<IFoldersEmpty> = (props) => {\r\n  const { addNewFolder, setFolderNameToEdit, hideFolderNewInput } = props;\r\n  const [isClickAvailable, setIsClickAvailable] = useState(true);\r\n  const { t: translation } = useTranslation();\r\n\r\n  const handleClick = (): void => {\r\n    if (!isClickAvailable) {\r\n      return;\r\n    }\r\n\r\n    setIsClickAvailable(false);\r\n    hideFolderNewInput();\r\n    addNewFolder(FIRST_FOLDER_NAME_DEFAULT);\r\n    setFolderNameToEdit(FIRST_FOLDER_NAME_DEFAULT);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <IconFolderWrapper>\r\n        <IconFolder styleType='lightGray' padding={0} margin='0 0 20px' iconColor='var(--D2D2D5-folders-page-empty)' />\r\n      </IconFolderWrapper>\r\n      <AddFirstFolderTitle>\r\n        {translation('folders.createFirstFolder.noFolders')}\r\n      </AddFirstFolderTitle>\r\n      <FolderNewButton isClickAvailable={isClickAvailable} handleClick={handleClick} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default FoldersEmpty;\r\n","import { NEW_FEATURES } from '../../../../feature-toggle';\r\n\r\nexport const FOLDER_NAME_MAX_WIDTH = NEW_FEATURES.header ? 280 : 200;\r\n","import styled from '@emotion/styled';\r\n\r\nimport { FOLDER_NAME_MAX_WIDTH } from '../../../constants';\r\n\r\nexport const Wrapper = styled('div')`\r\n  max-width: ${FOLDER_NAME_MAX_WIDTH}px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n","import { Tooltip } from 'antd';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { Wrapper } from './styles';\r\nimport { FOLDER_NAME_MAX_WIDTH } from '../../../constants';\r\n\r\ninterface INameWrapper {\r\n  name: string;\r\n  setFolderNameToEdit: (name: string) => void;\r\n}\r\n\r\nconst NameWrapper: React.FC<INameWrapper> = (props) => {\r\n  const { name, setFolderNameToEdit } = props;\r\n  const [shouldShowTooltip, setShouldShowTooltip] = useState(false);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current && ref.current.offsetWidth >= FOLDER_NAME_MAX_WIDTH) {\r\n      setShouldShowTooltip(true);\r\n    }\r\n  }, [ref.current]);\r\n\r\n  const handleClick: React.MouseEventHandler<HTMLSpanElement> = () => setFolderNameToEdit(name);\r\n\r\n  if (!shouldShowTooltip) {\r\n    return (\r\n      <Wrapper ref={ref} onClick={handleClick}>\r\n        {name}\r\n      </Wrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tooltip title={name}>\r\n      <Wrapper ref={ref} onClick={handleClick}>\r\n        {name}\r\n      </Wrapper>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default NameWrapper;\r\n","import css, { SerializedStyles } from '@emotion/css';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { greyInformers } from '../../../../ui/style-templates/colors';\r\n\r\nexport const ProfilesNumberLabel = styled('div')<{ newStyle: boolean }>`\r\n  display: inline-flex;\r\n  margin-left: 8px;\r\n  font-family: Roboto;\r\n  line-height: 16px;\r\n  letter-spacing: 0.25px;\r\n  color: var(--B5B5BA-folders-page-folder-name);\r\n\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    font-size: 14px;\r\n  ` : css`\r\n    font-size: 12px;\r\n  `}\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { Input } from 'antd';\r\n\r\nimport { textFont } from '../../../../ui/style-templates';\r\nimport { blackMain } from '../../../../ui/style-templates/colors';\r\n\r\nexport const InputNew = styled('input')`\r\n  width: 100%;\r\n  padding: 0;\r\n  border-width: 0;\r\n  border-radius: 4px;\r\n  margin-left: 0;\r\n  \r\n  display: flex;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  \r\n  ${textFont()};\r\n  line-height: 16px;\r\n  color: var(--2B2B31-folders-page-edit-input);\r\n  background-color: transparent;\r\n  \r\n  &:focus {\r\n    border: none;\r\n    outline: none;\r\n    color: var(--2B2B31-folders-page-edit-input);\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\nexport const InputOld = styled(Input)`\r\n  margin: -3px 15px 0px 5px;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  width: 230px;\r\n`;\r\n","import { Icon } from 'antd';\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nimport { InputNew, InputOld } from './styles';\r\nimport { NEW_FEATURES } from '../../../../../../feature-toggle';\r\nimport { IFolderName } from '../folder-name';\r\n\r\nconst FolderEditInput: React.FC<IFolderName> = (props) => {\r\n  const { folder, folderNameToEdit, setFolderNameToEdit, profileNameEditInput, changeFolderNameToEdit, saveFolderName } = props;\r\n  const ref = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    ref.current?.select();\r\n  }, []);\r\n\r\n  const handleChange: React.FormEventHandler<HTMLInputElement> = (event) => {\r\n    event.preventDefault();\r\n    changeFolderNameToEdit(event.currentTarget.value);\r\n  };\r\n\r\n  const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (event) => {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    saveFolderName(folder.name, event.currentTarget.value?.trim().replace(/\\s+/g, ' ')).then(() => changeFolderNameToEdit(folder.name));\r\n  };\r\n\r\n  const handleSave = (): Promise<void> =>\r\n    saveFolderName(folder.name, profileNameEditInput.trim().replace(/\\s+/g, ' ')).then(() => changeFolderNameToEdit(folder.name));\r\n\r\n  const handleBlur: React.FormEventHandler<HTMLInputElement> = () => setFolderNameToEdit('');\r\n\r\n  if (NEW_FEATURES.header) {\r\n    return (\r\n      <InputNew\r\n        ref={ref}\r\n        value={profileNameEditInput}\r\n        autoFocus={true}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        onBlur={handleBlur}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <InputOld\r\n      size='small'\r\n      value={profileNameEditInput}\r\n      onChange={handleChange}\r\n      onKeyDown={handleKeyDown}\r\n      addonAfter={(\r\n        <div className='edit-folder-icon'>\r\n          <Icon\r\n            type='close'\r\n            onClick={(): void => setFolderNameToEdit(folderNameToEdit)}\r\n          />\r\n          <Icon\r\n            type='save'\r\n            style={{ marginLeft: '5px' }}\r\n            onClick={handleSave}\r\n          />\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FolderEditInput;\r\n","import { Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport NameWrapper from './name-wrapper';\r\nimport { ProfilesNumberLabel } from './styles';\r\nimport { NEW_FEATURES } from '../../../../../../feature-toggle';\r\nimport { IFolder } from '../../../../interfaces';\r\nimport FolderEditInput from '../folder-edit-input';\r\nimport { TextNameFolder } from '../sort-container';\r\n\r\nexport interface IFolderName {\r\n  folder: IFolder;\r\n  folderNameToEdit: string;\r\n  setFolderNameToEdit: (name: string) => void;\r\n  profileNameEditInput: string;\r\n  changeFolderNameToEdit: React.Dispatch<React.SetStateAction<string>>;\r\n  saveFolderName: (name: string, profileNameEditInput: string) => Promise<void>;\r\n  isProfilesCountShown?: boolean;\r\n}\r\n\r\nconst FolderName: React.FC<IFolderName> = (props) => {\r\n  const {\r\n    folder, folderNameToEdit, setFolderNameToEdit, profileNameEditInput,\r\n    changeFolderNameToEdit, saveFolderName, isProfilesCountShown,\r\n  } = props;\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  if (folder.name === folderNameToEdit) {\r\n    return (\r\n      <FolderEditInput\r\n        folder={folder}\r\n        folderNameToEdit={folderNameToEdit}\r\n        setFolderNameToEdit={setFolderNameToEdit}\r\n        profileNameEditInput={profileNameEditInput}\r\n        changeFolderNameToEdit={changeFolderNameToEdit}\r\n        saveFolderName={saveFolderName}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TextNameFolder newStyle={!!NEW_FEATURES.header}>\r\n      <NameWrapper name={folder.name} setFolderNameToEdit={setFolderNameToEdit} />\r\n      <Tooltip title={translation('folders.tooltip.profilesNumber')}>\r\n        <ProfilesNumberLabel newStyle={!!NEW_FEATURES.header}>\r\n          {isProfilesCountShown ? (\r\n            <>\r\n              {folder.associatedProfiles?.length || 0}\r\n            </>\r\n          ) : null}\r\n        </ProfilesNumberLabel>\r\n      </Tooltip>\r\n    </TextNameFolder>\r\n  );\r\n};\r\n\r\nexport default FolderName;\r\n","import React from 'react';\r\n\r\nconst IconFolder = () => (\r\n    <svg width=\"19\" height=\"17\" viewBox=\"0 0 19 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M0 0.447315L4 0L5 0.447315L6.23959 1.44067L19 1.93986V17H0V0.447315Z\" fill=\"var(--828B93)\"/>\r\n</svg>\r\n);\r\n\r\nexport default IconFolder;\r\n","import React from 'react';\r\n\r\nconst IconPencilFolder = () => (\r\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <path d=\"M14.8074 4.63833L14.1282 5.31792L10.0521 1.24249L10.7314 0.562837C11.4818 -0.187612 12.6986 -0.187612 13.449 0.562837L14.8074 1.92161C15.5568 2.67165 15.5568 3.88794 14.8074 4.63833ZM5.29715 12.7887C5.10957 12.9763 5.10957 13.2801 5.29715 13.4677C5.48483 13.6563 5.78878 13.6563 5.97636 13.4677L13.449 5.9971L12.769 5.31744L5.29715 12.7887ZM1.90052 9.39284C1.71284 9.58058 1.71284 9.88425 1.90052 10.072C2.0881 10.2596 2.39205 10.2596 2.57973 10.072L10.0521 2.60082L9.37316 1.92161L1.90052 9.39284ZM10.7305 3.27952L3.25878 10.7511C2.88359 11.1256 2.88454 11.7343 3.25878 12.1095C3.63414 12.4848 4.24192 12.4865 4.6181 12.1085L12.0898 4.63833L10.7305 3.27952ZM4.61616 14.1451C4.38642 13.9151 4.27569 13.6236 4.23448 13.3232C4.13682 13.3383 4.03847 13.3523 3.938 13.3523C3.42479 13.3523 2.94279 13.1517 2.57973 12.7887C2.21667 12.4247 2.01686 11.9434 2.01686 11.4302C2.01686 11.3367 2.03089 11.2455 2.04407 11.1545C1.73356 11.1123 1.44655 10.9762 1.2214 10.7511C1.1998 10.7297 1.19235 10.7006 1.17268 10.677L0 15.3692L4.67996 14.1977C4.65934 14.1789 4.63599 14.1648 4.61616 14.1451Z\" fill=\"var(--747474)\"/>\r\n  </svg>\r\n  \r\n);\r\n\r\nexport default IconPencilFolder;\r\n","import css, { SerializedStyles } from '@emotion/css';\r\nimport styled from '@emotion/styled';\r\nimport { Popconfirm, Tooltip } from 'antd';\r\nimport React, { FC, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SortableHandle } from 'react-sortable-hoc';\r\n\r\nimport FolderName from './folder-name';\r\nimport { NEW_FEATURES } from '../../../../../feature-toggle';\r\nimport { IconBinTrashDelete, IconDragNDrop, IconFolder as IconFolderNew, IconShare } from '../../../ui/gologin-header/icons';\r\nimport IconAddMembers from '../../../ui/icons/IconAddMembers';\r\nimport IconDelete from '../../../ui/icons/IconDelete';\r\nimport IconFolder from '../../../ui/icons/IconDeleteFolder';\r\nimport IconPencilFolder from '../../../ui/icons/IconPencilFolder';\r\nimport IconReplace from '../../../ui/icons/IconReplace';\r\nimport { blackMain, greyInformers, greyLight } from '../../../ui/style-templates/colors';\r\n\r\nconst MarginIconPencil = styled('div')``;\r\n\r\nconst MarginIconDelete = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    margin: 0;\r\n  ` : css`\r\n    margin-left: 17px;\r\n    margin-right: 17px;\r\n  `};\r\n`;\r\n\r\nconst MarginAddMemberDiv = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    margin: 0;\r\n    visibility: visible;\r\n  ` : css`\r\n    margin-left: 17px;\r\n    cursor: pointer\r\n  `};\r\n`;\r\n\r\nconst Row = styled('div')<{ newStyle: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    height: 32px;\r\n    align-items: center;\r\n    \r\n    &:not(:last-of-type) {\r\n      margin-bottom: 8px;\r\n    }\r\n  ` : css`\r\n    margin: 3px 0px 10px 0px;\r\n  `};\r\n`;\r\n\r\nconst MarginIcon = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    margin: 0 0 0 -8px;\r\n  ` : css`\r\n    margin-left: 10px;\r\n    margin-top: 1px;\r\n  `};\r\n`;\r\n\r\nexport const TextNameFolder = styled('div')<{ newStyle: boolean }>`\r\n  font-family: Roboto;\r\n  display: flex;\r\n\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    height: 16px;\r\n    flex-grow: 1;\r\n\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    letter-spacing: 0.25px;\r\n    color: var(--2B2B31-folders-page-sort-container);\r\n  ` : css`\r\n    font-size: 12px;\r\n    line-height: 14px;\r\n    white-space: nowrap;\r\n    color: var(--000000-folders-page-sort-container);\r\n    opacity: 0.8;\r\n    margin-top: 2px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    width: 245px;\r\n    margin-left: 5px;\r\n  `};\r\n`;\r\n\r\nconst MarginIconSort = styled('div')`\r\n`;\r\n\r\ndeclare interface IFolderNameContainer {\r\n  value: any;\r\n  folderNameToEdit: string;\r\n  setShareFolderVisible: (state: boolean) => void;\r\n  setFolderNameToShare: (name: string) => void;\r\n  setFolderIdToShare: (name: string) => void;\r\n  setFolderNameToEdit: (name: string) => void;\r\n  saveFolderName: (name: string, profileNameEditInput: string) => Promise<void>;\r\n  removeSelectedFolder: (name: string) => Promise<void>;\r\n  isProfilesCountShown?: boolean;\r\n  openInviteModal: (name: string) => void;\r\n}\r\n\r\nexport const FolderContainer: FC<IFolderNameContainer> = (props) => {\r\n  const { openInviteModal } = props;\r\n\r\n  const [profileNameEditInput, setProfileNameEditInput] = useState<string>(props.value.name);\r\n  const [isTooltipDeleteVisible, setIsTooltipDeleteVisible] = useState(false);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const DragHandle = SortableHandle<React.FC>(() => (<IconDragNDrop\r\n    margin='0 0 0 2px'\r\n    iconType='fill'\r\n    iconHoveredColor='var(--2B2B31-folders-page-sort-container)'\r\n    iconColor='var(--B5B5BA-folders-page-sort-container)'\r\n  />));\r\n\r\n  const changeProfileNameToEdit = (name: string) => {\r\n    let nameToEdit = name;\r\n    let editNameInput = name;\r\n    if (props.folderNameToEdit === name) {\r\n      nameToEdit = '';\r\n      editNameInput = '';\r\n    }\r\n\r\n    setProfileNameEditInput(editNameInput);\r\n    props.setFolderNameToEdit(nameToEdit);\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      newStyle={!!NEW_FEATURES.header}\r\n      key={props.value.name}\r\n    >\r\n      <Tooltip title={translation('base.move')}>\r\n        <MarginIconSort\r\n          style={{ cursor: 'pointer' }}\r\n        >\r\n          {NEW_FEATURES.header ? <DragHandle /> : <IconReplace />}\r\n        </MarginIconSort>\r\n      </Tooltip>\r\n      <MarginIcon newStyle={!!NEW_FEATURES.header}>\r\n        {NEW_FEATURES.header ? <IconFolderNew iconColor='var(--B5B5BA-folders-page-sort-container)' /> : <IconFolder />}\r\n      </MarginIcon>\r\n      <FolderName\r\n        folder={props.value}\r\n        folderNameToEdit={props.folderNameToEdit}\r\n        setFolderNameToEdit={changeProfileNameToEdit}\r\n        profileNameEditInput={profileNameEditInput}\r\n        changeFolderNameToEdit={setProfileNameEditInput}\r\n        saveFolderName={props.saveFolderName}\r\n        isProfilesCountShown={props.isProfilesCountShown}\r\n      />\r\n      <Tooltip title={translation('folders.list.rename')}>\r\n        {NEW_FEATURES.header ? null : (\r\n          <MarginIconPencil\r\n            onClick={() => changeProfileNameToEdit(props.value.name)}\r\n            style={{ cursor: 'pointer' }}\r\n            className='edit-folder-container'\r\n          >\r\n            <IconPencilFolder />\r\n          </MarginIconPencil>\r\n        )}\r\n      </Tooltip>\r\n      <Tooltip title={translation('folders.list.sharing')}>\r\n        <MarginAddMemberDiv\r\n          newStyle={!!NEW_FEATURES.header}\r\n          style={{ cursor: 'pointer' }}\r\n          className='edit-folder-container'\r\n          onClick={(): void => {\r\n            if (NEW_FEATURES.workspaceInviteInFolders) {\r\n              openInviteModal(props.value.name);\r\n\r\n              return;\r\n            }\r\n\r\n            props.setFolderNameToShare(props.value.name);\r\n            props.setFolderIdToShare(props.value.id);\r\n            props.setShareFolderVisible(true);\r\n          }}\r\n        >\r\n          {NEW_FEATURES.header ? (\r\n            <IconShare\r\n              iconType='stroke'\r\n              iconHoveredColor='var(--2B2B31-folders-page-sort-container)'\r\n              iconColor='var(--98989F-folders-page-sort-container)'\r\n              hoveredHighlight={true}\r\n            />\r\n          ) : <IconAddMembers />}\r\n        </MarginAddMemberDiv>\r\n      </Tooltip>\r\n      <Tooltip title={translation('base.delete')} visible={isTooltipDeleteVisible}>\r\n        <Popconfirm\r\n          placement='top'\r\n          title={translation('folders.list.deleteConfirmationText')}\r\n          onConfirm={() => props.removeSelectedFolder(props.value.name)}\r\n          okText={translation('base.yes')}\r\n          cancelText={translation('base.no')}\r\n          onVisibleChange={(): void => setIsTooltipDeleteVisible(false)}\r\n        >\r\n          <MarginIconDelete\r\n            newStyle={!!NEW_FEATURES.header}\r\n            className='edit-folder-container'\r\n            style={{ cursor: 'pointer' }}\r\n            onMouseEnter={(): void => setIsTooltipDeleteVisible(true)}\r\n            onMouseLeave={(): void => setIsTooltipDeleteVisible(false)}\r\n          >\r\n            {NEW_FEATURES.header ? (\r\n              <IconBinTrashDelete\r\n                iconType='stroke'\r\n                iconHoveredColor='var(--2B2B31-folders-page-sort-container)'\r\n                iconColor='var(--98989F-folders-page-sort-container)'\r\n                hoveredHighlight={true}\r\n              />\r\n            ) : <IconDelete />}\r\n          </MarginIconDelete>\r\n        </Popconfirm>\r\n      </Tooltip>\r\n    </Row>\r\n  );\r\n};\r\n","import css, { SerializedStyles } from '@emotion/css';\r\nimport styled from '@emotion/styled';\r\nimport { Button, Icon, Input, message } from 'antd';\r\nimport React, { FC, useContext, useEffect, useRef, useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\n\r\nimport FolderNewButton from './folder-new-button';\r\nimport FolderNewInput from './folder-new-input';\r\nimport FoldersEmpty from './folders-empty';\r\nimport ShareFolderModal from './share-folder-modal';\r\nimport { FolderContainer } from './sort-container';\r\nimport { NEW_FEATURES } from '../../../../../feature-toggle';\r\nimport { IFolder } from '../../../interfaces';\r\nimport { IWorkspaceFolder } from '../../../interfaces/workspaces';\r\nimport { userContext, workspaceContext } from '../../../state';\r\nimport Header from '../../../ui/Header/index';\r\nimport { borderRadiusContainer } from '../../../ui/style-templates';\r\nimport sortArrayAfterDrag from '../../../utils/drag-sort';\r\nimport { requestWorkspace, sendActionAnalytics } from '../../common/api';\r\nimport InviteMembersModal from '../../modalsComponents/components/invite-members';\r\nimport { ITabFolder } from '../../quickProfiles/components/tab-profile';\r\nimport {\r\n  addFolder,\r\n  changeFoldersOrder,\r\n  changeWorkspaceFolderOrder,\r\n  createWorkspaceFolder,\r\n  getFoldersList,\r\n  IFolderOrder,\r\n  removeFolder,\r\n  removeWorkspaceFolder,\r\n  renameFolder,\r\n  renameWorkspaceFolder,\r\n} from '../api';\r\n\r\nconst Container = styled('div')<{ newStyle: boolean }>`\r\n  ${props => props.newStyle && borderRadiusContainer()};\r\n  height: 100%;\r\n  background-color: var(--FFFFFF-folders-page);\r\n`;\r\n\r\nconst MainContainer = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    height: calc(100% - 39px);\r\n    padding-bottom: 65px;\r\n    margin: 39px 39px 0 39px;\r\n  ` : css`\r\n    padding-top: 30px;\r\n    margin-left: 90px;\r\n  `};\r\n`;\r\n\r\nconst PageTitle = styled('h1')<{ newStyle: boolean }>`\r\n  font-family: Roboto;\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    margin-right: 24px;\r\n    display: inline;\r\n    font-weight: 400;\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n    letter-spacing: 0.25px;\r\n    color: var(--2B2B31-folders-page);\r\n  ` : css`\r\n    font-size: 20px;\r\n  `};\r\n`;\r\n\r\nconst Text = styled('div')`\r\n  font-size: 12px;\r\n  color: var(--000000-folders-page);\r\n  opacity: 0.8;\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst ContainerNameFolder = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    width: 465px;\r\n  ` : css`\r\n    min-height: 90px;\r\n    width: 390px;\r\n    height: calc(100vh - 400px);\r\n    margin-top: 22px;\r\n    overflow: auto;\r\n  `};\r\n`;\r\n\r\nconst ButtonCreateFolder = styled(Button)`\r\n  font-size: 12px;\r\n  margin-top: 8px;\r\n  color: var(--1FC47D-folders-page);\r\n  border-color: var(--1FC47D-folders-page);\r\n\r\n  :hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled('div')<{ newStyle: boolean }>`\r\n  ${({ newStyle }): SerializedStyles => newStyle ? css`\r\n    margin-top: 20px;\r\n  ` : css``};\r\n`;\r\n\r\nconst FolderPage: FC = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [foldersList, setFoldersList] = useState<IFolder[]>([]);\r\n  const [foldersFromApi, setFoldersFromApi] = useState<IFolder[]>([]);\r\n  const [folderNameToEdit, setFolderNameToEdit] = useState<string>('');\r\n  const [folderNameToShare, setFolderNameToShare] = useState<string>('');\r\n  const [folderIdToShare, setFolderIdToShare] = useState<string>('');\r\n  const [shareFolderVisible, setShareFolderVisible] = useState<boolean>(false);\r\n  const [isFolderNewInputVisible, setIsFolderNewInputVisible] = useState<boolean>(false);\r\n  const [isLoadingProfileCount, setIsLoadingProfileCount] = useState<boolean>(true);\r\n  const [isInviteModalVisible, setIsInviteModalVisible] = useState<boolean>(false);\r\n  const [folderNameToInvite, setFolderNameToInvite] = useState<string>('');\r\n\r\n  const folderNewInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const {\r\n    folders,\r\n    updateFolders,\r\n    sharedFolders,\r\n    defaultWorkspace,\r\n    selectedFolder: selectedFolderFromCtx,\r\n    updateSelectedFolder,\r\n  } = useContext(userContext);\r\n\r\n  const {\r\n    isLoaded: workspaceIsLoaded,\r\n    id: workspaceId,\r\n    updateWorkspace,\r\n  } = useContext(workspaceContext);\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const isUseFoldersFromCtx = NEW_FEATURES.workspaces || NEW_FEATURES.header;\r\n  const foldersListWhenToggle = isUseFoldersFromCtx ? folders : foldersList;\r\n  const selectedFolderWhenToggle = isUseFoldersFromCtx ? selectedFolderFromCtx : localStorage.getItem('SelectedFolder');\r\n\r\n  const getFolders = async () => {\r\n    const folders: any = await getFoldersList();\r\n    setFoldersFromApi(folders);\r\n    const rawCachedFolders = localStorage.getItem('folders-order');\r\n    const cachedFolders: any[] = rawCachedFolders ? JSON.parse(rawCachedFolders) : folders;\r\n    const orderedFolders = cachedFolders.map((elem: any, index: number) => ({ order: index +1, ...elem }));\r\n    orderedFolders.sort((a: any, b: any) => a.order - b.order);\r\n\r\n    setIsLoading(false);\r\n    setIsLoadingProfileCount(false);\r\n    setFoldersList(orderedFolders);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (NEW_FEATURES.header) {\r\n      setIsLoading(false);\r\n    }\r\n\r\n    if (NEW_FEATURES.workspaces) {\r\n      return;\r\n    }\r\n\r\n    getFolders();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!(NEW_FEATURES.workspaces && workspaceIsLoaded)) {\r\n      return;\r\n    }\r\n\r\n    setIsLoadingProfileCount(true);\r\n    refreshWorkspace();\r\n  }, [workspaceId, workspaceIsLoaded]);\r\n\r\n  const refreshWorkspace = async (): Promise<void> => {\r\n    const workspaceData = await requestWorkspace(workspaceId);\r\n    updateWorkspace({ ...workspaceData });\r\n\r\n    let { folders: newFolders }: { folders: ITabFolder[] } = workspaceData;\r\n    if (sharedFolders && defaultWorkspace === workspaceId) {\r\n      newFolders = newFolders.concat(sharedFolders);\r\n    }\r\n\r\n    updateFolders(newFolders);\r\n    setIsLoadingProfileCount(false);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const openInviteModal = (folderName: string): void => {\r\n    setIsInviteModalVisible(true);\r\n    setFolderNameToInvite(folderName);\r\n  };\r\n\r\n  const SortableItem = SortableElement(({ value }: any) => (\r\n    <FolderContainer\r\n      value={value}\r\n      setShareFolderVisible={setShareFolderVisible}\r\n      setFolderNameToShare={setFolderNameToShare}\r\n      setFolderIdToShare={setFolderIdToShare}\r\n      saveFolderName={saveFolderName}\r\n      removeSelectedFolder={removeSelectedFolder}\r\n      folderNameToEdit={folderNameToEdit}\r\n      setFolderNameToEdit={setFolderNameToEdit}\r\n      isProfilesCountShown={!isLoadingProfileCount}\r\n      openInviteModal={openInviteModal}\r\n    />\r\n  ));\r\n\r\n  const SortableList = SortableContainer(({ items }: { items: IFolder[] }) => (\r\n    <ContainerNameFolder newStyle={!!NEW_FEATURES.header}>\r\n      {items.map((value, index: number) => {\r\n        let { associatedProfiles } = value;\r\n        if (!NEW_FEATURES.workspaces) {\r\n          const folderFromApi = foldersFromApi.find(({ name }) => name === value.name);\r\n          ({ associatedProfiles } = folderFromApi || { associatedProfiles: [] });\r\n        }\r\n\r\n        return (\r\n          <SortableItem\r\n            key={`item-${value.name}`}\r\n            index={index}\r\n            value={{ ...value, associatedProfiles }}\r\n          />\r\n        );\r\n      })}\r\n    </ContainerNameFolder>\r\n  ));\r\n\r\n  const onSortEnd = async ({ oldIndex, newIndex }: any) => {\r\n    if (oldIndex === newIndex) {\r\n      return;\r\n    }\r\n\r\n    const newFoldersArray = sortArrayAfterDrag(foldersListWhenToggle, oldIndex, newIndex)\r\n      .map((f, i) => ({\r\n        ...f,\r\n        order: i + 1,\r\n      }));\r\n\r\n    sendActionAnalytics('changed folder place').catch(() => null);\r\n\r\n    if (isUseFoldersFromCtx) {\r\n      updateFolders(newFoldersArray);\r\n    }\r\n\r\n    setFoldersList(newFoldersArray);\r\n    localStorage.setItem('folders-order', JSON.stringify(newFoldersArray));\r\n    if (NEW_FEATURES.workspaces) {\r\n      const updatedFolderOrders = newFoldersArray.reduce<IFolderOrder[]>((acc, el) => {\r\n        if (!el.shared) {\r\n          acc.push({ name: el.name, order: el.order });\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      await changeWorkspaceFolderOrder(workspaceId, updatedFolderOrders);\r\n      await refreshWorkspace();\r\n    } else {\r\n      const updatedFolderOrders = newFoldersArray.map(el => ({ name: el.name, order: el.order }));\r\n      await changeFoldersOrder(updatedFolderOrders);\r\n    }\r\n  };\r\n\r\n  const shouldCancelStart = (e: any) => {\r\n    const targetTag = e.target.tagName;\r\n    let clickedOnFunctionalIcon = false;\r\n    let elem = e.target;\r\n    let attempts = 4;\r\n    while (elem && attempts--) {\r\n      const currentElemClass = elem.getAttribute('class');\r\n      if (currentElemClass && currentElemClass.includes('edit-folder')) {\r\n        clickedOnFunctionalIcon = true;\r\n        break;\r\n      }\r\n\r\n      elem = elem.parentNode ? elem.parentNode : null;\r\n    }\r\n\r\n    return clickedOnFunctionalIcon || ['input', 'textarea', 'select', 'option'].includes(targetTag.toLowerCase());\r\n  };\r\n\r\n  const addNewFolder = async (inputFolderName: string) => {\r\n    inputFolderName = inputFolderName.replace(/\\s+/g, ' ');\r\n    if (!(inputFolderName || '').trim()) {\r\n      message.error(translation('notifications.error.emptyFolder'));\r\n\r\n      return;\r\n    }\r\n\r\n    const existedFolder = foldersListWhenToggle.find(folder => folder.name === inputFolderName);\r\n    if (existedFolder) {\r\n      const symbolsForEllipsis = 30;\r\n      const folderName = inputFolderName.length > symbolsForEllipsis ? `${inputFolderName.substr(0, symbolsForEllipsis)}...` : inputFolderName;\r\n      message.error(`Folder \"${folderName}\" already exists`);\r\n\r\n      return;\r\n    }\r\n\r\n    let createdFolder;\r\n    if (NEW_FEATURES.workspaces) {\r\n      createdFolder = await createWorkspaceFolder(workspaceId, inputFolderName);\r\n    } else {\r\n      createdFolder = await addFolder(inputFolderName, []);\r\n    }\r\n\r\n    if (isUseFoldersFromCtx) {\r\n      setIsLoading(true);\r\n\r\n      let newFolders = foldersListWhenToggle;\r\n      if (!NEW_FEATURES.workspaces) {\r\n        newFolders = folders;\r\n      }\r\n\r\n      newFolders.push({ ...createdFolder, order: newFolders.length });\r\n      localStorage.setItem('folders-order', JSON.stringify(newFolders));\r\n\r\n      updateFolders(newFolders);\r\n      setIsLoading(false);\r\n\r\n      if (NEW_FEATURES.workspaces) {\r\n        await refreshWorkspace();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const rawCachedFolders = localStorage.getItem('folders-order');\r\n    const cachedFolders: any[] = rawCachedFolders ? JSON.parse(rawCachedFolders) : [];\r\n\r\n    setIsLoading(true);\r\n\r\n    cachedFolders.push({ name: createdFolder.name, order: cachedFolders.length, id: createdFolder.id });\r\n    localStorage.setItem('folders-order', JSON.stringify(cachedFolders));\r\n\r\n    getFolders();\r\n  };\r\n\r\n  const ent = (event: any, inputFolderName: string) => {\r\n    if (event.key === 'Enter') {\r\n      addNewFolder(inputFolderName);\r\n    }\r\n  };\r\n\r\n  const removeSelectedFolder = async (name: string) => {\r\n    const rawCachedFolders = localStorage.getItem('folders-order');\r\n    let cachedFolders: any[] = rawCachedFolders ? JSON.parse(rawCachedFolders) : [];\r\n    cachedFolders = cachedFolders.filter(f => f.name !== name);\r\n    localStorage.setItem('folders-order', JSON.stringify(cachedFolders));\r\n\r\n    if (selectedFolderWhenToggle === name) {\r\n      updateSelectedFolder('');\r\n      localStorage.setItem('SelectedFolder', 'all');\r\n    }\r\n\r\n    if (NEW_FEATURES.workspaces) {\r\n      await removeWorkspaceFolder(workspaceId, name);\r\n    } else {\r\n      await removeFolder(name);\r\n    }\r\n\r\n    if (isUseFoldersFromCtx) {\r\n      let newFolders = cachedFolders;\r\n      if (NEW_FEATURES.workspaces) {\r\n        newFolders = foldersListWhenToggle.filter(folder => folder.name !== name);\r\n      }\r\n\r\n      updateFolders(newFolders);\r\n      setIsLoading(false);\r\n\r\n      if (NEW_FEATURES.workspaces) {\r\n        await refreshWorkspace();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    await getFolders();\r\n  };\r\n\r\n  const sendRenameFolder = (oldName: string, newName: string): Promise<IWorkspaceFolder> => {\r\n    if (NEW_FEATURES.workspaces) {\r\n      return renameWorkspaceFolder(workspaceId, oldName, newName);\r\n    }\r\n\r\n    return renameFolder(oldName, newName);\r\n  };\r\n\r\n  const saveFolderName = (name: string, profileNameEditInput: string) => {\r\n    if (!(profileNameEditInput || '')) {\r\n      message.error(translation('notifications.error.emptyFolder'));\r\n\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (profileNameEditInput === name) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return sendRenameFolder(name, profileNameEditInput)\r\n      .then(() => {\r\n        const newFolderArray = foldersListWhenToggle.map((folderObj) => ({\r\n          ...folderObj,\r\n          name: folderObj.name === name ? profileNameEditInput : folderObj.name,\r\n        }));\r\n\r\n        localStorage.setItem('folders-order', JSON.stringify(newFolderArray));\r\n\r\n        if (selectedFolderWhenToggle === name) {\r\n          updateSelectedFolder(profileNameEditInput);\r\n          localStorage.setItem('SelectedFolder', profileNameEditInput);\r\n        }\r\n\r\n        if (isUseFoldersFromCtx) {\r\n          updateFolders(newFolderArray);\r\n        }\r\n\r\n        if (NEW_FEATURES.workspaces) {\r\n          refreshWorkspace();\r\n        }\r\n\r\n        setFoldersList(newFolderArray);\r\n        message.success(translation('notifications.success.renameFolder'));\r\n      });\r\n  };\r\n\r\n  const closeShareFolderModal = () => {\r\n    setFolderNameToShare('');\r\n    setFolderIdToShare('');\r\n    setShareFolderVisible(false);\r\n  };\r\n\r\n  const showText = () => {\r\n    if (foldersListWhenToggle.length) {\r\n      return (\r\n        <Text style={{ marginTop: 28 }}>\r\n          {translation('folders.foldersListTitle')}\r\n        </Text>\r\n      );\r\n    }\r\n  };\r\n\r\n  const getContent = () => {\r\n    let inputFolderName = '';\r\n\r\n    if (NEW_FEATURES.header && !foldersListWhenToggle.length) {\r\n      return (\r\n        <FoldersEmpty\r\n          addNewFolder={addNewFolder}\r\n          setFolderNameToEdit={setFolderNameToEdit}\r\n          hideFolderNewInput={(): void => setIsFolderNewInputVisible(false)}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ContentWrapper newStyle={!!NEW_FEATURES.header}>\r\n        {NEW_FEATURES.header ? null : (\r\n          <>\r\n            <Text>\r\n              {translation('folders.createForm.title')}\r\n            </Text>\r\n            <Input\r\n              style={{ width: 276, fontSize: '12px' }}\r\n              placeholder={translation('folders.createForm.nameInputPlaceholder')}\r\n              onChange={(e) => {\r\n                inputFolderName = e.target.value;\r\n              }}\r\n              onKeyDown={(e) => {\r\n                ent(e, inputFolderName);\r\n              }}\r\n            />\r\n            <ButtonCreateFolder\r\n              style={{ marginLeft: '10px' }}\r\n              onClick={() => addNewFolder(inputFolderName)}\r\n            >\r\n              {translation('folders.createForm.submitBtnText')}\r\n            </ButtonCreateFolder>\r\n            {showText()}\r\n          </>\r\n        )}\r\n        <SortableList\r\n          items={foldersListWhenToggle}\r\n          onSortEnd={onSortEnd}\r\n          lockAxis='y'\r\n          lockToContainerEdges\r\n          shouldCancelStart={shouldCancelStart}\r\n          useDragHandle={!!NEW_FEATURES.header}\r\n        />\r\n        {NEW_FEATURES.header ? (\r\n          <FolderNewInput\r\n            isVisible={isFolderNewInputVisible}\r\n            setIsVisible={setIsFolderNewInputVisible}\r\n            handleEditCompleted={addNewFolder}\r\n            otherFolders={foldersListWhenToggle}\r\n            inputRef={folderNewInputRef}\r\n          />\r\n        ) : null}\r\n      </ContentWrapper>\r\n    );\r\n  };\r\n\r\n  const isFolderPageHeaderHidden = (isLoading || !folders.length) && NEW_FEATURES.header;\r\n\r\n  const handleFolderNewButtonClick = (): void => isFolderNewInputVisible ?\r\n    folderNewInputRef.current?.select() : setIsFolderNewInputVisible(true);\r\n\r\n  return (\r\n    <>\r\n      <Container newStyle={!!NEW_FEATURES.header}>\r\n        <Header />\r\n        <MainContainer newStyle={!!NEW_FEATURES.header}>\r\n          {isFolderPageHeaderHidden ? null : (\r\n            <>\r\n              <PageTitle newStyle={!!NEW_FEATURES.header}>\r\n                {translation('folders.title')}\r\n              </PageTitle>\r\n              {NEW_FEATURES.header ? <FolderNewButton handleClick={handleFolderNewButtonClick} /> : null}\r\n            </>\r\n          )}\r\n          {isLoading ? <div style={{ fontSize: 32 }}>\r\n            <Icon type='loading' />\r\n                       </div> : getContent()}\r\n        </MainContainer>\r\n        <Helmet>\r\n          {/* @ts-ignore */}\r\n          <title>\r\n            {translation('folders.title')}\r\n            {' '}\r\n            - GoLogin\r\n            {' '}\r\n            {window.gologinAppVersion || ''}\r\n          </title>\r\n        </Helmet>\r\n      </Container>\r\n      <ShareFolderModal\r\n        shareFolderVisible={shareFolderVisible}\r\n        shareFolder={folderNameToShare}\r\n        foldersIdsToShare={[folderIdToShare]}\r\n        onClose={closeShareFolderModal}\r\n      />\r\n      <InviteMembersModal\r\n        visible={isInviteModalVisible}\r\n        onClose={(): void => setIsInviteModalVisible(false)}\r\n        initWithFolderName={folderNameToInvite}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FolderPage;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const AddFirstProfileTitle = styled.span`\r\n  font-family: 'Roboto';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n  color: var(--B5B5BA-profile-table);\r\n`;\r\n\r\nexport const FirstProfileButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 6px 12px;\r\n  gap: 8px;\r\n  width: fit-content;\r\n  height: 32px;\r\n  border: 1px solid var(--EBEBEB-profile-table);\r\n  border-radius: 16px;\r\n  margin: 32px auto auto;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nexport interface IIconDelete {\r\n    style?: React.CSSProperties;\r\n  }\r\n\r\nconst IconDelete = () => (\r\n<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M1 3.5C0.723858 3.5 0.5 3.72386 0.5 4C0.5 4.27614 0.723858 4.5 1 4.5V3.5ZM15 4.5C15.2761 4.5 15.5 4.27614 15.5 4C15.5 3.72386 15.2761 3.5 15 3.5V4.5ZM2.99953 3.97828C2.98753 3.7024 2.75416 3.48848 2.47828 3.50047C2.2024 3.51247 1.98848 3.74584 2.00047 4.02172L2.99953 3.97828ZM3 15.5L2.50047 15.5217C2.5121 15.7892 2.7323 16 3 16V15.5ZM13 15.5V16C13.2677 16 13.4879 15.7892 13.4995 15.5217L13 15.5ZM13.9995 4.02172C14.0115 3.74584 13.7976 3.51247 13.5217 3.50047C13.2458 3.48848 13.0125 3.7024 13.0005 3.97828L13.9995 4.02172ZM4 1V0.5C3.72386 0.5 3.5 0.723858 3.5 1H4ZM12 1H12.5C12.5 0.723858 12.2761 0.5 12 0.5V1ZM1 4.5H15V3.5H1V4.5ZM2.00047 4.02172L2.50047 15.5217L3.49953 15.4783L2.99953 3.97828L2.00047 4.02172ZM3 16H13V15H3V16ZM13.4995 15.5217L13.9995 4.02172L13.0005 3.97828L12.5005 15.4783L13.4995 15.5217ZM4.5 4V1H3.5V4H4.5ZM4 1.5H12V0.5H4V1.5ZM11.5 1V4H12.5V1H11.5Z\" fill=\"var(--747474)\"/>\r\n</svg>\r\n\r\n);\r\n\r\nexport default IconDelete;\r\n","import React from 'react';\r\n\r\nconst IconReplace = () => (\r\n    <svg width=\"8\" height=\"12\" viewBox=\"0 0 6 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <circle cx=\"1\" cy=\"1\" r=\"1\" fill=\"var(--929292)\"/>\r\n    <circle cx=\"5\" cy=\"1\" r=\"1\" fill=\"var(--929292)\"/>\r\n    <circle cx=\"1\" cy=\"5\" r=\"1\" fill=\"var(--929292)\"/>\r\n    <circle cx=\"5\" cy=\"5\" r=\"1\" fill=\"var(--929292)\"/>\r\n    <circle cx=\"1\" cy=\"9\" r=\"1\" fill=\"var(--929292)\"/>\r\n    <circle cx=\"5\" cy=\"9\" r=\"1\" fill=\"var(--929292)\"/>\r\n    </svg>\r\n);\r\n\r\nexport default IconReplace;\r\n","const sortArrayAfterDrag = <T>(array: T[], oldIndex: number, newIndex: number): T[] => {\r\n  if (oldIndex < 0 || oldIndex >= array.length || newIndex < 0 || newIndex >= array.length) {\r\n    return array;\r\n  }\r\n\r\n  if (oldIndex === newIndex) {\r\n    return array;\r\n  }\r\n\r\n  const isMoveDown = newIndex > oldIndex;\r\n\r\n  const minIndex = isMoveDown ? oldIndex : newIndex;\r\n  const maxIndex = isMoveDown ? newIndex : oldIndex;\r\n\r\n  const newArray: T[] = [];\r\n\r\n  array.forEach((item, i) => {\r\n    // For all items, use same index as before\r\n    let moveToIndex = i;\r\n\r\n    // But\r\n    if (i === oldIndex) {\r\n      // Move main item to desired location\r\n      moveToIndex = newIndex;\r\n    } else if (i >= minIndex && i <= maxIndex) {\r\n      // Move by 1 all affected items reverse to main item move\r\n      moveToIndex = moveToIndex + (isMoveDown ? -1 : 1);\r\n    }\r\n\r\n    newArray[moveToIndex] = item;\r\n  });\r\n\r\n  return newArray;\r\n};\r\n\r\nexport default sortArrayAfterDrag;\r\n"],"names":["FolderNewButtonWrapper","styled","FirstProfileButtonContainer","_templateObject","_taggedTemplateLiteral","props","isClickAvailable","handleClick","t","translation","useTranslation","React","onClick","style","cursor","IconPlus","padding","styleType","iconColor","color","InputWrapper","IconsWrapper","_templateObject2","Input","_templateObject3","textFont","isVisible","setIsVisible","handleEditCompleted","otherFolders","inputRef","folderName","setFolderName","useState","saveFolderNew","_ref","_asyncToGenerator","event","name","some","_ref2","otherFolderName","_message","concat","preventDefault","_x","_x2","apply","arguments","handleKeyDownEnter","_ref3","_x3","handleBlur","_ref4","_event$currentTarget$","_event$currentTarget$2","currentTarget","value","trim","_x4","className","IconDragNDrop","IconFolder","margin","ref","placeholder","onChange","_ref5","target","onKeyDown","key","handleKeyDownBackspace","onBlur","autoFocus","Wrapper","_styled","label","styles","IconFolderWrapper","AddFirstFolderTitle","AddFirstProfileTitle","FIRST_FOLDER_NAME_DEFAULT","addNewFolder","setFolderNameToEdit","hideFolderNewInput","setIsClickAvailable","FolderNewButton","FOLDER_NAME_MAX_WIDTH","NEW_FEATURES","shouldShowTooltip","setShouldShowTooltip","useRef","useEffect","current","offsetWidth","_Tooltip","title","ProfilesNumberLabel","newStyle","css","InputNew","InputOld","_Input","folder","folderNameToEdit","profileNameEditInput","changeFolderNameToEdit","saveFolderName","_ref$current","select","handleChange","handleKeyDown","replace","then","size","addonAfter","_Icon","type","marginLeft","_folder$associatedPro","isProfilesCountShown","FolderEditInput","TextNameFolder","NameWrapper","associatedProfiles","length","width","height","viewBox","fill","xmlns","d","MarginIconPencil","MarginIconDelete","_templateObject4","MarginAddMemberDiv","_templateObject5","_templateObject6","_templateObject7","Row","_templateObject8","_templateObject9","_templateObject10","MarginIcon","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","MarginIconSort","_templateObject17","FolderContainer","openInviteModal","setProfileNameEditInput","isTooltipDeleteVisible","setIsTooltipDeleteVisible","DragHandle","SortableHandle","iconType","iconHoveredColor","changeProfileNameToEdit","nameToEdit","editNameInput","IconReplace","IconFolderNew","FolderName","IconPencilFolder","setFolderNameToShare","setFolderIdToShare","id","setShareFolderVisible","IconShare","hoveredHighlight","IconAddMembers","visible","_Popconfirm","placement","onConfirm","removeSelectedFolder","okText","cancelText","onVisibleChange","onMouseEnter","onMouseLeave","IconBinTrashDelete","IconDelete","Container","borderRadiusContainer","MainContainer","PageTitle","Text","ContainerNameFolder","ButtonCreateFolder","_Button","ContentWrapper","isLoading","setIsLoading","foldersList","setFoldersList","foldersFromApi","setFoldersFromApi","folderNameToShare","folderIdToShare","shareFolderVisible","isFolderNewInputVisible","setIsFolderNewInputVisible","isLoadingProfileCount","setIsLoadingProfileCount","isInviteModalVisible","setIsInviteModalVisible","folderNameToInvite","setFolderNameToInvite","folderNewInputRef","folders","updateFolders","sharedFolders","defaultWorkspace","selectedFolder","selectedFolderFromCtx","updateSelectedFolder","useContext","userContext","isLoaded","workspaceIsLoaded","workspaceId","updateWorkspace","workspaceContext","isUseFoldersFromCtx","foldersListWhenToggle","selectedFolderWhenToggle","localStorage","getItem","getFolders","getFoldersList","rawCachedFolders","orderedFolders","JSON","parse","map","elem","index","_objectSpread","order","sort","a","b","refreshWorkspace","inputFolderName","_ref6","workspaceData","requestWorkspace","newFolders","SortableItem","SortableElement","_ref7","SortableList","SortableContainer","_ref8","items","folderFromApi","find","_ref9","onSortEnd","_ref11","_ref10","oldIndex","newIndex","newFoldersArray","sortArrayAfterDrag","f","i","sendActionAnalytics","catch","setItem","stringify","updatedFolderOrders","reduce","acc","el","shared","push","changeWorkspaceFolderOrder","changeFoldersOrder","shouldCancelStart","e","targetTag","tagName","clickedOnFunctionalIcon","attempts","currentElemClass","getAttribute","includes","parentNode","toLowerCase","_ref12","substr","createdFolder","createWorkspaceFolder","addFolder","cachedFolders","_ref13","filter","removeWorkspaceFolder","removeFolder","Promise","resolve","oldName","newName","renameWorkspaceFolder","renameFolder","newFolderArray","folderObj","isFolderPageHeaderHidden","Header","_folderNewInputRef$cu","fontSize","FoldersEmpty","ent","marginTop","showText","lockAxis","lockToContainerEdges","useDragHandle","FolderNewInput","Helmet","window","gologinAppVersion","ShareFolderModal","shareFolder","foldersIdsToShare","onClose","InviteMembersModal","initWithFolderName","cx","cy","r","array","isMoveDown","minIndex","maxIndex","newArray","forEach","item","moveToIndex"],"sourceRoot":""}