{"version":3,"file":"393.renderer.js","mappings":"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","sources":["webpack://GoLogin/./src/app/features/common/get-data-by-based-ip/index.tsx","webpack://GoLogin/./src/app/features/profile-settings/content/settings/profile-name/styles.tsx","webpack://GoLogin/./src/app/features/updateProfile/components/overview-tab.tsx","webpack://GoLogin/./src/app/ui/modern-popover/options.tsx","webpack://GoLogin/./src/app/ui/modern-popover/paste-spintax.ts","webpack://GoLogin/./src/app/ui/modern-popover/spintax-list.ts"],"sourcesContent":["import { IDataForGetTimezone, IGetLanguagesByBasedIp, IGetTimezoneByBasedIp } from './interfaces';\r\nimport { IProxy as IProxyProfile, ProxyMode } from '../../../interfaces';\r\n\r\nconst getTorOrFreeProxyRegion = (proxy: IProxyProfile): string => {\r\n  if (proxy.mode === 'tor' && proxy.torProxyRegion) {\r\n    return proxy.torProxyRegion;\r\n  }\r\n\r\n  if (proxy.mode === 'gologin' && proxy.autoProxyRegion) {\r\n    return proxy.autoProxyRegion;\r\n  }\r\n\r\n  return 'us';\r\n};\r\n\r\nexport const getTimezoneByBasedIp = (dataForGetTimezone: IDataForGetTimezone): IGetTimezoneByBasedIp => {\r\n  const { proxy, proxyFromCtx, localUserDevice = {}, translation } = dataForGetTimezone;\r\n  const { status = false, timezone = '', country = '' } = proxyFromCtx || {};\r\n  const { timezone: realTimezone = '', country: realCountry = '' } = localUserDevice || {};\r\n  if (['gologin', 'tor'].includes(proxy.mode as ProxyMode)) {\r\n    const freeProxyCountry = getTorOrFreeProxyRegion(proxy);\r\n    const freeProxyTimezone = translation('countries.' + freeProxyCountry) || '';\r\n\r\n    return { timezone: freeProxyTimezone, country: freeProxyCountry };\r\n  }\r\n\r\n  if (status && timezone) {\r\n    return { timezone, country };\r\n  }\r\n\r\n  return { timezone: realTimezone, country: realCountry };\r\n};\r\n\r\nexport const getLanguageByBasedIp = (dataForGetLanguage: IGetLanguagesByBasedIp): string => {\r\n  const { proxyFromCtx, realLocalLanguages = '', realLocalCountry = '' } = dataForGetLanguage;\r\n  const { status = false, languages: languagesFromProxy = '', country: countryFromProxy = '' } = proxyFromCtx || {};\r\n  let languagesByBasedIp = languagesFromProxy;\r\n  let countryByBasedIp = countryFromProxy;\r\n  if (!(status && languagesFromProxy)) {\r\n    languagesByBasedIp = realLocalLanguages;\r\n    countryByBasedIp = realLocalCountry;\r\n  }\r\n\r\n  const [firstDetectedLangLocale] = languagesByBasedIp.split(',');\r\n  let resultLangs: string[] = [];\r\n  if (countryByBasedIp) {\r\n    resultLangs.push([firstDetectedLangLocale, countryByBasedIp].join('-'));\r\n  }\r\n\r\n  resultLangs.push(firstDetectedLangLocale, 'en-US', 'en');\r\n  resultLangs = [...new Set(resultLangs)];\r\n\r\n  return resultLangs.reduce((acc: string, lang: string, index: number) => {\r\n    if (!index) {\r\n      acc += `${lang},`;\r\n\r\n      return acc;\r\n    }\r\n\r\n    const qualityParam = 10 - index;\r\n    if (qualityParam > 0) {\r\n      const separator = (resultLangs.length - index) < 2 ? '' : ',';\r\n      acc += `${lang};q=${Number(qualityParam * 0.1).toFixed(1)}${separator}`;\r\n    }\r\n\r\n    return acc;\r\n  }, '');\r\n};\r\n","import styled from '@emotion/styled/macro';\r\nimport { Modal } from 'antd';\r\n\r\nimport { textFont } from '../../../../../ui/style-templates';\r\n\r\nexport const ModalConfirmCustom = styled(Modal)`\r\n  .ant-modal-content {\r\n    width: 554px;\r\n    height: 208px;\r\n    border-radius: 16px;\r\n    box-shadow: 0px 1px 32px 0px rgba(0, 0, 0, 0.12), 0px 12px 24px 0px rgba(0, 0, 0, 0.12), 0px 8px 16px 0px rgba(0, 0, 0, 0.12);\r\n  }\r\n  .ant-modal-footer {\r\n    display: none;\r\n  }\r\n  .ant-modal-close {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const ModalTitle = styled('div')`\r\n  color: var(--36363D);\r\n  text-align: center;\r\n  font-family: Roboto;\r\n  font-size: 24px;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  line-height: normal;\r\n`;\r\n\r\nexport const ModalDescription = styled('div')`\r\n  color: var(--36363D);\r\n  text-align: center;\r\n  padding: 24px;\r\n  ${textFont()};\r\n`;\r\n\r\nexport const ModalButton = styled('div')`\r\n  display: inline-flex;\r\n  padding: 6px 16px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n  border-radius: 16px;\r\n  border: 1px solid var(--98989F);\r\n  height: 32px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const ModalButtonConfirm = styled(ModalButton)`\r\n  background-color: var(--00997A);\r\n  color: var(--FFFFFF);\r\n  border: 1px solid var(--00997A);\r\n`;\r\n\r\nexport const ModalCloseContainer = styled('div')`\r\n  display: flex;\r\n  justify-content: end;\r\n`;\r\n\r\nexport const ExampleContainer = styled('div')`\r\n  color: var(--36363D);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const PopupTitle = styled('div')`\r\n  font-family: 'Roboto';\r\n  padding: 16px 16px 0;\r\n  font-size: 14px;\r\n  color: var(--36363D);\r\n  font-weight: 600;\r\n  margin-bottom: 4px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n`;\r\n\r\nexport const PopupDescription = styled('div')`\r\n  font-size: 12px;\r\n  color: var(--696973);\r\n  padding: 0 16px 8px;\r\n  font-weight: 400;\r\n  font-family: 'Roboto';\r\n  line-height: 16px;\r\n  letter-spacing: 0.2px;\r\n`;\r\n\r\nexport const SpintaxTitle = styled(PopupTitle)`\r\n  padding: 0;\r\n  font-weight: 400;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const SpintaxDescription = styled(PopupDescription)`\r\n  color: var(--81818A);\r\n  padding: 0;\r\n`;\r\n\r\nexport const InputProfileName = styled('input')`\r\n  display: flex;\r\n  width: 226px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  background: inherit;\r\n  outline: none;\r\n  letter-spacing: 0.25px;\r\n  border: none;\r\n  font-family: Roboto;\r\n  font-size: 14px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  height: 20px;\r\n`;\r\n\r\nexport const ContainerExample = styled('div')`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 0 16px 14px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: flex;\r\n`;\r\n\r\nexport const ContainerSpintax = styled('div')`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 8px 16px;\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { Radio, Button, Select } from 'antd';\r\nimport { RadioChangeEvent } from 'antd/lib/radio';\r\nimport React, { FC, ReactElement } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst TabContainer = styled('div')`\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  color: var(--000000-update-profile-overview);\r\n`;\r\n\r\nconst ContentOperationSystem = styled('div')`\r\n  margin-top: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ButtonNewFingerprint = styled(Button)`\r\n  font-size: 12px;\r\n  margin-top: 10px;\r\n  color: var(--1FC47D-update-profile-overview);\r\n  border-color: var(--1FC47D-update-profile-overview);\r\n  font-size: 12px;\r\n  :hover {\r\n    opacity: 0.7;\r\n  }\r\n  padding: 0 10px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: 'center;\r\n`;\r\n\r\nconst Subtitle = styled('span')`\r\n  display: block;\r\n  font-size: 12px;\r\n  color: var(--000000-update-profile-overview);\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst RadioButton = styled(Radio.Button)`\r\n  width: 90px;\r\n  height: 30px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 29px;\r\n  @media screen and (max-width: 325px) {\r\n    width: 75px;\r\n  }\r\n`;\r\n\r\n// any to be able to set type in implementation\r\nexport const SelectAdvanced = styled<any>(Select)`\r\n  margin-top: 20px;\r\n  \r\n  width: 111px;\r\n  @media screen and (max-width: 450px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\ntype TOsPickOptions = 'win' | 'win11' | 'mac' | 'macArm' | 'lin' | 'android';\r\n\r\ninterface IOverviewTab {\r\n  updateProfileInfo: any;\r\n  profileInfo: any;\r\n  updateFingerprint: any;\r\n  setUpdatedField: (filed: string) => any;\r\n}\r\nconst OverviewTab: FC<IOverviewTab> = (props) => {\r\n  const { updateProfileInfo, profileInfo, updateFingerprint, setUpdatedField } = props;\r\n\r\n  const { t: translation } = useTranslation();\r\n\r\n  const updateOsValue = async (event: RadioChangeEvent): Promise<void> => {\r\n    const os = event.target.value;\r\n\r\n    await updateProfileInfo({\r\n      os,\r\n    });\r\n\r\n    setUpdatedField('os');\r\n  };\r\n\r\n  const updateFingerprintAndSetField = (): void => {\r\n    updateFingerprint();\r\n    setUpdatedField('fingerprint');\r\n  };\r\n\r\n  const getRadioValue = () => {\r\n    if (profileInfo.isM1 || profileInfo.osSpec?.includes('M')) {\r\n      return 'macArm';\r\n    }\r\n\r\n    if (profileInfo.osSpec === 'win11') {\r\n      return 'win11';\r\n    }\r\n\r\n    return profileInfo.os;\r\n  };\r\n\r\n  const getDisabledFields = (field: TOsPickOptions): boolean => {\r\n    const { os, isM1, osSpec } = profileInfo;\r\n\r\n    if (osSpec === 'win11') {\r\n      return field !== 'win11';\r\n    }\r\n\r\n    if (os === 'mac' && (isM1 || osSpec?.includes('M'))) {\r\n      return field !== 'macArm';\r\n    }\r\n\r\n    return os !== field;\r\n  };\r\n\r\n  const getOsSpecSelector = (): ReactElement | null => {\r\n    if (getRadioValue() === 'macArm') {\r\n      return (\r\n        <SelectAdvanced\r\n          disabled={true}\r\n          value={profileInfo.osSpec}\r\n          onChange={(value: string): void => {\r\n            updateProfileInfo({\r\n              osSpec: value,\r\n            });\r\n            setUpdatedField('osSpec');\r\n          }}\r\n        >\r\n          <Select.Option value='M1'>\r\n            M1\r\n          </Select.Option>\r\n          <Select.Option value='M2'>\r\n            M2\r\n          </Select.Option>\r\n          <Select.Option value='M3'>\r\n            M3\r\n          </Select.Option>\r\n        </SelectAdvanced>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <TabContainer>\r\n      <ContentOperationSystem>\r\n        <Subtitle>\r\n          {translation('base.operatingSystem')}\r\n        </Subtitle>\r\n        <Radio.Group\r\n          value={getRadioValue()}\r\n          size='default'\r\n          onChange={updateOsValue}\r\n        >\r\n          <RadioButton disabled={getDisabledFields('win')} value='win'>\r\n            Windows\r\n          </RadioButton>\r\n          <RadioButton disabled={getDisabledFields('win11')} value='win11' style={{ width: 100 }}>\r\n            Windows 11\r\n          </RadioButton>\r\n          <RadioButton disabled={getDisabledFields('mac')} value='mac'>\r\n            Mac Intel\r\n          </RadioButton>\r\n          <RadioButton disabled={getDisabledFields('macArm')} value='macArm'>\r\n            Mac ARM\r\n          </RadioButton>\r\n          <RadioButton disabled={getDisabledFields('lin')} value='lin'>\r\n            Linux\r\n          </RadioButton>\r\n          <RadioButton disabled={getDisabledFields('android')} value='android'>\r\n            Android\r\n          </RadioButton>\r\n        </Radio.Group>\r\n        {getOsSpecSelector()}\r\n        <div>\r\n          <ButtonNewFingerprint\r\n            onClick={updateFingerprintAndSetField}\r\n          >\r\n            {translation('editProfile.overview.updateFingerprintBtnText')}\r\n          </ButtonNewFingerprint>\r\n        </div>\r\n      </ContentOperationSystem>\r\n    </TabContainer>\r\n  );\r\n};\r\n\r\nexport default OverviewTab;\r\n","import { TFunction } from 'i18next';\r\nimport React from 'react';\r\n\r\nimport { ISpintaxList } from './spintax-list';\r\nimport {\r\n  ContainerExample,\r\n  ContainerSpintax,\r\n  ExampleContainer,\r\n  PopupDescription,\r\n  PopupTitle,\r\n  SpintaxDescription,\r\n  SpintaxTitle,\r\n} from '../../features/profile-settings/content/settings/profile-name/styles';\r\nimport { parseNameFormatting } from '../../utils/parse-name-formatting';\r\nimport { INewNameProfile } from '../../utils/parse-name-formatting/interfaces';\r\nimport { Divider } from '../modern-select/styles';\r\n\r\nexport interface IRenderOptions {\r\n  profiles?: INewNameProfile[];\r\n  nameFormat: string;\r\n  translation: TFunction;\r\n  spintaxList: ISpintaxList[];\r\n  pasteSpintax: (newText: string) => void;\r\n}\r\n\r\nexport const renderOptions = (props: IRenderOptions): JSX.Element => {\r\n  const { profiles = [{}], translation, nameFormat, spintaxList, pasteSpintax } = props;\r\n\r\n  const formattingParams = {\r\n    profiles,\r\n    nameFormat,\r\n  };\r\n\r\n  const [{ name: exampleName }] = parseNameFormatting(formattingParams);\r\n\r\n  return (\r\n    <div style={{ width: 335, padding: '14px 0 8px' }}>\r\n      <ContainerExample>\r\n        <div style={{ color: 'var(--98989F)' }}>\r\n          Ex:&nbsp;\r\n        </div>\r\n        <ExampleContainer>\r\n          {exampleName}\r\n        </ExampleContainer>\r\n      </ContainerExample>\r\n      <Divider style={{ margin: 0 }} />\r\n      <PopupTitle>\r\n        {translation('modals.renameProfiles.title')}\r\n      </PopupTitle>\r\n      <PopupDescription>\r\n        {translation('modals.renameProfiles.description')}\r\n      </PopupDescription>\r\n      {spintaxList.map(item => (\r\n        <ContainerSpintax key={item.title}>\r\n          <SpintaxTitle onClick={(): void => pasteSpintax(item.title)}>\r\n            {item.title}\r\n          </SpintaxTitle>\r\n          <SpintaxDescription>\r\n            {item.description}\r\n          </SpintaxDescription>\r\n        </ContainerSpintax>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","export interface IPasteSpintax {\r\n  inputElem: HTMLInputElement|null;\r\n  newText: string;\r\n  setProfileName: (profileName: string) => void;\r\n}\r\n\r\nexport const pasteSpintax = (pasteSpintaxParam: IPasteSpintax): void => {\r\n  const { inputElem, setProfileName, newText } = pasteSpintaxParam;\r\n  if (!inputElem) {\r\n    return;\r\n  }\r\n\r\n  const defaultSelectionPosition = 0;\r\n  const start = inputElem.selectionStart || defaultSelectionPosition;\r\n  const end = inputElem.selectionEnd || defaultSelectionPosition;\r\n  const text = inputElem.value;\r\n  const startStringPosition = 0;\r\n  const before = text.substring(startStringPosition, start);\r\n  const after  = text.substring(end, text.length);\r\n  setProfileName(before + newText + after);\r\n};\r\n","import { TFunction } from 'i18next';\r\n\r\nexport interface ISpintaxList {\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport const getSpintaxList = (translation: TFunction): ISpintaxList[] => [{\r\n  title: '{number from 1}',\r\n  description: translation('spintax.descriptions.numberFrom'),\r\n}, {\r\n  title: '{today}',\r\n  description: translation('spintax.descriptions.today') + ' ' + new Date().toLocaleDateString('en-GB'),\r\n}, {\r\n  title: '{profile name}',\r\n  description: translation('spintax.descriptions.profileName'),\r\n}, {\r\n  title: '{email}',\r\n  description: translation('spintax.descriptions.email'),\r\n}];\r\n"],"names":["getTimezoneByBasedIp","dataForGetTimezone","proxy","proxyFromCtx","localUserDevice","translation","status","timezone","country","realTimezone","realCountry","includes","mode","freeProxyCountry","torProxyRegion","autoProxyRegion","getTorOrFreeProxyRegion","getLanguageByBasedIp","dataForGetLanguage","realLocalLanguages","realLocalCountry","languages","languagesFromProxy","countryFromProxy","languagesByBasedIp","countryByBasedIp","firstDetectedLangLocale","split","resultLangs","push","join","Set","reduce","acc","lang","index","concat","qualityParam","separator","length","Number","toFixed","ModalConfirmCustom","_styled","_Modal","target","label","name","styles","ModalTitle","ModalDescription","textFont","ModalButton","ModalButtonConfirm","ModalCloseContainer","ExampleContainer","PopupTitle","PopupDescription","SpintaxTitle","SpintaxDescription","InputProfileName","ContainerExample","ContainerSpintax","TabContainer","styled","_templateObject","_taggedTemplateLiteral","ContentOperationSystem","_templateObject2","ButtonNewFingerprint","_Button","_templateObject3","Subtitle","_templateObject4","RadioButton","_Radio","_templateObject5","SelectAdvanced","_Select","_templateObject6","props","updateProfileInfo","profileInfo","updateFingerprint","setUpdatedField","t","useTranslation","updateOsValue","_ref","_asyncToGenerator","event","os","value","_x","apply","arguments","getRadioValue","_profileInfo$osSpec","isM1","osSpec","getDisabledFields","field","React","size","onChange","disabled","style","width","onClick","renderOptions","profiles","nameFormat","spintaxList","pasteSpintax","formattingParams","exampleName","parseNameFormatting","padding","color","Divider","margin","map","item","key","title","description","pasteSpintaxParam","inputElem","setProfileName","newText","start","selectionStart","end","selectionEnd","text","substring","getSpintaxList","Date","toLocaleDateString"],"sourceRoot":""}